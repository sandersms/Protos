// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: openconfig_interfaces.proto
// Original file comments:
// openconfig_interfaces.proto file
// Derived from the OpenConfig interfaces model github.com/openconfig/public/release/models/interfaces
// Copyright (c) 2023 Dell Inc, or its subsidiaries.
// (-- api-linter: core::0141::forbidden-types=disabled
//     aip.dev/not-precedent: counters, mtu, index must be uint and not int. --)
#ifndef GRPC_openconfig_5finterfaces_2eproto__INCLUDED
#define GRPC_openconfig_5finterfaces_2eproto__INCLUDED

#include "openconfig_interfaces.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace opi_api {
namespace network {
namespace v1alpha1 {

// Service functions for Network Interface exported by the server
class NetInterfaceService final {
 public:
  static constexpr char const* service_full_name() {
    return "opi_api.network.v1alpha1.NetInterfaceService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Retrieves the interface information for a given interface
    virtual ::grpc::Status GetNetInterface(::grpc::ClientContext* context, const ::opi_api::network::v1alpha1::GetNetInterfaceRequest& request, ::opi_api::network::v1alpha1::NetInterface* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::network::v1alpha1::NetInterface>> AsyncGetNetInterface(::grpc::ClientContext* context, const ::opi_api::network::v1alpha1::GetNetInterfaceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::network::v1alpha1::NetInterface>>(AsyncGetNetInterfaceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::network::v1alpha1::NetInterface>> PrepareAsyncGetNetInterface(::grpc::ClientContext* context, const ::opi_api::network::v1alpha1::GetNetInterfaceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::network::v1alpha1::NetInterface>>(PrepareAsyncGetNetInterfaceRaw(context, request, cq));
    }
    // Retrieves the set of interfaces on the device
    virtual ::grpc::Status ListNetInterfaces(::grpc::ClientContext* context, const ::opi_api::network::v1alpha1::ListNetInterfacesRequest& request, ::opi_api::network::v1alpha1::ListNetInterfacesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::network::v1alpha1::ListNetInterfacesResponse>> AsyncListNetInterfaces(::grpc::ClientContext* context, const ::opi_api::network::v1alpha1::ListNetInterfacesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::network::v1alpha1::ListNetInterfacesResponse>>(AsyncListNetInterfacesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::network::v1alpha1::ListNetInterfacesResponse>> PrepareAsyncListNetInterfaces(::grpc::ClientContext* context, const ::opi_api::network::v1alpha1::ListNetInterfacesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::network::v1alpha1::ListNetInterfacesResponse>>(PrepareAsyncListNetInterfacesRaw(context, request, cq));
    }
    // A method for setting or changing configuration of an interface
    virtual ::grpc::Status UpdateNetInterface(::grpc::ClientContext* context, const ::opi_api::network::v1alpha1::UpdateNetInterfaceRequest& request, ::opi_api::network::v1alpha1::NetInterface* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::network::v1alpha1::NetInterface>> AsyncUpdateNetInterface(::grpc::ClientContext* context, const ::opi_api::network::v1alpha1::UpdateNetInterfaceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::network::v1alpha1::NetInterface>>(AsyncUpdateNetInterfaceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::network::v1alpha1::NetInterface>> PrepareAsyncUpdateNetInterface(::grpc::ClientContext* context, const ::opi_api::network::v1alpha1::UpdateNetInterfaceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::network::v1alpha1::NetInterface>>(PrepareAsyncUpdateNetInterfaceRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Retrieves the interface information for a given interface
      virtual void GetNetInterface(::grpc::ClientContext* context, const ::opi_api::network::v1alpha1::GetNetInterfaceRequest* request, ::opi_api::network::v1alpha1::NetInterface* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetNetInterface(::grpc::ClientContext* context, const ::opi_api::network::v1alpha1::GetNetInterfaceRequest* request, ::opi_api::network::v1alpha1::NetInterface* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Retrieves the set of interfaces on the device
      virtual void ListNetInterfaces(::grpc::ClientContext* context, const ::opi_api::network::v1alpha1::ListNetInterfacesRequest* request, ::opi_api::network::v1alpha1::ListNetInterfacesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListNetInterfaces(::grpc::ClientContext* context, const ::opi_api::network::v1alpha1::ListNetInterfacesRequest* request, ::opi_api::network::v1alpha1::ListNetInterfacesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // A method for setting or changing configuration of an interface
      virtual void UpdateNetInterface(::grpc::ClientContext* context, const ::opi_api::network::v1alpha1::UpdateNetInterfaceRequest* request, ::opi_api::network::v1alpha1::NetInterface* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateNetInterface(::grpc::ClientContext* context, const ::opi_api::network::v1alpha1::UpdateNetInterfaceRequest* request, ::opi_api::network::v1alpha1::NetInterface* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::network::v1alpha1::NetInterface>* AsyncGetNetInterfaceRaw(::grpc::ClientContext* context, const ::opi_api::network::v1alpha1::GetNetInterfaceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::network::v1alpha1::NetInterface>* PrepareAsyncGetNetInterfaceRaw(::grpc::ClientContext* context, const ::opi_api::network::v1alpha1::GetNetInterfaceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::network::v1alpha1::ListNetInterfacesResponse>* AsyncListNetInterfacesRaw(::grpc::ClientContext* context, const ::opi_api::network::v1alpha1::ListNetInterfacesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::network::v1alpha1::ListNetInterfacesResponse>* PrepareAsyncListNetInterfacesRaw(::grpc::ClientContext* context, const ::opi_api::network::v1alpha1::ListNetInterfacesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::network::v1alpha1::NetInterface>* AsyncUpdateNetInterfaceRaw(::grpc::ClientContext* context, const ::opi_api::network::v1alpha1::UpdateNetInterfaceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::network::v1alpha1::NetInterface>* PrepareAsyncUpdateNetInterfaceRaw(::grpc::ClientContext* context, const ::opi_api::network::v1alpha1::UpdateNetInterfaceRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status GetNetInterface(::grpc::ClientContext* context, const ::opi_api::network::v1alpha1::GetNetInterfaceRequest& request, ::opi_api::network::v1alpha1::NetInterface* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::network::v1alpha1::NetInterface>> AsyncGetNetInterface(::grpc::ClientContext* context, const ::opi_api::network::v1alpha1::GetNetInterfaceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::network::v1alpha1::NetInterface>>(AsyncGetNetInterfaceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::network::v1alpha1::NetInterface>> PrepareAsyncGetNetInterface(::grpc::ClientContext* context, const ::opi_api::network::v1alpha1::GetNetInterfaceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::network::v1alpha1::NetInterface>>(PrepareAsyncGetNetInterfaceRaw(context, request, cq));
    }
    ::grpc::Status ListNetInterfaces(::grpc::ClientContext* context, const ::opi_api::network::v1alpha1::ListNetInterfacesRequest& request, ::opi_api::network::v1alpha1::ListNetInterfacesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::network::v1alpha1::ListNetInterfacesResponse>> AsyncListNetInterfaces(::grpc::ClientContext* context, const ::opi_api::network::v1alpha1::ListNetInterfacesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::network::v1alpha1::ListNetInterfacesResponse>>(AsyncListNetInterfacesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::network::v1alpha1::ListNetInterfacesResponse>> PrepareAsyncListNetInterfaces(::grpc::ClientContext* context, const ::opi_api::network::v1alpha1::ListNetInterfacesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::network::v1alpha1::ListNetInterfacesResponse>>(PrepareAsyncListNetInterfacesRaw(context, request, cq));
    }
    ::grpc::Status UpdateNetInterface(::grpc::ClientContext* context, const ::opi_api::network::v1alpha1::UpdateNetInterfaceRequest& request, ::opi_api::network::v1alpha1::NetInterface* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::network::v1alpha1::NetInterface>> AsyncUpdateNetInterface(::grpc::ClientContext* context, const ::opi_api::network::v1alpha1::UpdateNetInterfaceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::network::v1alpha1::NetInterface>>(AsyncUpdateNetInterfaceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::network::v1alpha1::NetInterface>> PrepareAsyncUpdateNetInterface(::grpc::ClientContext* context, const ::opi_api::network::v1alpha1::UpdateNetInterfaceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::network::v1alpha1::NetInterface>>(PrepareAsyncUpdateNetInterfaceRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void GetNetInterface(::grpc::ClientContext* context, const ::opi_api::network::v1alpha1::GetNetInterfaceRequest* request, ::opi_api::network::v1alpha1::NetInterface* response, std::function<void(::grpc::Status)>) override;
      void GetNetInterface(::grpc::ClientContext* context, const ::opi_api::network::v1alpha1::GetNetInterfaceRequest* request, ::opi_api::network::v1alpha1::NetInterface* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ListNetInterfaces(::grpc::ClientContext* context, const ::opi_api::network::v1alpha1::ListNetInterfacesRequest* request, ::opi_api::network::v1alpha1::ListNetInterfacesResponse* response, std::function<void(::grpc::Status)>) override;
      void ListNetInterfaces(::grpc::ClientContext* context, const ::opi_api::network::v1alpha1::ListNetInterfacesRequest* request, ::opi_api::network::v1alpha1::ListNetInterfacesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void UpdateNetInterface(::grpc::ClientContext* context, const ::opi_api::network::v1alpha1::UpdateNetInterfaceRequest* request, ::opi_api::network::v1alpha1::NetInterface* response, std::function<void(::grpc::Status)>) override;
      void UpdateNetInterface(::grpc::ClientContext* context, const ::opi_api::network::v1alpha1::UpdateNetInterfaceRequest* request, ::opi_api::network::v1alpha1::NetInterface* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::opi_api::network::v1alpha1::NetInterface>* AsyncGetNetInterfaceRaw(::grpc::ClientContext* context, const ::opi_api::network::v1alpha1::GetNetInterfaceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::opi_api::network::v1alpha1::NetInterface>* PrepareAsyncGetNetInterfaceRaw(::grpc::ClientContext* context, const ::opi_api::network::v1alpha1::GetNetInterfaceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::opi_api::network::v1alpha1::ListNetInterfacesResponse>* AsyncListNetInterfacesRaw(::grpc::ClientContext* context, const ::opi_api::network::v1alpha1::ListNetInterfacesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::opi_api::network::v1alpha1::ListNetInterfacesResponse>* PrepareAsyncListNetInterfacesRaw(::grpc::ClientContext* context, const ::opi_api::network::v1alpha1::ListNetInterfacesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::opi_api::network::v1alpha1::NetInterface>* AsyncUpdateNetInterfaceRaw(::grpc::ClientContext* context, const ::opi_api::network::v1alpha1::UpdateNetInterfaceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::opi_api::network::v1alpha1::NetInterface>* PrepareAsyncUpdateNetInterfaceRaw(::grpc::ClientContext* context, const ::opi_api::network::v1alpha1::UpdateNetInterfaceRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetNetInterface_;
    const ::grpc::internal::RpcMethod rpcmethod_ListNetInterfaces_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateNetInterface_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Retrieves the interface information for a given interface
    virtual ::grpc::Status GetNetInterface(::grpc::ServerContext* context, const ::opi_api::network::v1alpha1::GetNetInterfaceRequest* request, ::opi_api::network::v1alpha1::NetInterface* response);
    // Retrieves the set of interfaces on the device
    virtual ::grpc::Status ListNetInterfaces(::grpc::ServerContext* context, const ::opi_api::network::v1alpha1::ListNetInterfacesRequest* request, ::opi_api::network::v1alpha1::ListNetInterfacesResponse* response);
    // A method for setting or changing configuration of an interface
    virtual ::grpc::Status UpdateNetInterface(::grpc::ServerContext* context, const ::opi_api::network::v1alpha1::UpdateNetInterfaceRequest* request, ::opi_api::network::v1alpha1::NetInterface* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetNetInterface : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetNetInterface() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetNetInterface() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNetInterface(::grpc::ServerContext* /*context*/, const ::opi_api::network::v1alpha1::GetNetInterfaceRequest* /*request*/, ::opi_api::network::v1alpha1::NetInterface* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetNetInterface(::grpc::ServerContext* context, ::opi_api::network::v1alpha1::GetNetInterfaceRequest* request, ::grpc::ServerAsyncResponseWriter< ::opi_api::network::v1alpha1::NetInterface>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListNetInterfaces : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListNetInterfaces() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_ListNetInterfaces() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListNetInterfaces(::grpc::ServerContext* /*context*/, const ::opi_api::network::v1alpha1::ListNetInterfacesRequest* /*request*/, ::opi_api::network::v1alpha1::ListNetInterfacesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListNetInterfaces(::grpc::ServerContext* context, ::opi_api::network::v1alpha1::ListNetInterfacesRequest* request, ::grpc::ServerAsyncResponseWriter< ::opi_api::network::v1alpha1::ListNetInterfacesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateNetInterface : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateNetInterface() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_UpdateNetInterface() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateNetInterface(::grpc::ServerContext* /*context*/, const ::opi_api::network::v1alpha1::UpdateNetInterfaceRequest* /*request*/, ::opi_api::network::v1alpha1::NetInterface* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateNetInterface(::grpc::ServerContext* context, ::opi_api::network::v1alpha1::UpdateNetInterfaceRequest* request, ::grpc::ServerAsyncResponseWriter< ::opi_api::network::v1alpha1::NetInterface>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetNetInterface<WithAsyncMethod_ListNetInterfaces<WithAsyncMethod_UpdateNetInterface<Service > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_GetNetInterface : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetNetInterface() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::opi_api::network::v1alpha1::GetNetInterfaceRequest, ::opi_api::network::v1alpha1::NetInterface>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::opi_api::network::v1alpha1::GetNetInterfaceRequest* request, ::opi_api::network::v1alpha1::NetInterface* response) { return this->GetNetInterface(context, request, response); }));}
    void SetMessageAllocatorFor_GetNetInterface(
        ::grpc::MessageAllocator< ::opi_api::network::v1alpha1::GetNetInterfaceRequest, ::opi_api::network::v1alpha1::NetInterface>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::opi_api::network::v1alpha1::GetNetInterfaceRequest, ::opi_api::network::v1alpha1::NetInterface>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetNetInterface() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNetInterface(::grpc::ServerContext* /*context*/, const ::opi_api::network::v1alpha1::GetNetInterfaceRequest* /*request*/, ::opi_api::network::v1alpha1::NetInterface* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetNetInterface(
      ::grpc::CallbackServerContext* /*context*/, const ::opi_api::network::v1alpha1::GetNetInterfaceRequest* /*request*/, ::opi_api::network::v1alpha1::NetInterface* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ListNetInterfaces : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ListNetInterfaces() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::opi_api::network::v1alpha1::ListNetInterfacesRequest, ::opi_api::network::v1alpha1::ListNetInterfacesResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::opi_api::network::v1alpha1::ListNetInterfacesRequest* request, ::opi_api::network::v1alpha1::ListNetInterfacesResponse* response) { return this->ListNetInterfaces(context, request, response); }));}
    void SetMessageAllocatorFor_ListNetInterfaces(
        ::grpc::MessageAllocator< ::opi_api::network::v1alpha1::ListNetInterfacesRequest, ::opi_api::network::v1alpha1::ListNetInterfacesResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::opi_api::network::v1alpha1::ListNetInterfacesRequest, ::opi_api::network::v1alpha1::ListNetInterfacesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ListNetInterfaces() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListNetInterfaces(::grpc::ServerContext* /*context*/, const ::opi_api::network::v1alpha1::ListNetInterfacesRequest* /*request*/, ::opi_api::network::v1alpha1::ListNetInterfacesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListNetInterfaces(
      ::grpc::CallbackServerContext* /*context*/, const ::opi_api::network::v1alpha1::ListNetInterfacesRequest* /*request*/, ::opi_api::network::v1alpha1::ListNetInterfacesResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_UpdateNetInterface : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UpdateNetInterface() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::opi_api::network::v1alpha1::UpdateNetInterfaceRequest, ::opi_api::network::v1alpha1::NetInterface>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::opi_api::network::v1alpha1::UpdateNetInterfaceRequest* request, ::opi_api::network::v1alpha1::NetInterface* response) { return this->UpdateNetInterface(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateNetInterface(
        ::grpc::MessageAllocator< ::opi_api::network::v1alpha1::UpdateNetInterfaceRequest, ::opi_api::network::v1alpha1::NetInterface>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::opi_api::network::v1alpha1::UpdateNetInterfaceRequest, ::opi_api::network::v1alpha1::NetInterface>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UpdateNetInterface() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateNetInterface(::grpc::ServerContext* /*context*/, const ::opi_api::network::v1alpha1::UpdateNetInterfaceRequest* /*request*/, ::opi_api::network::v1alpha1::NetInterface* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateNetInterface(
      ::grpc::CallbackServerContext* /*context*/, const ::opi_api::network::v1alpha1::UpdateNetInterfaceRequest* /*request*/, ::opi_api::network::v1alpha1::NetInterface* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_GetNetInterface<WithCallbackMethod_ListNetInterfaces<WithCallbackMethod_UpdateNetInterface<Service > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetNetInterface : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetNetInterface() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetNetInterface() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNetInterface(::grpc::ServerContext* /*context*/, const ::opi_api::network::v1alpha1::GetNetInterfaceRequest* /*request*/, ::opi_api::network::v1alpha1::NetInterface* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListNetInterfaces : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListNetInterfaces() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_ListNetInterfaces() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListNetInterfaces(::grpc::ServerContext* /*context*/, const ::opi_api::network::v1alpha1::ListNetInterfacesRequest* /*request*/, ::opi_api::network::v1alpha1::ListNetInterfacesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateNetInterface : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateNetInterface() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_UpdateNetInterface() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateNetInterface(::grpc::ServerContext* /*context*/, const ::opi_api::network::v1alpha1::UpdateNetInterfaceRequest* /*request*/, ::opi_api::network::v1alpha1::NetInterface* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetNetInterface : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetNetInterface() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetNetInterface() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNetInterface(::grpc::ServerContext* /*context*/, const ::opi_api::network::v1alpha1::GetNetInterfaceRequest* /*request*/, ::opi_api::network::v1alpha1::NetInterface* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetNetInterface(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListNetInterfaces : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListNetInterfaces() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_ListNetInterfaces() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListNetInterfaces(::grpc::ServerContext* /*context*/, const ::opi_api::network::v1alpha1::ListNetInterfacesRequest* /*request*/, ::opi_api::network::v1alpha1::ListNetInterfacesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListNetInterfaces(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateNetInterface : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateNetInterface() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_UpdateNetInterface() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateNetInterface(::grpc::ServerContext* /*context*/, const ::opi_api::network::v1alpha1::UpdateNetInterfaceRequest* /*request*/, ::opi_api::network::v1alpha1::NetInterface* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateNetInterface(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetNetInterface : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetNetInterface() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetNetInterface(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetNetInterface() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNetInterface(::grpc::ServerContext* /*context*/, const ::opi_api::network::v1alpha1::GetNetInterfaceRequest* /*request*/, ::opi_api::network::v1alpha1::NetInterface* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetNetInterface(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ListNetInterfaces : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ListNetInterfaces() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListNetInterfaces(context, request, response); }));
    }
    ~WithRawCallbackMethod_ListNetInterfaces() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListNetInterfaces(::grpc::ServerContext* /*context*/, const ::opi_api::network::v1alpha1::ListNetInterfacesRequest* /*request*/, ::opi_api::network::v1alpha1::ListNetInterfacesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListNetInterfaces(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UpdateNetInterface : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UpdateNetInterface() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateNetInterface(context, request, response); }));
    }
    ~WithRawCallbackMethod_UpdateNetInterface() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateNetInterface(::grpc::ServerContext* /*context*/, const ::opi_api::network::v1alpha1::UpdateNetInterfaceRequest* /*request*/, ::opi_api::network::v1alpha1::NetInterface* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateNetInterface(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetNetInterface : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetNetInterface() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::opi_api::network::v1alpha1::GetNetInterfaceRequest, ::opi_api::network::v1alpha1::NetInterface>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::opi_api::network::v1alpha1::GetNetInterfaceRequest, ::opi_api::network::v1alpha1::NetInterface>* streamer) {
                       return this->StreamedGetNetInterface(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetNetInterface() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetNetInterface(::grpc::ServerContext* /*context*/, const ::opi_api::network::v1alpha1::GetNetInterfaceRequest* /*request*/, ::opi_api::network::v1alpha1::NetInterface* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetNetInterface(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::opi_api::network::v1alpha1::GetNetInterfaceRequest,::opi_api::network::v1alpha1::NetInterface>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListNetInterfaces : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListNetInterfaces() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::opi_api::network::v1alpha1::ListNetInterfacesRequest, ::opi_api::network::v1alpha1::ListNetInterfacesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::opi_api::network::v1alpha1::ListNetInterfacesRequest, ::opi_api::network::v1alpha1::ListNetInterfacesResponse>* streamer) {
                       return this->StreamedListNetInterfaces(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListNetInterfaces() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListNetInterfaces(::grpc::ServerContext* /*context*/, const ::opi_api::network::v1alpha1::ListNetInterfacesRequest* /*request*/, ::opi_api::network::v1alpha1::ListNetInterfacesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListNetInterfaces(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::opi_api::network::v1alpha1::ListNetInterfacesRequest,::opi_api::network::v1alpha1::ListNetInterfacesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateNetInterface : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateNetInterface() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::opi_api::network::v1alpha1::UpdateNetInterfaceRequest, ::opi_api::network::v1alpha1::NetInterface>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::opi_api::network::v1alpha1::UpdateNetInterfaceRequest, ::opi_api::network::v1alpha1::NetInterface>* streamer) {
                       return this->StreamedUpdateNetInterface(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdateNetInterface() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateNetInterface(::grpc::ServerContext* /*context*/, const ::opi_api::network::v1alpha1::UpdateNetInterfaceRequest* /*request*/, ::opi_api::network::v1alpha1::NetInterface* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateNetInterface(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::opi_api::network::v1alpha1::UpdateNetInterfaceRequest,::opi_api::network::v1alpha1::NetInterface>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetNetInterface<WithStreamedUnaryMethod_ListNetInterfaces<WithStreamedUnaryMethod_UpdateNetInterface<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetNetInterface<WithStreamedUnaryMethod_ListNetInterfaces<WithStreamedUnaryMethod_UpdateNetInterface<Service > > > StreamedService;
};

}  // namespace v1alpha1
}  // namespace network
}  // namespace opi_api


#endif  // GRPC_openconfig_5finterfaces_2eproto__INCLUDED
