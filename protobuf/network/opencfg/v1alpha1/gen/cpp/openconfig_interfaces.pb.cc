// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: openconfig_interfaces.proto

#include "openconfig_interfaces.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace opi_api {
namespace network {
namespace v1alpha1 {
constexpr Config::Config(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , description_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , type_(0)

  , mtu_(0u)
  , loopback_mode_(false)
  , enabled_(false)
  , tpid_(0)
{}
struct ConfigDefaultTypeInternal {
  constexpr ConfigDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ConfigDefaultTypeInternal() {}
  union {
    Config _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ConfigDefaultTypeInternal _Config_default_instance_;
constexpr Counters::Counters(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : rx_octets_(uint64_t{0u})
  , rx_packets_(uint64_t{0u})
  , rx_unicast_pkts_(uint64_t{0u})
  , rx_broadcast_pkts_(uint64_t{0u})
  , rx_multicast_pkts_(uint64_t{0u})
  , rx_discards_(uint64_t{0u})
  , rx_errors_(uint64_t{0u})
  , rx_unknown_protos_(uint64_t{0u})
  , rx_fcs_errors_(uint64_t{0u})
  , out_octets_(uint64_t{0u})
  , out_packets_(uint64_t{0u})
  , out_unicast_pkts_(uint64_t{0u})
  , out_broadcast_pkts_(uint64_t{0u})
  , out_multicast_pkts_(uint64_t{0u})
  , out_discards_(uint64_t{0u})
  , out_errors_(uint64_t{0u})
  , carrier_transitions_(uint64_t{0u})
  , last_clear_(uint64_t{0u}){}
struct CountersDefaultTypeInternal {
  constexpr CountersDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CountersDefaultTypeInternal() {}
  union {
    Counters _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CountersDefaultTypeInternal _Counters_default_instance_;
constexpr State::State(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , description_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , counters_(nullptr)
  , type_(0)

  , mtu_(0u)
  , ifindex_(0u)
  , admin_state_(0)

  , loopback_mode_(false)
  , enabled_(false)
  , logical_(false)
  , management_(false)
  , oper_state_(0)

  , last_change_(uint64_t{0u})
  , cpu_(false)
  , tpid_(0)
{}
struct StateDefaultTypeInternal {
  constexpr StateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StateDefaultTypeInternal() {}
  union {
    State _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StateDefaultTypeInternal _State_default_instance_;
constexpr NetInterface_HoldTime_HoldConfig::NetInterface_HoldTime_HoldConfig(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : up_(0u)
  , down_(0u){}
struct NetInterface_HoldTime_HoldConfigDefaultTypeInternal {
  constexpr NetInterface_HoldTime_HoldConfigDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NetInterface_HoldTime_HoldConfigDefaultTypeInternal() {}
  union {
    NetInterface_HoldTime_HoldConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NetInterface_HoldTime_HoldConfigDefaultTypeInternal _NetInterface_HoldTime_HoldConfig_default_instance_;
constexpr NetInterface_HoldTime_HoldState::NetInterface_HoldTime_HoldState(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : up_(0u)
  , down_(0u){}
struct NetInterface_HoldTime_HoldStateDefaultTypeInternal {
  constexpr NetInterface_HoldTime_HoldStateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NetInterface_HoldTime_HoldStateDefaultTypeInternal() {}
  union {
    NetInterface_HoldTime_HoldState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NetInterface_HoldTime_HoldStateDefaultTypeInternal _NetInterface_HoldTime_HoldState_default_instance_;
constexpr NetInterface_HoldTime::NetInterface_HoldTime(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : hold_config_(nullptr)
  , hold_state_(nullptr){}
struct NetInterface_HoldTimeDefaultTypeInternal {
  constexpr NetInterface_HoldTimeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NetInterface_HoldTimeDefaultTypeInternal() {}
  union {
    NetInterface_HoldTime _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NetInterface_HoldTimeDefaultTypeInternal _NetInterface_HoldTime_default_instance_;
constexpr NetInterface_Subinterfaces_Subinterface_SubifConfig::NetInterface_Subinterfaces_Subinterface_SubifConfig(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : description_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , index_(uint64_t{0u})
  , enabled_(false){}
struct NetInterface_Subinterfaces_Subinterface_SubifConfigDefaultTypeInternal {
  constexpr NetInterface_Subinterfaces_Subinterface_SubifConfigDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NetInterface_Subinterfaces_Subinterface_SubifConfigDefaultTypeInternal() {}
  union {
    NetInterface_Subinterfaces_Subinterface_SubifConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NetInterface_Subinterfaces_Subinterface_SubifConfigDefaultTypeInternal _NetInterface_Subinterfaces_Subinterface_SubifConfig_default_instance_;
constexpr NetInterface_Subinterfaces_Subinterface::NetInterface_Subinterfaces_Subinterface(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : subif_config_(nullptr)
  , state_(nullptr)
  , vlan_(nullptr)
  , index_(int64_t{0}){}
struct NetInterface_Subinterfaces_SubinterfaceDefaultTypeInternal {
  constexpr NetInterface_Subinterfaces_SubinterfaceDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NetInterface_Subinterfaces_SubinterfaceDefaultTypeInternal() {}
  union {
    NetInterface_Subinterfaces_Subinterface _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NetInterface_Subinterfaces_SubinterfaceDefaultTypeInternal _NetInterface_Subinterfaces_Subinterface_default_instance_;
constexpr NetInterface_Subinterfaces::NetInterface_Subinterfaces(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : subinterface_(){}
struct NetInterface_SubinterfacesDefaultTypeInternal {
  constexpr NetInterface_SubinterfacesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NetInterface_SubinterfacesDefaultTypeInternal() {}
  union {
    NetInterface_Subinterfaces _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NetInterface_SubinterfacesDefaultTypeInternal _NetInterface_Subinterfaces_default_instance_;
constexpr NetInterface::NetInterface(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , config_(nullptr)
  , state_(nullptr)
  , holdtime_(nullptr)
  , subinterfaces_(nullptr)
  , ethernet_(nullptr){}
struct NetInterfaceDefaultTypeInternal {
  constexpr NetInterfaceDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NetInterfaceDefaultTypeInternal() {}
  union {
    NetInterface _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NetInterfaceDefaultTypeInternal _NetInterface_default_instance_;
constexpr GetNetInterfaceRequest::GetNetInterfaceRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct GetNetInterfaceRequestDefaultTypeInternal {
  constexpr GetNetInterfaceRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetNetInterfaceRequestDefaultTypeInternal() {}
  union {
    GetNetInterfaceRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetNetInterfaceRequestDefaultTypeInternal _GetNetInterfaceRequest_default_instance_;
constexpr ListNetInterfacesRequest::ListNetInterfacesRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : parent_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , page_token_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , page_size_(0){}
struct ListNetInterfacesRequestDefaultTypeInternal {
  constexpr ListNetInterfacesRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListNetInterfacesRequestDefaultTypeInternal() {}
  union {
    ListNetInterfacesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListNetInterfacesRequestDefaultTypeInternal _ListNetInterfacesRequest_default_instance_;
constexpr ListNetInterfacesResponse::ListNetInterfacesResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : net_interfaces_()
  , next_page_token_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ListNetInterfacesResponseDefaultTypeInternal {
  constexpr ListNetInterfacesResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListNetInterfacesResponseDefaultTypeInternal() {}
  union {
    ListNetInterfacesResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListNetInterfacesResponseDefaultTypeInternal _ListNetInterfacesResponse_default_instance_;
constexpr UpdateNetInterfaceRequest::UpdateNetInterfaceRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : net_interface_(nullptr)
  , update_mask_(nullptr){}
struct UpdateNetInterfaceRequestDefaultTypeInternal {
  constexpr UpdateNetInterfaceRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UpdateNetInterfaceRequestDefaultTypeInternal() {}
  union {
    UpdateNetInterfaceRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UpdateNetInterfaceRequestDefaultTypeInternal _UpdateNetInterfaceRequest_default_instance_;
}  // namespace v1alpha1
}  // namespace network
}  // namespace opi_api
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_openconfig_5finterfaces_2eproto[14];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_openconfig_5finterfaces_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_openconfig_5finterfaces_2eproto = nullptr;

const uint32_t TableStruct_openconfig_5finterfaces_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1alpha1::Config, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1alpha1::Config, name_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1alpha1::Config, type_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1alpha1::Config, mtu_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1alpha1::Config, loopback_mode_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1alpha1::Config, description_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1alpha1::Config, enabled_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1alpha1::Config, tpid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1alpha1::Counters, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1alpha1::Counters, rx_octets_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1alpha1::Counters, rx_packets_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1alpha1::Counters, rx_unicast_pkts_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1alpha1::Counters, rx_broadcast_pkts_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1alpha1::Counters, rx_multicast_pkts_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1alpha1::Counters, rx_discards_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1alpha1::Counters, rx_errors_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1alpha1::Counters, rx_unknown_protos_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1alpha1::Counters, rx_fcs_errors_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1alpha1::Counters, out_octets_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1alpha1::Counters, out_packets_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1alpha1::Counters, out_unicast_pkts_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1alpha1::Counters, out_broadcast_pkts_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1alpha1::Counters, out_multicast_pkts_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1alpha1::Counters, out_discards_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1alpha1::Counters, out_errors_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1alpha1::Counters, carrier_transitions_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1alpha1::Counters, last_clear_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1alpha1::State, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1alpha1::State, name_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1alpha1::State, type_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1alpha1::State, mtu_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1alpha1::State, loopback_mode_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1alpha1::State, description_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1alpha1::State, enabled_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1alpha1::State, ifindex_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1alpha1::State, admin_state_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1alpha1::State, oper_state_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1alpha1::State, last_change_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1alpha1::State, logical_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1alpha1::State, management_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1alpha1::State, cpu_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1alpha1::State, counters_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1alpha1::State, tpid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1alpha1::NetInterface_HoldTime_HoldConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1alpha1::NetInterface_HoldTime_HoldConfig, up_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1alpha1::NetInterface_HoldTime_HoldConfig, down_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1alpha1::NetInterface_HoldTime_HoldState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1alpha1::NetInterface_HoldTime_HoldState, up_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1alpha1::NetInterface_HoldTime_HoldState, down_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1alpha1::NetInterface_HoldTime, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1alpha1::NetInterface_HoldTime, hold_config_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1alpha1::NetInterface_HoldTime, hold_state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1alpha1::NetInterface_Subinterfaces_Subinterface_SubifConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1alpha1::NetInterface_Subinterfaces_Subinterface_SubifConfig, index_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1alpha1::NetInterface_Subinterfaces_Subinterface_SubifConfig, description_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1alpha1::NetInterface_Subinterfaces_Subinterface_SubifConfig, enabled_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1alpha1::NetInterface_Subinterfaces_Subinterface, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1alpha1::NetInterface_Subinterfaces_Subinterface, index_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1alpha1::NetInterface_Subinterfaces_Subinterface, subif_config_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1alpha1::NetInterface_Subinterfaces_Subinterface, state_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1alpha1::NetInterface_Subinterfaces_Subinterface, vlan_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1alpha1::NetInterface_Subinterfaces, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1alpha1::NetInterface_Subinterfaces, subinterface_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1alpha1::NetInterface, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1alpha1::NetInterface, name_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1alpha1::NetInterface, config_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1alpha1::NetInterface, state_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1alpha1::NetInterface, holdtime_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1alpha1::NetInterface, subinterfaces_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1alpha1::NetInterface, ethernet_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1alpha1::GetNetInterfaceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1alpha1::GetNetInterfaceRequest, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1alpha1::ListNetInterfacesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1alpha1::ListNetInterfacesRequest, parent_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1alpha1::ListNetInterfacesRequest, page_size_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1alpha1::ListNetInterfacesRequest, page_token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1alpha1::ListNetInterfacesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1alpha1::ListNetInterfacesResponse, net_interfaces_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1alpha1::ListNetInterfacesResponse, next_page_token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1alpha1::UpdateNetInterfaceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1alpha1::UpdateNetInterfaceRequest, net_interface_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1alpha1::UpdateNetInterfaceRequest, update_mask_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::opi_api::network::v1alpha1::Config)},
  { 13, -1, -1, sizeof(::opi_api::network::v1alpha1::Counters)},
  { 37, -1, -1, sizeof(::opi_api::network::v1alpha1::State)},
  { 58, -1, -1, sizeof(::opi_api::network::v1alpha1::NetInterface_HoldTime_HoldConfig)},
  { 66, -1, -1, sizeof(::opi_api::network::v1alpha1::NetInterface_HoldTime_HoldState)},
  { 74, -1, -1, sizeof(::opi_api::network::v1alpha1::NetInterface_HoldTime)},
  { 82, -1, -1, sizeof(::opi_api::network::v1alpha1::NetInterface_Subinterfaces_Subinterface_SubifConfig)},
  { 91, -1, -1, sizeof(::opi_api::network::v1alpha1::NetInterface_Subinterfaces_Subinterface)},
  { 101, -1, -1, sizeof(::opi_api::network::v1alpha1::NetInterface_Subinterfaces)},
  { 108, -1, -1, sizeof(::opi_api::network::v1alpha1::NetInterface)},
  { 120, -1, -1, sizeof(::opi_api::network::v1alpha1::GetNetInterfaceRequest)},
  { 127, -1, -1, sizeof(::opi_api::network::v1alpha1::ListNetInterfacesRequest)},
  { 136, -1, -1, sizeof(::opi_api::network::v1alpha1::ListNetInterfacesResponse)},
  { 144, -1, -1, sizeof(::opi_api::network::v1alpha1::UpdateNetInterfaceRequest)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::network::v1alpha1::_Config_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::network::v1alpha1::_Counters_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::network::v1alpha1::_State_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::network::v1alpha1::_NetInterface_HoldTime_HoldConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::network::v1alpha1::_NetInterface_HoldTime_HoldState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::network::v1alpha1::_NetInterface_HoldTime_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::network::v1alpha1::_NetInterface_Subinterfaces_Subinterface_SubifConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::network::v1alpha1::_NetInterface_Subinterfaces_Subinterface_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::network::v1alpha1::_NetInterface_Subinterfaces_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::network::v1alpha1::_NetInterface_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::network::v1alpha1::_GetNetInterfaceRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::network::v1alpha1::_ListNetInterfacesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::network::v1alpha1::_ListNetInterfacesResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::network::v1alpha1::_UpdateNetInterfaceRequest_default_instance_),
};

const char descriptor_table_protodef_openconfig_5finterfaces_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\033openconfig_interfaces.proto\022\030opi_api.n"
  "etwork.v1alpha1\032\022networktypes.proto\032\025ope"
  "nconfig_vlan.proto\032\031openconfig_ethernet."
  "proto\032\027google/api/client.proto\032\031google/a"
  "pi/resource.proto\032\034google/api/annotation"
  "s.proto\032\037google/api/field_behavior.proto"
  "\032 google/protobuf/field_mask.proto\"\312\001\n\006C"
  "onfig\022\014\n\004name\030\001 \001(\t\0225\n\004type\030\002 \001(\0162\'.opi_"
  "api.network.v1alpha1.InterfaceType\022\013\n\003mt"
  "u\030\003 \001(\r\022\025\n\rloopback_mode\030\004 \001(\010\022\023\n\013descri"
  "ption\030\005 \001(\t\022\017\n\007enabled\030\006 \001(\010\0221\n\004tpid\030\007 \001"
  "(\0162#.opi_api.network.v1alpha1.TpidTypes\""
  "\260\003\n\010Counters\022\021\n\trx_octets\030\001 \001(\004\022\022\n\nrx_pa"
  "ckets\030\002 \001(\004\022\027\n\017rx_unicast_pkts\030\003 \001(\004\022\031\n\021"
  "rx_broadcast_pkts\030\004 \001(\004\022\031\n\021rx_multicast_"
  "pkts\030\005 \001(\004\022\023\n\013rx_discards\030\006 \001(\004\022\021\n\trx_er"
  "rors\030\007 \001(\004\022\031\n\021rx_unknown_protos\030\010 \001(\004\022\025\n"
  "\rrx_fcs_errors\030\t \001(\004\022\022\n\nout_octets\030\n \001(\004"
  "\022\023\n\013out_packets\030\013 \001(\004\022\030\n\020out_unicast_pkt"
  "s\030\014 \001(\004\022\032\n\022out_broadcast_pkts\030\r \001(\004\022\032\n\022o"
  "ut_multicast_pkts\030\016 \001(\004\022\024\n\014out_discards\030"
  "\017 \001(\004\022\022\n\nout_errors\030\020 \001(\004\022\033\n\023carrier_tra"
  "nsitions\030\021 \001(\004\022\022\n\nlast_clear\030\022 \001(\004\"\330\003\n\005S"
  "tate\022\014\n\004name\030\001 \001(\t\0225\n\004type\030\002 \001(\0162\'.opi_a"
  "pi.network.v1alpha1.InterfaceType\022\013\n\003mtu"
  "\030\003 \001(\r\022\025\n\rloopback_mode\030\004 \001(\010\022\023\n\013descrip"
  "tion\030\005 \001(\t\022\017\n\007enabled\030\006 \001(\010\022\017\n\007ifindex\030\007"
  " \001(\r\022F\n\013admin_state\030\010 \001(\01621.opi_api.netw"
  "ork.opinetcommon.v1alpha1.AdminState\0227\n\n"
  "oper_state\030\t \001(\0162#.opi_api.network.v1alp"
  "ha1.OperState\022\023\n\013last_change\030\n \001(\004\022\017\n\007lo"
  "gical\030\013 \001(\010\022\022\n\nmanagement\030\014 \001(\010\022\013\n\003cpu\030\r"
  " \001(\010\0224\n\010counters\030\016 \001(\0132\".opi_api.network"
  ".v1alpha1.Counters\0221\n\004tpid\030\017 \001(\0162#.opi_a"
  "pi.network.v1alpha1.TpidTypes\"\326\007\n\014NetInt"
  "erface\022\014\n\004name\030\001 \001(\t\0220\n\006config\030\002 \001(\0132 .o"
  "pi_api.network.v1alpha1.Config\022.\n\005state\030"
  "\003 \001(\0132\037.opi_api.network.v1alpha1.State\022A"
  "\n\010holdtime\030\004 \001(\0132/.opi_api.network.v1alp"
  "ha1.NetInterface.HoldTime\022K\n\rsubinterfac"
  "es\030\005 \001(\01324.opi_api.network.v1alpha1.NetI"
  "nterface.Subinterfaces\0226\n\010ethernet\030\006 \001(\013"
  "2$.opi_api.network.v1alpha1.EthernetIf\032\371"
  "\001\n\010HoldTime\022O\n\013hold_config\030\001 \001(\0132:.opi_a"
  "pi.network.v1alpha1.NetInterface.HoldTim"
  "e.HoldConfig\022M\n\nhold_state\030\002 \001(\01329.opi_a"
  "pi.network.v1alpha1.NetInterface.HoldTim"
  "e.HoldState\032&\n\nHoldConfig\022\n\n\002up\030\001 \001(\r\022\014\n"
  "\004down\030\002 \001(\r\032%\n\tHoldState\022\n\n\002up\030\001 \001(\r\022\014\n\004"
  "down\030\002 \001(\r\032\221\003\n\rSubinterfaces\022W\n\014subinter"
  "face\030\002 \003(\0132A.opi_api.network.v1alpha1.Ne"
  "tInterface.Subinterfaces.Subinterface\032\246\002"
  "\n\014Subinterface\022\r\n\005index\030\001 \001(\003\022c\n\014subif_c"
  "onfig\030\002 \001(\0132M.opi_api.network.v1alpha1.N"
  "etInterface.Subinterfaces.Subinterface.S"
  "ubifConfig\022.\n\005state\030\003 \001(\0132\037.opi_api.netw"
  "ork.v1alpha1.State\022.\n\004vlan\030\004 \001(\0132 .opi_a"
  "pi.network.v1alpha1.VlanIf\032B\n\013SubifConfi"
  "g\022\r\n\005index\030\001 \001(\004\022\023\n\013description\030\002 \001(\t\022\017\n"
  "\007enabled\030\003 \001(\010\"M\n\026GetNetInterfaceRequest"
  "\0223\n\004name\030\001 \001(\tB%\340A\002\372A\037\n\035opi_api.network."
  "v1/Interfaces\"x\n\030ListNetInterfacesReques"
  "t\0225\n\006parent\030\001 \001(\tB%\340A\002\372A\037\n\035opi_api.netwo"
  "rk.v1/Interfaces\022\021\n\tpage_size\030\002 \001(\005\022\022\n\np"
  "age_token\030\003 \001(\t\"t\n\031ListNetInterfacesResp"
  "onse\022>\n\016net_interfaces\030\001 \003(\0132&.opi_api.n"
  "etwork.v1alpha1.NetInterface\022\027\n\017next_pag"
  "e_token\030\002 \001(\t\"\213\001\n\031UpdateNetInterfaceRequ"
  "est\022=\n\rnet_interface\030\001 \001(\0132&.opi_api.net"
  "work.v1alpha1.NetInterface\022/\n\013update_mas"
  "k\030\002 \001(\0132\032.google.protobuf.FieldMask*K\n\rI"
  "nterfaceType\022\036\n\032INTERFACE_TYPE_UNSPECIFI"
  "ED\020\000\022\014\n\010ETHERNET\020\001\022\014\n\010LOOPBACK\020\002*\324\001\n\tOpe"
  "rState\022\032\n\026OPER_STATE_UNSPECIFIED\020\000\022\021\n\rOP"
  "ER_STATE_UP\020\002\022\023\n\017OPER_STATE_DOWN\020\003\022\026\n\022OP"
  "ER_STATE_TESTING\020\004\022\026\n\022OPER_STATE_UNKNOWN"
  "\020\005\022\026\n\022OPER_STATE_DORMANT\020\006\022\032\n\026OPER_STATE"
  "_NOT_PRESENT\020\007\022\037\n\033OPER_STATE_LOWER_LAYER"
  "_DOWN\020\0102\272\004\n\023NetInterfaceService\022\237\001\n\017GetN"
  "etInterface\0220.opi_api.network.v1alpha1.G"
  "etNetInterfaceRequest\032&.opi_api.network."
  "v1alpha1.NetInterface\"2\202\323\344\223\002%\022#/v1/{name"
  "=interfaces/*/interface/*}\332A\004name\022\246\001\n\021Li"
  "stNetInterfaces\0222.opi_api.network.v1alph"
  "a1.ListNetInterfacesRequest\0323.opi_api.ne"
  "twork.v1alpha1.ListNetInterfacesResponse"
  "\"(\202\323\344\223\002\031\022\027/v1/{parent=interfaces}\332A\006pare"
  "nt\022\327\001\n\022UpdateNetInterface\0223.opi_api.netw"
  "ork.v1alpha1.UpdateNetInterfaceRequest\032&"
  ".opi_api.network.v1alpha1.NetInterface\"d"
  "\202\323\344\223\002B21/v1/{net_interface.name=interfac"
  "es/*/interface/*}:\rnet_interface\332A\031net_i"
  "nterface,update_maskB{\n\030opi_api.network."
  "v1alpha1B\031OpenconfigInterfacesProtoP\001ZBg"
  "ithub.com/opiproject/opi-api/network/opi"
  "netcommon/v1alpha1/gen/gob\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_openconfig_5finterfaces_2eproto_deps[8] = {
  &::descriptor_table_google_2fapi_2fannotations_2eproto,
  &::descriptor_table_google_2fapi_2fclient_2eproto,
  &::descriptor_table_google_2fapi_2ffield_5fbehavior_2eproto,
  &::descriptor_table_google_2fapi_2fresource_2eproto,
  &::descriptor_table_google_2fprotobuf_2ffield_5fmask_2eproto,
  &::descriptor_table_networktypes_2eproto,
  &::descriptor_table_openconfig_5fethernet_2eproto,
  &::descriptor_table_openconfig_5fvlan_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_openconfig_5finterfaces_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_openconfig_5finterfaces_2eproto = {
  false, false, 3833, descriptor_table_protodef_openconfig_5finterfaces_2eproto, "openconfig_interfaces.proto", 
  &descriptor_table_openconfig_5finterfaces_2eproto_once, descriptor_table_openconfig_5finterfaces_2eproto_deps, 8, 14,
  schemas, file_default_instances, TableStruct_openconfig_5finterfaces_2eproto::offsets,
  file_level_metadata_openconfig_5finterfaces_2eproto, file_level_enum_descriptors_openconfig_5finterfaces_2eproto, file_level_service_descriptors_openconfig_5finterfaces_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_openconfig_5finterfaces_2eproto_getter() {
  return &descriptor_table_openconfig_5finterfaces_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_openconfig_5finterfaces_2eproto(&descriptor_table_openconfig_5finterfaces_2eproto);
namespace opi_api {
namespace network {
namespace v1alpha1 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* InterfaceType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_openconfig_5finterfaces_2eproto);
  return file_level_enum_descriptors_openconfig_5finterfaces_2eproto[0];
}
bool InterfaceType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OperState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_openconfig_5finterfaces_2eproto);
  return file_level_enum_descriptors_openconfig_5finterfaces_2eproto[1];
}
bool OperState_IsValid(int value) {
  switch (value) {
    case 0:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Config::_Internal {
 public:
};

Config::Config(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.network.v1alpha1.Config)
}
Config::Config(const Config& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_description(), 
      GetArenaForAllocation());
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&tpid_) -
    reinterpret_cast<char*>(&type_)) + sizeof(tpid_));
  // @@protoc_insertion_point(copy_constructor:opi_api.network.v1alpha1.Config)
}

inline void Config::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&tpid_) -
    reinterpret_cast<char*>(&type_)) + sizeof(tpid_));
}

Config::~Config() {
  // @@protoc_insertion_point(destructor:opi_api.network.v1alpha1.Config)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Config::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Config::ArenaDtor(void* object) {
  Config* _this = reinterpret_cast< Config* >(object);
  (void)_this;
}
void Config::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Config::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Config::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.v1alpha1.Config)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  description_.ClearToEmpty();
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tpid_) -
      reinterpret_cast<char*>(&type_)) + sizeof(tpid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Config::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "opi_api.network.v1alpha1.Config.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.v1alpha1.InterfaceType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::opi_api::network::v1alpha1::InterfaceType>(val));
        } else
          goto handle_unusual;
        continue;
      // uint32 mtu = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          mtu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool loopback_mode = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          loopback_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string description = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "opi_api.network.v1alpha1.Config.description"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool enabled = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.v1alpha1.TpidTypes tpid = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_tpid(static_cast<::opi_api::network::v1alpha1::TpidTypes>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Config::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.v1alpha1.Config)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.network.v1alpha1.Config.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .opi_api.network.v1alpha1.InterfaceType type = 2;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // uint32 mtu = 3;
  if (this->_internal_mtu() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_mtu(), target);
  }

  // bool loopback_mode = 4;
  if (this->_internal_loopback_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_loopback_mode(), target);
  }

  // string description = 5;
  if (!this->_internal_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.network.v1alpha1.Config.description");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_description(), target);
  }

  // bool enabled = 6;
  if (this->_internal_enabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_enabled(), target);
  }

  // .opi_api.network.v1alpha1.TpidTypes tpid = 7;
  if (this->_internal_tpid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_tpid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.v1alpha1.Config)
  return target;
}

size_t Config::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.v1alpha1.Config)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string description = 5;
  if (!this->_internal_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // .opi_api.network.v1alpha1.InterfaceType type = 2;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // uint32 mtu = 3;
  if (this->_internal_mtu() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_mtu());
  }

  // bool loopback_mode = 4;
  if (this->_internal_loopback_mode() != 0) {
    total_size += 1 + 1;
  }

  // bool enabled = 6;
  if (this->_internal_enabled() != 0) {
    total_size += 1 + 1;
  }

  // .opi_api.network.v1alpha1.TpidTypes tpid = 7;
  if (this->_internal_tpid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_tpid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Config::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Config::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Config::GetClassData() const { return &_class_data_; }

void Config::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Config *>(to)->MergeFrom(
      static_cast<const Config &>(from));
}


void Config::MergeFrom(const Config& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.v1alpha1.Config)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_description().empty()) {
    _internal_set_description(from._internal_description());
  }
  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from._internal_mtu() != 0) {
    _internal_set_mtu(from._internal_mtu());
  }
  if (from._internal_loopback_mode() != 0) {
    _internal_set_loopback_mode(from._internal_loopback_mode());
  }
  if (from._internal_enabled() != 0) {
    _internal_set_enabled(from._internal_enabled());
  }
  if (from._internal_tpid() != 0) {
    _internal_set_tpid(from._internal_tpid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Config::CopyFrom(const Config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.v1alpha1.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Config::IsInitialized() const {
  return true;
}

void Config::InternalSwap(Config* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &description_, lhs_arena,
      &other->description_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Config, tpid_)
      + sizeof(Config::tpid_)
      - PROTOBUF_FIELD_OFFSET(Config, type_)>(
          reinterpret_cast<char*>(&type_),
          reinterpret_cast<char*>(&other->type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Config::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_openconfig_5finterfaces_2eproto_getter, &descriptor_table_openconfig_5finterfaces_2eproto_once,
      file_level_metadata_openconfig_5finterfaces_2eproto[0]);
}

// ===================================================================

class Counters::_Internal {
 public:
};

Counters::Counters(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.network.v1alpha1.Counters)
}
Counters::Counters(const Counters& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&rx_octets_, &from.rx_octets_,
    static_cast<size_t>(reinterpret_cast<char*>(&last_clear_) -
    reinterpret_cast<char*>(&rx_octets_)) + sizeof(last_clear_));
  // @@protoc_insertion_point(copy_constructor:opi_api.network.v1alpha1.Counters)
}

inline void Counters::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&rx_octets_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&last_clear_) -
    reinterpret_cast<char*>(&rx_octets_)) + sizeof(last_clear_));
}

Counters::~Counters() {
  // @@protoc_insertion_point(destructor:opi_api.network.v1alpha1.Counters)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Counters::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Counters::ArenaDtor(void* object) {
  Counters* _this = reinterpret_cast< Counters* >(object);
  (void)_this;
}
void Counters::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Counters::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Counters::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.v1alpha1.Counters)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&rx_octets_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&last_clear_) -
      reinterpret_cast<char*>(&rx_octets_)) + sizeof(last_clear_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Counters::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 rx_octets = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          rx_octets_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 rx_packets = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          rx_packets_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 rx_unicast_pkts = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          rx_unicast_pkts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 rx_broadcast_pkts = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          rx_broadcast_pkts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 rx_multicast_pkts = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          rx_multicast_pkts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 rx_discards = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          rx_discards_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 rx_errors = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          rx_errors_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 rx_unknown_protos = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          rx_unknown_protos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 rx_fcs_errors = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          rx_fcs_errors_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 out_octets = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          out_octets_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 out_packets = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          out_packets_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 out_unicast_pkts = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          out_unicast_pkts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 out_broadcast_pkts = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          out_broadcast_pkts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 out_multicast_pkts = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          out_multicast_pkts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 out_discards = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          out_discards_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 out_errors = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          out_errors_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 carrier_transitions = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          carrier_transitions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 last_clear = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          last_clear_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Counters::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.v1alpha1.Counters)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 rx_octets = 1;
  if (this->_internal_rx_octets() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_rx_octets(), target);
  }

  // uint64 rx_packets = 2;
  if (this->_internal_rx_packets() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_rx_packets(), target);
  }

  // uint64 rx_unicast_pkts = 3;
  if (this->_internal_rx_unicast_pkts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_rx_unicast_pkts(), target);
  }

  // uint64 rx_broadcast_pkts = 4;
  if (this->_internal_rx_broadcast_pkts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_rx_broadcast_pkts(), target);
  }

  // uint64 rx_multicast_pkts = 5;
  if (this->_internal_rx_multicast_pkts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_rx_multicast_pkts(), target);
  }

  // uint64 rx_discards = 6;
  if (this->_internal_rx_discards() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_rx_discards(), target);
  }

  // uint64 rx_errors = 7;
  if (this->_internal_rx_errors() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_rx_errors(), target);
  }

  // uint64 rx_unknown_protos = 8;
  if (this->_internal_rx_unknown_protos() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->_internal_rx_unknown_protos(), target);
  }

  // uint64 rx_fcs_errors = 9;
  if (this->_internal_rx_fcs_errors() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(9, this->_internal_rx_fcs_errors(), target);
  }

  // uint64 out_octets = 10;
  if (this->_internal_out_octets() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(10, this->_internal_out_octets(), target);
  }

  // uint64 out_packets = 11;
  if (this->_internal_out_packets() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(11, this->_internal_out_packets(), target);
  }

  // uint64 out_unicast_pkts = 12;
  if (this->_internal_out_unicast_pkts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(12, this->_internal_out_unicast_pkts(), target);
  }

  // uint64 out_broadcast_pkts = 13;
  if (this->_internal_out_broadcast_pkts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(13, this->_internal_out_broadcast_pkts(), target);
  }

  // uint64 out_multicast_pkts = 14;
  if (this->_internal_out_multicast_pkts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(14, this->_internal_out_multicast_pkts(), target);
  }

  // uint64 out_discards = 15;
  if (this->_internal_out_discards() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(15, this->_internal_out_discards(), target);
  }

  // uint64 out_errors = 16;
  if (this->_internal_out_errors() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(16, this->_internal_out_errors(), target);
  }

  // uint64 carrier_transitions = 17;
  if (this->_internal_carrier_transitions() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(17, this->_internal_carrier_transitions(), target);
  }

  // uint64 last_clear = 18;
  if (this->_internal_last_clear() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(18, this->_internal_last_clear(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.v1alpha1.Counters)
  return target;
}

size_t Counters::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.v1alpha1.Counters)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 rx_octets = 1;
  if (this->_internal_rx_octets() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_rx_octets());
  }

  // uint64 rx_packets = 2;
  if (this->_internal_rx_packets() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_rx_packets());
  }

  // uint64 rx_unicast_pkts = 3;
  if (this->_internal_rx_unicast_pkts() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_rx_unicast_pkts());
  }

  // uint64 rx_broadcast_pkts = 4;
  if (this->_internal_rx_broadcast_pkts() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_rx_broadcast_pkts());
  }

  // uint64 rx_multicast_pkts = 5;
  if (this->_internal_rx_multicast_pkts() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_rx_multicast_pkts());
  }

  // uint64 rx_discards = 6;
  if (this->_internal_rx_discards() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_rx_discards());
  }

  // uint64 rx_errors = 7;
  if (this->_internal_rx_errors() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_rx_errors());
  }

  // uint64 rx_unknown_protos = 8;
  if (this->_internal_rx_unknown_protos() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_rx_unknown_protos());
  }

  // uint64 rx_fcs_errors = 9;
  if (this->_internal_rx_fcs_errors() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_rx_fcs_errors());
  }

  // uint64 out_octets = 10;
  if (this->_internal_out_octets() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_out_octets());
  }

  // uint64 out_packets = 11;
  if (this->_internal_out_packets() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_out_packets());
  }

  // uint64 out_unicast_pkts = 12;
  if (this->_internal_out_unicast_pkts() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_out_unicast_pkts());
  }

  // uint64 out_broadcast_pkts = 13;
  if (this->_internal_out_broadcast_pkts() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_out_broadcast_pkts());
  }

  // uint64 out_multicast_pkts = 14;
  if (this->_internal_out_multicast_pkts() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_out_multicast_pkts());
  }

  // uint64 out_discards = 15;
  if (this->_internal_out_discards() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_out_discards());
  }

  // uint64 out_errors = 16;
  if (this->_internal_out_errors() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_out_errors());
  }

  // uint64 carrier_transitions = 17;
  if (this->_internal_carrier_transitions() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_carrier_transitions());
  }

  // uint64 last_clear = 18;
  if (this->_internal_last_clear() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_last_clear());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Counters::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Counters::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Counters::GetClassData() const { return &_class_data_; }

void Counters::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Counters *>(to)->MergeFrom(
      static_cast<const Counters &>(from));
}


void Counters::MergeFrom(const Counters& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.v1alpha1.Counters)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_rx_octets() != 0) {
    _internal_set_rx_octets(from._internal_rx_octets());
  }
  if (from._internal_rx_packets() != 0) {
    _internal_set_rx_packets(from._internal_rx_packets());
  }
  if (from._internal_rx_unicast_pkts() != 0) {
    _internal_set_rx_unicast_pkts(from._internal_rx_unicast_pkts());
  }
  if (from._internal_rx_broadcast_pkts() != 0) {
    _internal_set_rx_broadcast_pkts(from._internal_rx_broadcast_pkts());
  }
  if (from._internal_rx_multicast_pkts() != 0) {
    _internal_set_rx_multicast_pkts(from._internal_rx_multicast_pkts());
  }
  if (from._internal_rx_discards() != 0) {
    _internal_set_rx_discards(from._internal_rx_discards());
  }
  if (from._internal_rx_errors() != 0) {
    _internal_set_rx_errors(from._internal_rx_errors());
  }
  if (from._internal_rx_unknown_protos() != 0) {
    _internal_set_rx_unknown_protos(from._internal_rx_unknown_protos());
  }
  if (from._internal_rx_fcs_errors() != 0) {
    _internal_set_rx_fcs_errors(from._internal_rx_fcs_errors());
  }
  if (from._internal_out_octets() != 0) {
    _internal_set_out_octets(from._internal_out_octets());
  }
  if (from._internal_out_packets() != 0) {
    _internal_set_out_packets(from._internal_out_packets());
  }
  if (from._internal_out_unicast_pkts() != 0) {
    _internal_set_out_unicast_pkts(from._internal_out_unicast_pkts());
  }
  if (from._internal_out_broadcast_pkts() != 0) {
    _internal_set_out_broadcast_pkts(from._internal_out_broadcast_pkts());
  }
  if (from._internal_out_multicast_pkts() != 0) {
    _internal_set_out_multicast_pkts(from._internal_out_multicast_pkts());
  }
  if (from._internal_out_discards() != 0) {
    _internal_set_out_discards(from._internal_out_discards());
  }
  if (from._internal_out_errors() != 0) {
    _internal_set_out_errors(from._internal_out_errors());
  }
  if (from._internal_carrier_transitions() != 0) {
    _internal_set_carrier_transitions(from._internal_carrier_transitions());
  }
  if (from._internal_last_clear() != 0) {
    _internal_set_last_clear(from._internal_last_clear());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Counters::CopyFrom(const Counters& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.v1alpha1.Counters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Counters::IsInitialized() const {
  return true;
}

void Counters::InternalSwap(Counters* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Counters, last_clear_)
      + sizeof(Counters::last_clear_)
      - PROTOBUF_FIELD_OFFSET(Counters, rx_octets_)>(
          reinterpret_cast<char*>(&rx_octets_),
          reinterpret_cast<char*>(&other->rx_octets_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Counters::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_openconfig_5finterfaces_2eproto_getter, &descriptor_table_openconfig_5finterfaces_2eproto_once,
      file_level_metadata_openconfig_5finterfaces_2eproto[1]);
}

// ===================================================================

class State::_Internal {
 public:
  static const ::opi_api::network::v1alpha1::Counters& counters(const State* msg);
};

const ::opi_api::network::v1alpha1::Counters&
State::_Internal::counters(const State* msg) {
  return *msg->counters_;
}
State::State(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.network.v1alpha1.State)
}
State::State(const State& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_description(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_counters()) {
    counters_ = new ::opi_api::network::v1alpha1::Counters(*from.counters_);
  } else {
    counters_ = nullptr;
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&tpid_) -
    reinterpret_cast<char*>(&type_)) + sizeof(tpid_));
  // @@protoc_insertion_point(copy_constructor:opi_api.network.v1alpha1.State)
}

inline void State::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&counters_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&tpid_) -
    reinterpret_cast<char*>(&counters_)) + sizeof(tpid_));
}

State::~State() {
  // @@protoc_insertion_point(destructor:opi_api.network.v1alpha1.State)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void State::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete counters_;
}

void State::ArenaDtor(void* object) {
  State* _this = reinterpret_cast< State* >(object);
  (void)_this;
}
void State::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void State::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void State::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.v1alpha1.State)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  description_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && counters_ != nullptr) {
    delete counters_;
  }
  counters_ = nullptr;
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tpid_) -
      reinterpret_cast<char*>(&type_)) + sizeof(tpid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* State::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "opi_api.network.v1alpha1.State.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.v1alpha1.InterfaceType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::opi_api::network::v1alpha1::InterfaceType>(val));
        } else
          goto handle_unusual;
        continue;
      // uint32 mtu = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          mtu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool loopback_mode = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          loopback_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string description = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "opi_api.network.v1alpha1.State.description"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool enabled = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 ifindex = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          ifindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.opinetcommon.v1alpha1.AdminState admin_state = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_admin_state(static_cast<::opi_api::network::opinetcommon::v1alpha1::AdminState>(val));
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.v1alpha1.OperState oper_state = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_oper_state(static_cast<::opi_api::network::v1alpha1::OperState>(val));
        } else
          goto handle_unusual;
        continue;
      // uint64 last_change = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          last_change_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool logical = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          logical_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool management = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          management_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool cpu = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          cpu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.v1alpha1.Counters counters = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_counters(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.v1alpha1.TpidTypes tpid = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_tpid(static_cast<::opi_api::network::v1alpha1::TpidTypes>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* State::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.v1alpha1.State)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.network.v1alpha1.State.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .opi_api.network.v1alpha1.InterfaceType type = 2;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // uint32 mtu = 3;
  if (this->_internal_mtu() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_mtu(), target);
  }

  // bool loopback_mode = 4;
  if (this->_internal_loopback_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_loopback_mode(), target);
  }

  // string description = 5;
  if (!this->_internal_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.network.v1alpha1.State.description");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_description(), target);
  }

  // bool enabled = 6;
  if (this->_internal_enabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_enabled(), target);
  }

  // uint32 ifindex = 7;
  if (this->_internal_ifindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_ifindex(), target);
  }

  // .opi_api.network.opinetcommon.v1alpha1.AdminState admin_state = 8;
  if (this->_internal_admin_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      8, this->_internal_admin_state(), target);
  }

  // .opi_api.network.v1alpha1.OperState oper_state = 9;
  if (this->_internal_oper_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      9, this->_internal_oper_state(), target);
  }

  // uint64 last_change = 10;
  if (this->_internal_last_change() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(10, this->_internal_last_change(), target);
  }

  // bool logical = 11;
  if (this->_internal_logical() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_logical(), target);
  }

  // bool management = 12;
  if (this->_internal_management() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_management(), target);
  }

  // bool cpu = 13;
  if (this->_internal_cpu() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_cpu(), target);
  }

  // .opi_api.network.v1alpha1.Counters counters = 14;
  if (this->_internal_has_counters()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::counters(this), target, stream);
  }

  // .opi_api.network.v1alpha1.TpidTypes tpid = 15;
  if (this->_internal_tpid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      15, this->_internal_tpid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.v1alpha1.State)
  return target;
}

size_t State::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.v1alpha1.State)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string description = 5;
  if (!this->_internal_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // .opi_api.network.v1alpha1.Counters counters = 14;
  if (this->_internal_has_counters()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *counters_);
  }

  // .opi_api.network.v1alpha1.InterfaceType type = 2;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // uint32 mtu = 3;
  if (this->_internal_mtu() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_mtu());
  }

  // uint32 ifindex = 7;
  if (this->_internal_ifindex() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_ifindex());
  }

  // .opi_api.network.opinetcommon.v1alpha1.AdminState admin_state = 8;
  if (this->_internal_admin_state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_admin_state());
  }

  // bool loopback_mode = 4;
  if (this->_internal_loopback_mode() != 0) {
    total_size += 1 + 1;
  }

  // bool enabled = 6;
  if (this->_internal_enabled() != 0) {
    total_size += 1 + 1;
  }

  // bool logical = 11;
  if (this->_internal_logical() != 0) {
    total_size += 1 + 1;
  }

  // bool management = 12;
  if (this->_internal_management() != 0) {
    total_size += 1 + 1;
  }

  // .opi_api.network.v1alpha1.OperState oper_state = 9;
  if (this->_internal_oper_state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_oper_state());
  }

  // uint64 last_change = 10;
  if (this->_internal_last_change() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_last_change());
  }

  // bool cpu = 13;
  if (this->_internal_cpu() != 0) {
    total_size += 1 + 1;
  }

  // .opi_api.network.v1alpha1.TpidTypes tpid = 15;
  if (this->_internal_tpid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_tpid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData State::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    State::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*State::GetClassData() const { return &_class_data_; }

void State::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<State *>(to)->MergeFrom(
      static_cast<const State &>(from));
}


void State::MergeFrom(const State& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.v1alpha1.State)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_description().empty()) {
    _internal_set_description(from._internal_description());
  }
  if (from._internal_has_counters()) {
    _internal_mutable_counters()->::opi_api::network::v1alpha1::Counters::MergeFrom(from._internal_counters());
  }
  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from._internal_mtu() != 0) {
    _internal_set_mtu(from._internal_mtu());
  }
  if (from._internal_ifindex() != 0) {
    _internal_set_ifindex(from._internal_ifindex());
  }
  if (from._internal_admin_state() != 0) {
    _internal_set_admin_state(from._internal_admin_state());
  }
  if (from._internal_loopback_mode() != 0) {
    _internal_set_loopback_mode(from._internal_loopback_mode());
  }
  if (from._internal_enabled() != 0) {
    _internal_set_enabled(from._internal_enabled());
  }
  if (from._internal_logical() != 0) {
    _internal_set_logical(from._internal_logical());
  }
  if (from._internal_management() != 0) {
    _internal_set_management(from._internal_management());
  }
  if (from._internal_oper_state() != 0) {
    _internal_set_oper_state(from._internal_oper_state());
  }
  if (from._internal_last_change() != 0) {
    _internal_set_last_change(from._internal_last_change());
  }
  if (from._internal_cpu() != 0) {
    _internal_set_cpu(from._internal_cpu());
  }
  if (from._internal_tpid() != 0) {
    _internal_set_tpid(from._internal_tpid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void State::CopyFrom(const State& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.v1alpha1.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool State::IsInitialized() const {
  return true;
}

void State::InternalSwap(State* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &description_, lhs_arena,
      &other->description_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(State, tpid_)
      + sizeof(State::tpid_)
      - PROTOBUF_FIELD_OFFSET(State, counters_)>(
          reinterpret_cast<char*>(&counters_),
          reinterpret_cast<char*>(&other->counters_));
}

::PROTOBUF_NAMESPACE_ID::Metadata State::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_openconfig_5finterfaces_2eproto_getter, &descriptor_table_openconfig_5finterfaces_2eproto_once,
      file_level_metadata_openconfig_5finterfaces_2eproto[2]);
}

// ===================================================================

class NetInterface_HoldTime_HoldConfig::_Internal {
 public:
};

NetInterface_HoldTime_HoldConfig::NetInterface_HoldTime_HoldConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.network.v1alpha1.NetInterface.HoldTime.HoldConfig)
}
NetInterface_HoldTime_HoldConfig::NetInterface_HoldTime_HoldConfig(const NetInterface_HoldTime_HoldConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&up_, &from.up_,
    static_cast<size_t>(reinterpret_cast<char*>(&down_) -
    reinterpret_cast<char*>(&up_)) + sizeof(down_));
  // @@protoc_insertion_point(copy_constructor:opi_api.network.v1alpha1.NetInterface.HoldTime.HoldConfig)
}

inline void NetInterface_HoldTime_HoldConfig::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&up_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&down_) -
    reinterpret_cast<char*>(&up_)) + sizeof(down_));
}

NetInterface_HoldTime_HoldConfig::~NetInterface_HoldTime_HoldConfig() {
  // @@protoc_insertion_point(destructor:opi_api.network.v1alpha1.NetInterface.HoldTime.HoldConfig)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void NetInterface_HoldTime_HoldConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void NetInterface_HoldTime_HoldConfig::ArenaDtor(void* object) {
  NetInterface_HoldTime_HoldConfig* _this = reinterpret_cast< NetInterface_HoldTime_HoldConfig* >(object);
  (void)_this;
}
void NetInterface_HoldTime_HoldConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NetInterface_HoldTime_HoldConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NetInterface_HoldTime_HoldConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.v1alpha1.NetInterface.HoldTime.HoldConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&up_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&down_) -
      reinterpret_cast<char*>(&up_)) + sizeof(down_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NetInterface_HoldTime_HoldConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 up = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          up_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 down = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          down_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NetInterface_HoldTime_HoldConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.v1alpha1.NetInterface.HoldTime.HoldConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 up = 1;
  if (this->_internal_up() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_up(), target);
  }

  // uint32 down = 2;
  if (this->_internal_down() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_down(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.v1alpha1.NetInterface.HoldTime.HoldConfig)
  return target;
}

size_t NetInterface_HoldTime_HoldConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.v1alpha1.NetInterface.HoldTime.HoldConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 up = 1;
  if (this->_internal_up() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_up());
  }

  // uint32 down = 2;
  if (this->_internal_down() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_down());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NetInterface_HoldTime_HoldConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NetInterface_HoldTime_HoldConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NetInterface_HoldTime_HoldConfig::GetClassData() const { return &_class_data_; }

void NetInterface_HoldTime_HoldConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<NetInterface_HoldTime_HoldConfig *>(to)->MergeFrom(
      static_cast<const NetInterface_HoldTime_HoldConfig &>(from));
}


void NetInterface_HoldTime_HoldConfig::MergeFrom(const NetInterface_HoldTime_HoldConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.v1alpha1.NetInterface.HoldTime.HoldConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_up() != 0) {
    _internal_set_up(from._internal_up());
  }
  if (from._internal_down() != 0) {
    _internal_set_down(from._internal_down());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NetInterface_HoldTime_HoldConfig::CopyFrom(const NetInterface_HoldTime_HoldConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.v1alpha1.NetInterface.HoldTime.HoldConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetInterface_HoldTime_HoldConfig::IsInitialized() const {
  return true;
}

void NetInterface_HoldTime_HoldConfig::InternalSwap(NetInterface_HoldTime_HoldConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NetInterface_HoldTime_HoldConfig, down_)
      + sizeof(NetInterface_HoldTime_HoldConfig::down_)
      - PROTOBUF_FIELD_OFFSET(NetInterface_HoldTime_HoldConfig, up_)>(
          reinterpret_cast<char*>(&up_),
          reinterpret_cast<char*>(&other->up_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NetInterface_HoldTime_HoldConfig::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_openconfig_5finterfaces_2eproto_getter, &descriptor_table_openconfig_5finterfaces_2eproto_once,
      file_level_metadata_openconfig_5finterfaces_2eproto[3]);
}

// ===================================================================

class NetInterface_HoldTime_HoldState::_Internal {
 public:
};

NetInterface_HoldTime_HoldState::NetInterface_HoldTime_HoldState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.network.v1alpha1.NetInterface.HoldTime.HoldState)
}
NetInterface_HoldTime_HoldState::NetInterface_HoldTime_HoldState(const NetInterface_HoldTime_HoldState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&up_, &from.up_,
    static_cast<size_t>(reinterpret_cast<char*>(&down_) -
    reinterpret_cast<char*>(&up_)) + sizeof(down_));
  // @@protoc_insertion_point(copy_constructor:opi_api.network.v1alpha1.NetInterface.HoldTime.HoldState)
}

inline void NetInterface_HoldTime_HoldState::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&up_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&down_) -
    reinterpret_cast<char*>(&up_)) + sizeof(down_));
}

NetInterface_HoldTime_HoldState::~NetInterface_HoldTime_HoldState() {
  // @@protoc_insertion_point(destructor:opi_api.network.v1alpha1.NetInterface.HoldTime.HoldState)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void NetInterface_HoldTime_HoldState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void NetInterface_HoldTime_HoldState::ArenaDtor(void* object) {
  NetInterface_HoldTime_HoldState* _this = reinterpret_cast< NetInterface_HoldTime_HoldState* >(object);
  (void)_this;
}
void NetInterface_HoldTime_HoldState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NetInterface_HoldTime_HoldState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NetInterface_HoldTime_HoldState::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.v1alpha1.NetInterface.HoldTime.HoldState)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&up_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&down_) -
      reinterpret_cast<char*>(&up_)) + sizeof(down_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NetInterface_HoldTime_HoldState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 up = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          up_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 down = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          down_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NetInterface_HoldTime_HoldState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.v1alpha1.NetInterface.HoldTime.HoldState)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 up = 1;
  if (this->_internal_up() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_up(), target);
  }

  // uint32 down = 2;
  if (this->_internal_down() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_down(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.v1alpha1.NetInterface.HoldTime.HoldState)
  return target;
}

size_t NetInterface_HoldTime_HoldState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.v1alpha1.NetInterface.HoldTime.HoldState)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 up = 1;
  if (this->_internal_up() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_up());
  }

  // uint32 down = 2;
  if (this->_internal_down() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_down());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NetInterface_HoldTime_HoldState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NetInterface_HoldTime_HoldState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NetInterface_HoldTime_HoldState::GetClassData() const { return &_class_data_; }

void NetInterface_HoldTime_HoldState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<NetInterface_HoldTime_HoldState *>(to)->MergeFrom(
      static_cast<const NetInterface_HoldTime_HoldState &>(from));
}


void NetInterface_HoldTime_HoldState::MergeFrom(const NetInterface_HoldTime_HoldState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.v1alpha1.NetInterface.HoldTime.HoldState)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_up() != 0) {
    _internal_set_up(from._internal_up());
  }
  if (from._internal_down() != 0) {
    _internal_set_down(from._internal_down());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NetInterface_HoldTime_HoldState::CopyFrom(const NetInterface_HoldTime_HoldState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.v1alpha1.NetInterface.HoldTime.HoldState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetInterface_HoldTime_HoldState::IsInitialized() const {
  return true;
}

void NetInterface_HoldTime_HoldState::InternalSwap(NetInterface_HoldTime_HoldState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NetInterface_HoldTime_HoldState, down_)
      + sizeof(NetInterface_HoldTime_HoldState::down_)
      - PROTOBUF_FIELD_OFFSET(NetInterface_HoldTime_HoldState, up_)>(
          reinterpret_cast<char*>(&up_),
          reinterpret_cast<char*>(&other->up_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NetInterface_HoldTime_HoldState::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_openconfig_5finterfaces_2eproto_getter, &descriptor_table_openconfig_5finterfaces_2eproto_once,
      file_level_metadata_openconfig_5finterfaces_2eproto[4]);
}

// ===================================================================

class NetInterface_HoldTime::_Internal {
 public:
  static const ::opi_api::network::v1alpha1::NetInterface_HoldTime_HoldConfig& hold_config(const NetInterface_HoldTime* msg);
  static const ::opi_api::network::v1alpha1::NetInterface_HoldTime_HoldState& hold_state(const NetInterface_HoldTime* msg);
};

const ::opi_api::network::v1alpha1::NetInterface_HoldTime_HoldConfig&
NetInterface_HoldTime::_Internal::hold_config(const NetInterface_HoldTime* msg) {
  return *msg->hold_config_;
}
const ::opi_api::network::v1alpha1::NetInterface_HoldTime_HoldState&
NetInterface_HoldTime::_Internal::hold_state(const NetInterface_HoldTime* msg) {
  return *msg->hold_state_;
}
NetInterface_HoldTime::NetInterface_HoldTime(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.network.v1alpha1.NetInterface.HoldTime)
}
NetInterface_HoldTime::NetInterface_HoldTime(const NetInterface_HoldTime& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_hold_config()) {
    hold_config_ = new ::opi_api::network::v1alpha1::NetInterface_HoldTime_HoldConfig(*from.hold_config_);
  } else {
    hold_config_ = nullptr;
  }
  if (from._internal_has_hold_state()) {
    hold_state_ = new ::opi_api::network::v1alpha1::NetInterface_HoldTime_HoldState(*from.hold_state_);
  } else {
    hold_state_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:opi_api.network.v1alpha1.NetInterface.HoldTime)
}

inline void NetInterface_HoldTime::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&hold_config_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&hold_state_) -
    reinterpret_cast<char*>(&hold_config_)) + sizeof(hold_state_));
}

NetInterface_HoldTime::~NetInterface_HoldTime() {
  // @@protoc_insertion_point(destructor:opi_api.network.v1alpha1.NetInterface.HoldTime)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void NetInterface_HoldTime::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete hold_config_;
  if (this != internal_default_instance()) delete hold_state_;
}

void NetInterface_HoldTime::ArenaDtor(void* object) {
  NetInterface_HoldTime* _this = reinterpret_cast< NetInterface_HoldTime* >(object);
  (void)_this;
}
void NetInterface_HoldTime::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NetInterface_HoldTime::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NetInterface_HoldTime::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.v1alpha1.NetInterface.HoldTime)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && hold_config_ != nullptr) {
    delete hold_config_;
  }
  hold_config_ = nullptr;
  if (GetArenaForAllocation() == nullptr && hold_state_ != nullptr) {
    delete hold_state_;
  }
  hold_state_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NetInterface_HoldTime::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .opi_api.network.v1alpha1.NetInterface.HoldTime.HoldConfig hold_config = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_hold_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.v1alpha1.NetInterface.HoldTime.HoldState hold_state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_hold_state(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NetInterface_HoldTime::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.v1alpha1.NetInterface.HoldTime)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .opi_api.network.v1alpha1.NetInterface.HoldTime.HoldConfig hold_config = 1;
  if (this->_internal_has_hold_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::hold_config(this), target, stream);
  }

  // .opi_api.network.v1alpha1.NetInterface.HoldTime.HoldState hold_state = 2;
  if (this->_internal_has_hold_state()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::hold_state(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.v1alpha1.NetInterface.HoldTime)
  return target;
}

size_t NetInterface_HoldTime::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.v1alpha1.NetInterface.HoldTime)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .opi_api.network.v1alpha1.NetInterface.HoldTime.HoldConfig hold_config = 1;
  if (this->_internal_has_hold_config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *hold_config_);
  }

  // .opi_api.network.v1alpha1.NetInterface.HoldTime.HoldState hold_state = 2;
  if (this->_internal_has_hold_state()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *hold_state_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NetInterface_HoldTime::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NetInterface_HoldTime::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NetInterface_HoldTime::GetClassData() const { return &_class_data_; }

void NetInterface_HoldTime::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<NetInterface_HoldTime *>(to)->MergeFrom(
      static_cast<const NetInterface_HoldTime &>(from));
}


void NetInterface_HoldTime::MergeFrom(const NetInterface_HoldTime& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.v1alpha1.NetInterface.HoldTime)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_hold_config()) {
    _internal_mutable_hold_config()->::opi_api::network::v1alpha1::NetInterface_HoldTime_HoldConfig::MergeFrom(from._internal_hold_config());
  }
  if (from._internal_has_hold_state()) {
    _internal_mutable_hold_state()->::opi_api::network::v1alpha1::NetInterface_HoldTime_HoldState::MergeFrom(from._internal_hold_state());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NetInterface_HoldTime::CopyFrom(const NetInterface_HoldTime& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.v1alpha1.NetInterface.HoldTime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetInterface_HoldTime::IsInitialized() const {
  return true;
}

void NetInterface_HoldTime::InternalSwap(NetInterface_HoldTime* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NetInterface_HoldTime, hold_state_)
      + sizeof(NetInterface_HoldTime::hold_state_)
      - PROTOBUF_FIELD_OFFSET(NetInterface_HoldTime, hold_config_)>(
          reinterpret_cast<char*>(&hold_config_),
          reinterpret_cast<char*>(&other->hold_config_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NetInterface_HoldTime::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_openconfig_5finterfaces_2eproto_getter, &descriptor_table_openconfig_5finterfaces_2eproto_once,
      file_level_metadata_openconfig_5finterfaces_2eproto[5]);
}

// ===================================================================

class NetInterface_Subinterfaces_Subinterface_SubifConfig::_Internal {
 public:
};

NetInterface_Subinterfaces_Subinterface_SubifConfig::NetInterface_Subinterfaces_Subinterface_SubifConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.network.v1alpha1.NetInterface.Subinterfaces.Subinterface.SubifConfig)
}
NetInterface_Subinterfaces_Subinterface_SubifConfig::NetInterface_Subinterfaces_Subinterface_SubifConfig(const NetInterface_Subinterfaces_Subinterface_SubifConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_description(), 
      GetArenaForAllocation());
  }
  ::memcpy(&index_, &from.index_,
    static_cast<size_t>(reinterpret_cast<char*>(&enabled_) -
    reinterpret_cast<char*>(&index_)) + sizeof(enabled_));
  // @@protoc_insertion_point(copy_constructor:opi_api.network.v1alpha1.NetInterface.Subinterfaces.Subinterface.SubifConfig)
}

inline void NetInterface_Subinterfaces_Subinterface_SubifConfig::SharedCtor() {
description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&index_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&enabled_) -
    reinterpret_cast<char*>(&index_)) + sizeof(enabled_));
}

NetInterface_Subinterfaces_Subinterface_SubifConfig::~NetInterface_Subinterfaces_Subinterface_SubifConfig() {
  // @@protoc_insertion_point(destructor:opi_api.network.v1alpha1.NetInterface.Subinterfaces.Subinterface.SubifConfig)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void NetInterface_Subinterfaces_Subinterface_SubifConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void NetInterface_Subinterfaces_Subinterface_SubifConfig::ArenaDtor(void* object) {
  NetInterface_Subinterfaces_Subinterface_SubifConfig* _this = reinterpret_cast< NetInterface_Subinterfaces_Subinterface_SubifConfig* >(object);
  (void)_this;
}
void NetInterface_Subinterfaces_Subinterface_SubifConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NetInterface_Subinterfaces_Subinterface_SubifConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NetInterface_Subinterfaces_Subinterface_SubifConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.v1alpha1.NetInterface.Subinterfaces.Subinterface.SubifConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  description_.ClearToEmpty();
  ::memset(&index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&enabled_) -
      reinterpret_cast<char*>(&index_)) + sizeof(enabled_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NetInterface_Subinterfaces_Subinterface_SubifConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string description = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "opi_api.network.v1alpha1.NetInterface.Subinterfaces.Subinterface.SubifConfig.description"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool enabled = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NetInterface_Subinterfaces_Subinterface_SubifConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.v1alpha1.NetInterface.Subinterfaces.Subinterface.SubifConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 index = 1;
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_index(), target);
  }

  // string description = 2;
  if (!this->_internal_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.network.v1alpha1.NetInterface.Subinterfaces.Subinterface.SubifConfig.description");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_description(), target);
  }

  // bool enabled = 3;
  if (this->_internal_enabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_enabled(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.v1alpha1.NetInterface.Subinterfaces.Subinterface.SubifConfig)
  return target;
}

size_t NetInterface_Subinterfaces_Subinterface_SubifConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.v1alpha1.NetInterface.Subinterfaces.Subinterface.SubifConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string description = 2;
  if (!this->_internal_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // uint64 index = 1;
  if (this->_internal_index() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_index());
  }

  // bool enabled = 3;
  if (this->_internal_enabled() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NetInterface_Subinterfaces_Subinterface_SubifConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NetInterface_Subinterfaces_Subinterface_SubifConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NetInterface_Subinterfaces_Subinterface_SubifConfig::GetClassData() const { return &_class_data_; }

void NetInterface_Subinterfaces_Subinterface_SubifConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<NetInterface_Subinterfaces_Subinterface_SubifConfig *>(to)->MergeFrom(
      static_cast<const NetInterface_Subinterfaces_Subinterface_SubifConfig &>(from));
}


void NetInterface_Subinterfaces_Subinterface_SubifConfig::MergeFrom(const NetInterface_Subinterfaces_Subinterface_SubifConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.v1alpha1.NetInterface.Subinterfaces.Subinterface.SubifConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_description().empty()) {
    _internal_set_description(from._internal_description());
  }
  if (from._internal_index() != 0) {
    _internal_set_index(from._internal_index());
  }
  if (from._internal_enabled() != 0) {
    _internal_set_enabled(from._internal_enabled());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NetInterface_Subinterfaces_Subinterface_SubifConfig::CopyFrom(const NetInterface_Subinterfaces_Subinterface_SubifConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.v1alpha1.NetInterface.Subinterfaces.Subinterface.SubifConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetInterface_Subinterfaces_Subinterface_SubifConfig::IsInitialized() const {
  return true;
}

void NetInterface_Subinterfaces_Subinterface_SubifConfig::InternalSwap(NetInterface_Subinterfaces_Subinterface_SubifConfig* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &description_, lhs_arena,
      &other->description_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NetInterface_Subinterfaces_Subinterface_SubifConfig, enabled_)
      + sizeof(NetInterface_Subinterfaces_Subinterface_SubifConfig::enabled_)
      - PROTOBUF_FIELD_OFFSET(NetInterface_Subinterfaces_Subinterface_SubifConfig, index_)>(
          reinterpret_cast<char*>(&index_),
          reinterpret_cast<char*>(&other->index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NetInterface_Subinterfaces_Subinterface_SubifConfig::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_openconfig_5finterfaces_2eproto_getter, &descriptor_table_openconfig_5finterfaces_2eproto_once,
      file_level_metadata_openconfig_5finterfaces_2eproto[6]);
}

// ===================================================================

class NetInterface_Subinterfaces_Subinterface::_Internal {
 public:
  static const ::opi_api::network::v1alpha1::NetInterface_Subinterfaces_Subinterface_SubifConfig& subif_config(const NetInterface_Subinterfaces_Subinterface* msg);
  static const ::opi_api::network::v1alpha1::State& state(const NetInterface_Subinterfaces_Subinterface* msg);
  static const ::opi_api::network::v1alpha1::VlanIf& vlan(const NetInterface_Subinterfaces_Subinterface* msg);
};

const ::opi_api::network::v1alpha1::NetInterface_Subinterfaces_Subinterface_SubifConfig&
NetInterface_Subinterfaces_Subinterface::_Internal::subif_config(const NetInterface_Subinterfaces_Subinterface* msg) {
  return *msg->subif_config_;
}
const ::opi_api::network::v1alpha1::State&
NetInterface_Subinterfaces_Subinterface::_Internal::state(const NetInterface_Subinterfaces_Subinterface* msg) {
  return *msg->state_;
}
const ::opi_api::network::v1alpha1::VlanIf&
NetInterface_Subinterfaces_Subinterface::_Internal::vlan(const NetInterface_Subinterfaces_Subinterface* msg) {
  return *msg->vlan_;
}
void NetInterface_Subinterfaces_Subinterface::clear_vlan() {
  if (GetArenaForAllocation() == nullptr && vlan_ != nullptr) {
    delete vlan_;
  }
  vlan_ = nullptr;
}
NetInterface_Subinterfaces_Subinterface::NetInterface_Subinterfaces_Subinterface(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.network.v1alpha1.NetInterface.Subinterfaces.Subinterface)
}
NetInterface_Subinterfaces_Subinterface::NetInterface_Subinterfaces_Subinterface(const NetInterface_Subinterfaces_Subinterface& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_subif_config()) {
    subif_config_ = new ::opi_api::network::v1alpha1::NetInterface_Subinterfaces_Subinterface_SubifConfig(*from.subif_config_);
  } else {
    subif_config_ = nullptr;
  }
  if (from._internal_has_state()) {
    state_ = new ::opi_api::network::v1alpha1::State(*from.state_);
  } else {
    state_ = nullptr;
  }
  if (from._internal_has_vlan()) {
    vlan_ = new ::opi_api::network::v1alpha1::VlanIf(*from.vlan_);
  } else {
    vlan_ = nullptr;
  }
  index_ = from.index_;
  // @@protoc_insertion_point(copy_constructor:opi_api.network.v1alpha1.NetInterface.Subinterfaces.Subinterface)
}

inline void NetInterface_Subinterfaces_Subinterface::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&subif_config_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&index_) -
    reinterpret_cast<char*>(&subif_config_)) + sizeof(index_));
}

NetInterface_Subinterfaces_Subinterface::~NetInterface_Subinterfaces_Subinterface() {
  // @@protoc_insertion_point(destructor:opi_api.network.v1alpha1.NetInterface.Subinterfaces.Subinterface)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void NetInterface_Subinterfaces_Subinterface::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete subif_config_;
  if (this != internal_default_instance()) delete state_;
  if (this != internal_default_instance()) delete vlan_;
}

void NetInterface_Subinterfaces_Subinterface::ArenaDtor(void* object) {
  NetInterface_Subinterfaces_Subinterface* _this = reinterpret_cast< NetInterface_Subinterfaces_Subinterface* >(object);
  (void)_this;
}
void NetInterface_Subinterfaces_Subinterface::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NetInterface_Subinterfaces_Subinterface::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NetInterface_Subinterfaces_Subinterface::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.v1alpha1.NetInterface.Subinterfaces.Subinterface)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && subif_config_ != nullptr) {
    delete subif_config_;
  }
  subif_config_ = nullptr;
  if (GetArenaForAllocation() == nullptr && state_ != nullptr) {
    delete state_;
  }
  state_ = nullptr;
  if (GetArenaForAllocation() == nullptr && vlan_ != nullptr) {
    delete vlan_;
  }
  vlan_ = nullptr;
  index_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NetInterface_Subinterfaces_Subinterface::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.v1alpha1.NetInterface.Subinterfaces.Subinterface.SubifConfig subif_config = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_subif_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.v1alpha1.State state = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_state(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.v1alpha1.VlanIf vlan = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_vlan(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NetInterface_Subinterfaces_Subinterface::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.v1alpha1.NetInterface.Subinterfaces.Subinterface)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 index = 1;
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_index(), target);
  }

  // .opi_api.network.v1alpha1.NetInterface.Subinterfaces.Subinterface.SubifConfig subif_config = 2;
  if (this->_internal_has_subif_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::subif_config(this), target, stream);
  }

  // .opi_api.network.v1alpha1.State state = 3;
  if (this->_internal_has_state()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::state(this), target, stream);
  }

  // .opi_api.network.v1alpha1.VlanIf vlan = 4;
  if (this->_internal_has_vlan()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::vlan(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.v1alpha1.NetInterface.Subinterfaces.Subinterface)
  return target;
}

size_t NetInterface_Subinterfaces_Subinterface::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.v1alpha1.NetInterface.Subinterfaces.Subinterface)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .opi_api.network.v1alpha1.NetInterface.Subinterfaces.Subinterface.SubifConfig subif_config = 2;
  if (this->_internal_has_subif_config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *subif_config_);
  }

  // .opi_api.network.v1alpha1.State state = 3;
  if (this->_internal_has_state()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *state_);
  }

  // .opi_api.network.v1alpha1.VlanIf vlan = 4;
  if (this->_internal_has_vlan()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *vlan_);
  }

  // int64 index = 1;
  if (this->_internal_index() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NetInterface_Subinterfaces_Subinterface::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NetInterface_Subinterfaces_Subinterface::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NetInterface_Subinterfaces_Subinterface::GetClassData() const { return &_class_data_; }

void NetInterface_Subinterfaces_Subinterface::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<NetInterface_Subinterfaces_Subinterface *>(to)->MergeFrom(
      static_cast<const NetInterface_Subinterfaces_Subinterface &>(from));
}


void NetInterface_Subinterfaces_Subinterface::MergeFrom(const NetInterface_Subinterfaces_Subinterface& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.v1alpha1.NetInterface.Subinterfaces.Subinterface)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_subif_config()) {
    _internal_mutable_subif_config()->::opi_api::network::v1alpha1::NetInterface_Subinterfaces_Subinterface_SubifConfig::MergeFrom(from._internal_subif_config());
  }
  if (from._internal_has_state()) {
    _internal_mutable_state()->::opi_api::network::v1alpha1::State::MergeFrom(from._internal_state());
  }
  if (from._internal_has_vlan()) {
    _internal_mutable_vlan()->::opi_api::network::v1alpha1::VlanIf::MergeFrom(from._internal_vlan());
  }
  if (from._internal_index() != 0) {
    _internal_set_index(from._internal_index());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NetInterface_Subinterfaces_Subinterface::CopyFrom(const NetInterface_Subinterfaces_Subinterface& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.v1alpha1.NetInterface.Subinterfaces.Subinterface)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetInterface_Subinterfaces_Subinterface::IsInitialized() const {
  return true;
}

void NetInterface_Subinterfaces_Subinterface::InternalSwap(NetInterface_Subinterfaces_Subinterface* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NetInterface_Subinterfaces_Subinterface, index_)
      + sizeof(NetInterface_Subinterfaces_Subinterface::index_)
      - PROTOBUF_FIELD_OFFSET(NetInterface_Subinterfaces_Subinterface, subif_config_)>(
          reinterpret_cast<char*>(&subif_config_),
          reinterpret_cast<char*>(&other->subif_config_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NetInterface_Subinterfaces_Subinterface::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_openconfig_5finterfaces_2eproto_getter, &descriptor_table_openconfig_5finterfaces_2eproto_once,
      file_level_metadata_openconfig_5finterfaces_2eproto[7]);
}

// ===================================================================

class NetInterface_Subinterfaces::_Internal {
 public:
};

NetInterface_Subinterfaces::NetInterface_Subinterfaces(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  subinterface_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.network.v1alpha1.NetInterface.Subinterfaces)
}
NetInterface_Subinterfaces::NetInterface_Subinterfaces(const NetInterface_Subinterfaces& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      subinterface_(from.subinterface_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:opi_api.network.v1alpha1.NetInterface.Subinterfaces)
}

inline void NetInterface_Subinterfaces::SharedCtor() {
}

NetInterface_Subinterfaces::~NetInterface_Subinterfaces() {
  // @@protoc_insertion_point(destructor:opi_api.network.v1alpha1.NetInterface.Subinterfaces)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void NetInterface_Subinterfaces::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void NetInterface_Subinterfaces::ArenaDtor(void* object) {
  NetInterface_Subinterfaces* _this = reinterpret_cast< NetInterface_Subinterfaces* >(object);
  (void)_this;
}
void NetInterface_Subinterfaces::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NetInterface_Subinterfaces::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NetInterface_Subinterfaces::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.v1alpha1.NetInterface.Subinterfaces)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  subinterface_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NetInterface_Subinterfaces::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .opi_api.network.v1alpha1.NetInterface.Subinterfaces.Subinterface subinterface = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_subinterface(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NetInterface_Subinterfaces::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.v1alpha1.NetInterface.Subinterfaces)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .opi_api.network.v1alpha1.NetInterface.Subinterfaces.Subinterface subinterface = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_subinterface_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_subinterface(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.v1alpha1.NetInterface.Subinterfaces)
  return target;
}

size_t NetInterface_Subinterfaces::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.v1alpha1.NetInterface.Subinterfaces)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .opi_api.network.v1alpha1.NetInterface.Subinterfaces.Subinterface subinterface = 2;
  total_size += 1UL * this->_internal_subinterface_size();
  for (const auto& msg : this->subinterface_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NetInterface_Subinterfaces::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NetInterface_Subinterfaces::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NetInterface_Subinterfaces::GetClassData() const { return &_class_data_; }

void NetInterface_Subinterfaces::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<NetInterface_Subinterfaces *>(to)->MergeFrom(
      static_cast<const NetInterface_Subinterfaces &>(from));
}


void NetInterface_Subinterfaces::MergeFrom(const NetInterface_Subinterfaces& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.v1alpha1.NetInterface.Subinterfaces)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  subinterface_.MergeFrom(from.subinterface_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NetInterface_Subinterfaces::CopyFrom(const NetInterface_Subinterfaces& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.v1alpha1.NetInterface.Subinterfaces)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetInterface_Subinterfaces::IsInitialized() const {
  return true;
}

void NetInterface_Subinterfaces::InternalSwap(NetInterface_Subinterfaces* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  subinterface_.InternalSwap(&other->subinterface_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NetInterface_Subinterfaces::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_openconfig_5finterfaces_2eproto_getter, &descriptor_table_openconfig_5finterfaces_2eproto_once,
      file_level_metadata_openconfig_5finterfaces_2eproto[8]);
}

// ===================================================================

class NetInterface::_Internal {
 public:
  static const ::opi_api::network::v1alpha1::Config& config(const NetInterface* msg);
  static const ::opi_api::network::v1alpha1::State& state(const NetInterface* msg);
  static const ::opi_api::network::v1alpha1::NetInterface_HoldTime& holdtime(const NetInterface* msg);
  static const ::opi_api::network::v1alpha1::NetInterface_Subinterfaces& subinterfaces(const NetInterface* msg);
  static const ::opi_api::network::v1alpha1::EthernetIf& ethernet(const NetInterface* msg);
};

const ::opi_api::network::v1alpha1::Config&
NetInterface::_Internal::config(const NetInterface* msg) {
  return *msg->config_;
}
const ::opi_api::network::v1alpha1::State&
NetInterface::_Internal::state(const NetInterface* msg) {
  return *msg->state_;
}
const ::opi_api::network::v1alpha1::NetInterface_HoldTime&
NetInterface::_Internal::holdtime(const NetInterface* msg) {
  return *msg->holdtime_;
}
const ::opi_api::network::v1alpha1::NetInterface_Subinterfaces&
NetInterface::_Internal::subinterfaces(const NetInterface* msg) {
  return *msg->subinterfaces_;
}
const ::opi_api::network::v1alpha1::EthernetIf&
NetInterface::_Internal::ethernet(const NetInterface* msg) {
  return *msg->ethernet_;
}
void NetInterface::clear_ethernet() {
  if (GetArenaForAllocation() == nullptr && ethernet_ != nullptr) {
    delete ethernet_;
  }
  ethernet_ = nullptr;
}
NetInterface::NetInterface(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.network.v1alpha1.NetInterface)
}
NetInterface::NetInterface(const NetInterface& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_config()) {
    config_ = new ::opi_api::network::v1alpha1::Config(*from.config_);
  } else {
    config_ = nullptr;
  }
  if (from._internal_has_state()) {
    state_ = new ::opi_api::network::v1alpha1::State(*from.state_);
  } else {
    state_ = nullptr;
  }
  if (from._internal_has_holdtime()) {
    holdtime_ = new ::opi_api::network::v1alpha1::NetInterface_HoldTime(*from.holdtime_);
  } else {
    holdtime_ = nullptr;
  }
  if (from._internal_has_subinterfaces()) {
    subinterfaces_ = new ::opi_api::network::v1alpha1::NetInterface_Subinterfaces(*from.subinterfaces_);
  } else {
    subinterfaces_ = nullptr;
  }
  if (from._internal_has_ethernet()) {
    ethernet_ = new ::opi_api::network::v1alpha1::EthernetIf(*from.ethernet_);
  } else {
    ethernet_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:opi_api.network.v1alpha1.NetInterface)
}

inline void NetInterface::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&config_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&ethernet_) -
    reinterpret_cast<char*>(&config_)) + sizeof(ethernet_));
}

NetInterface::~NetInterface() {
  // @@protoc_insertion_point(destructor:opi_api.network.v1alpha1.NetInterface)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void NetInterface::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete config_;
  if (this != internal_default_instance()) delete state_;
  if (this != internal_default_instance()) delete holdtime_;
  if (this != internal_default_instance()) delete subinterfaces_;
  if (this != internal_default_instance()) delete ethernet_;
}

void NetInterface::ArenaDtor(void* object) {
  NetInterface* _this = reinterpret_cast< NetInterface* >(object);
  (void)_this;
}
void NetInterface::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NetInterface::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NetInterface::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.v1alpha1.NetInterface)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && config_ != nullptr) {
    delete config_;
  }
  config_ = nullptr;
  if (GetArenaForAllocation() == nullptr && state_ != nullptr) {
    delete state_;
  }
  state_ = nullptr;
  if (GetArenaForAllocation() == nullptr && holdtime_ != nullptr) {
    delete holdtime_;
  }
  holdtime_ = nullptr;
  if (GetArenaForAllocation() == nullptr && subinterfaces_ != nullptr) {
    delete subinterfaces_;
  }
  subinterfaces_ = nullptr;
  if (GetArenaForAllocation() == nullptr && ethernet_ != nullptr) {
    delete ethernet_;
  }
  ethernet_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NetInterface::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "opi_api.network.v1alpha1.NetInterface.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.v1alpha1.Config config = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.v1alpha1.State state = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_state(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.v1alpha1.NetInterface.HoldTime holdtime = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_holdtime(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.v1alpha1.NetInterface.Subinterfaces subinterfaces = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_subinterfaces(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.v1alpha1.EthernetIf ethernet = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_ethernet(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NetInterface::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.v1alpha1.NetInterface)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.network.v1alpha1.NetInterface.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .opi_api.network.v1alpha1.Config config = 2;
  if (this->_internal_has_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::config(this), target, stream);
  }

  // .opi_api.network.v1alpha1.State state = 3;
  if (this->_internal_has_state()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::state(this), target, stream);
  }

  // .opi_api.network.v1alpha1.NetInterface.HoldTime holdtime = 4;
  if (this->_internal_has_holdtime()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::holdtime(this), target, stream);
  }

  // .opi_api.network.v1alpha1.NetInterface.Subinterfaces subinterfaces = 5;
  if (this->_internal_has_subinterfaces()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::subinterfaces(this), target, stream);
  }

  // .opi_api.network.v1alpha1.EthernetIf ethernet = 6;
  if (this->_internal_has_ethernet()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::ethernet(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.v1alpha1.NetInterface)
  return target;
}

size_t NetInterface::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.v1alpha1.NetInterface)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .opi_api.network.v1alpha1.Config config = 2;
  if (this->_internal_has_config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *config_);
  }

  // .opi_api.network.v1alpha1.State state = 3;
  if (this->_internal_has_state()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *state_);
  }

  // .opi_api.network.v1alpha1.NetInterface.HoldTime holdtime = 4;
  if (this->_internal_has_holdtime()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *holdtime_);
  }

  // .opi_api.network.v1alpha1.NetInterface.Subinterfaces subinterfaces = 5;
  if (this->_internal_has_subinterfaces()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *subinterfaces_);
  }

  // .opi_api.network.v1alpha1.EthernetIf ethernet = 6;
  if (this->_internal_has_ethernet()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ethernet_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NetInterface::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NetInterface::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NetInterface::GetClassData() const { return &_class_data_; }

void NetInterface::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<NetInterface *>(to)->MergeFrom(
      static_cast<const NetInterface &>(from));
}


void NetInterface::MergeFrom(const NetInterface& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.v1alpha1.NetInterface)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_has_config()) {
    _internal_mutable_config()->::opi_api::network::v1alpha1::Config::MergeFrom(from._internal_config());
  }
  if (from._internal_has_state()) {
    _internal_mutable_state()->::opi_api::network::v1alpha1::State::MergeFrom(from._internal_state());
  }
  if (from._internal_has_holdtime()) {
    _internal_mutable_holdtime()->::opi_api::network::v1alpha1::NetInterface_HoldTime::MergeFrom(from._internal_holdtime());
  }
  if (from._internal_has_subinterfaces()) {
    _internal_mutable_subinterfaces()->::opi_api::network::v1alpha1::NetInterface_Subinterfaces::MergeFrom(from._internal_subinterfaces());
  }
  if (from._internal_has_ethernet()) {
    _internal_mutable_ethernet()->::opi_api::network::v1alpha1::EthernetIf::MergeFrom(from._internal_ethernet());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NetInterface::CopyFrom(const NetInterface& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.v1alpha1.NetInterface)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetInterface::IsInitialized() const {
  return true;
}

void NetInterface::InternalSwap(NetInterface* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NetInterface, ethernet_)
      + sizeof(NetInterface::ethernet_)
      - PROTOBUF_FIELD_OFFSET(NetInterface, config_)>(
          reinterpret_cast<char*>(&config_),
          reinterpret_cast<char*>(&other->config_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NetInterface::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_openconfig_5finterfaces_2eproto_getter, &descriptor_table_openconfig_5finterfaces_2eproto_once,
      file_level_metadata_openconfig_5finterfaces_2eproto[9]);
}

// ===================================================================

class GetNetInterfaceRequest::_Internal {
 public:
};

GetNetInterfaceRequest::GetNetInterfaceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.network.v1alpha1.GetNetInterfaceRequest)
}
GetNetInterfaceRequest::GetNetInterfaceRequest(const GetNetInterfaceRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:opi_api.network.v1alpha1.GetNetInterfaceRequest)
}

inline void GetNetInterfaceRequest::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetNetInterfaceRequest::~GetNetInterfaceRequest() {
  // @@protoc_insertion_point(destructor:opi_api.network.v1alpha1.GetNetInterfaceRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetNetInterfaceRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetNetInterfaceRequest::ArenaDtor(void* object) {
  GetNetInterfaceRequest* _this = reinterpret_cast< GetNetInterfaceRequest* >(object);
  (void)_this;
}
void GetNetInterfaceRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetNetInterfaceRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetNetInterfaceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.v1alpha1.GetNetInterfaceRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetNetInterfaceRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "opi_api.network.v1alpha1.GetNetInterfaceRequest.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetNetInterfaceRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.v1alpha1.GetNetInterfaceRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.network.v1alpha1.GetNetInterfaceRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.v1alpha1.GetNetInterfaceRequest)
  return target;
}

size_t GetNetInterfaceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.v1alpha1.GetNetInterfaceRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetNetInterfaceRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetNetInterfaceRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetNetInterfaceRequest::GetClassData() const { return &_class_data_; }

void GetNetInterfaceRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetNetInterfaceRequest *>(to)->MergeFrom(
      static_cast<const GetNetInterfaceRequest &>(from));
}


void GetNetInterfaceRequest::MergeFrom(const GetNetInterfaceRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.v1alpha1.GetNetInterfaceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetNetInterfaceRequest::CopyFrom(const GetNetInterfaceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.v1alpha1.GetNetInterfaceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetNetInterfaceRequest::IsInitialized() const {
  return true;
}

void GetNetInterfaceRequest::InternalSwap(GetNetInterfaceRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetNetInterfaceRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_openconfig_5finterfaces_2eproto_getter, &descriptor_table_openconfig_5finterfaces_2eproto_once,
      file_level_metadata_openconfig_5finterfaces_2eproto[10]);
}

// ===================================================================

class ListNetInterfacesRequest::_Internal {
 public:
};

ListNetInterfacesRequest::ListNetInterfacesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.network.v1alpha1.ListNetInterfacesRequest)
}
ListNetInterfacesRequest::ListNetInterfacesRequest(const ListNetInterfacesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  parent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    parent_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_parent().empty()) {
    parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_parent(), 
      GetArenaForAllocation());
  }
  page_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    page_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_page_token().empty()) {
    page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_page_token(), 
      GetArenaForAllocation());
  }
  page_size_ = from.page_size_;
  // @@protoc_insertion_point(copy_constructor:opi_api.network.v1alpha1.ListNetInterfacesRequest)
}

inline void ListNetInterfacesRequest::SharedCtor() {
parent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  parent_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
page_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  page_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
page_size_ = 0;
}

ListNetInterfacesRequest::~ListNetInterfacesRequest() {
  // @@protoc_insertion_point(destructor:opi_api.network.v1alpha1.ListNetInterfacesRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ListNetInterfacesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  parent_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  page_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ListNetInterfacesRequest::ArenaDtor(void* object) {
  ListNetInterfacesRequest* _this = reinterpret_cast< ListNetInterfacesRequest* >(object);
  (void)_this;
}
void ListNetInterfacesRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListNetInterfacesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListNetInterfacesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.v1alpha1.ListNetInterfacesRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  parent_.ClearToEmpty();
  page_token_.ClearToEmpty();
  page_size_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListNetInterfacesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_parent();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "opi_api.network.v1alpha1.ListNetInterfacesRequest.parent"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 page_size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          page_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string page_token = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_page_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "opi_api.network.v1alpha1.ListNetInterfacesRequest.page_token"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListNetInterfacesRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.v1alpha1.ListNetInterfacesRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (!this->_internal_parent().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_parent().data(), static_cast<int>(this->_internal_parent().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.network.v1alpha1.ListNetInterfacesRequest.parent");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_parent(), target);
  }

  // int32 page_size = 2;
  if (this->_internal_page_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_page_size(), target);
  }

  // string page_token = 3;
  if (!this->_internal_page_token().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_page_token().data(), static_cast<int>(this->_internal_page_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.network.v1alpha1.ListNetInterfacesRequest.page_token");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_page_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.v1alpha1.ListNetInterfacesRequest)
  return target;
}

size_t ListNetInterfacesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.v1alpha1.ListNetInterfacesRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (!this->_internal_parent().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_parent());
  }

  // string page_token = 3;
  if (!this->_internal_page_token().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_page_token());
  }

  // int32 page_size = 2;
  if (this->_internal_page_size() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_page_size());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListNetInterfacesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ListNetInterfacesRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListNetInterfacesRequest::GetClassData() const { return &_class_data_; }

void ListNetInterfacesRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ListNetInterfacesRequest *>(to)->MergeFrom(
      static_cast<const ListNetInterfacesRequest &>(from));
}


void ListNetInterfacesRequest::MergeFrom(const ListNetInterfacesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.v1alpha1.ListNetInterfacesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_parent().empty()) {
    _internal_set_parent(from._internal_parent());
  }
  if (!from._internal_page_token().empty()) {
    _internal_set_page_token(from._internal_page_token());
  }
  if (from._internal_page_size() != 0) {
    _internal_set_page_size(from._internal_page_size());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListNetInterfacesRequest::CopyFrom(const ListNetInterfacesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.v1alpha1.ListNetInterfacesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListNetInterfacesRequest::IsInitialized() const {
  return true;
}

void ListNetInterfacesRequest::InternalSwap(ListNetInterfacesRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &parent_, lhs_arena,
      &other->parent_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &page_token_, lhs_arena,
      &other->page_token_, rhs_arena
  );
  swap(page_size_, other->page_size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListNetInterfacesRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_openconfig_5finterfaces_2eproto_getter, &descriptor_table_openconfig_5finterfaces_2eproto_once,
      file_level_metadata_openconfig_5finterfaces_2eproto[11]);
}

// ===================================================================

class ListNetInterfacesResponse::_Internal {
 public:
};

ListNetInterfacesResponse::ListNetInterfacesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  net_interfaces_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.network.v1alpha1.ListNetInterfacesResponse)
}
ListNetInterfacesResponse::ListNetInterfacesResponse(const ListNetInterfacesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      net_interfaces_(from.net_interfaces_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  next_page_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    next_page_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_next_page_token().empty()) {
    next_page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_next_page_token(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:opi_api.network.v1alpha1.ListNetInterfacesResponse)
}

inline void ListNetInterfacesResponse::SharedCtor() {
next_page_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  next_page_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ListNetInterfacesResponse::~ListNetInterfacesResponse() {
  // @@protoc_insertion_point(destructor:opi_api.network.v1alpha1.ListNetInterfacesResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ListNetInterfacesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  next_page_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ListNetInterfacesResponse::ArenaDtor(void* object) {
  ListNetInterfacesResponse* _this = reinterpret_cast< ListNetInterfacesResponse* >(object);
  (void)_this;
}
void ListNetInterfacesResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListNetInterfacesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListNetInterfacesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.v1alpha1.ListNetInterfacesResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  net_interfaces_.Clear();
  next_page_token_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListNetInterfacesResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .opi_api.network.v1alpha1.NetInterface net_interfaces = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_net_interfaces(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string next_page_token = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_next_page_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "opi_api.network.v1alpha1.ListNetInterfacesResponse.next_page_token"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListNetInterfacesResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.v1alpha1.ListNetInterfacesResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .opi_api.network.v1alpha1.NetInterface net_interfaces = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_net_interfaces_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_net_interfaces(i), target, stream);
  }

  // string next_page_token = 2;
  if (!this->_internal_next_page_token().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_next_page_token().data(), static_cast<int>(this->_internal_next_page_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.network.v1alpha1.ListNetInterfacesResponse.next_page_token");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_next_page_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.v1alpha1.ListNetInterfacesResponse)
  return target;
}

size_t ListNetInterfacesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.v1alpha1.ListNetInterfacesResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .opi_api.network.v1alpha1.NetInterface net_interfaces = 1;
  total_size += 1UL * this->_internal_net_interfaces_size();
  for (const auto& msg : this->net_interfaces_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string next_page_token = 2;
  if (!this->_internal_next_page_token().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_next_page_token());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListNetInterfacesResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ListNetInterfacesResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListNetInterfacesResponse::GetClassData() const { return &_class_data_; }

void ListNetInterfacesResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ListNetInterfacesResponse *>(to)->MergeFrom(
      static_cast<const ListNetInterfacesResponse &>(from));
}


void ListNetInterfacesResponse::MergeFrom(const ListNetInterfacesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.v1alpha1.ListNetInterfacesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  net_interfaces_.MergeFrom(from.net_interfaces_);
  if (!from._internal_next_page_token().empty()) {
    _internal_set_next_page_token(from._internal_next_page_token());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListNetInterfacesResponse::CopyFrom(const ListNetInterfacesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.v1alpha1.ListNetInterfacesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListNetInterfacesResponse::IsInitialized() const {
  return true;
}

void ListNetInterfacesResponse::InternalSwap(ListNetInterfacesResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  net_interfaces_.InternalSwap(&other->net_interfaces_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &next_page_token_, lhs_arena,
      &other->next_page_token_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ListNetInterfacesResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_openconfig_5finterfaces_2eproto_getter, &descriptor_table_openconfig_5finterfaces_2eproto_once,
      file_level_metadata_openconfig_5finterfaces_2eproto[12]);
}

// ===================================================================

class UpdateNetInterfaceRequest::_Internal {
 public:
  static const ::opi_api::network::v1alpha1::NetInterface& net_interface(const UpdateNetInterfaceRequest* msg);
  static const ::PROTOBUF_NAMESPACE_ID::FieldMask& update_mask(const UpdateNetInterfaceRequest* msg);
};

const ::opi_api::network::v1alpha1::NetInterface&
UpdateNetInterfaceRequest::_Internal::net_interface(const UpdateNetInterfaceRequest* msg) {
  return *msg->net_interface_;
}
const ::PROTOBUF_NAMESPACE_ID::FieldMask&
UpdateNetInterfaceRequest::_Internal::update_mask(const UpdateNetInterfaceRequest* msg) {
  return *msg->update_mask_;
}
void UpdateNetInterfaceRequest::clear_update_mask() {
  if (GetArenaForAllocation() == nullptr && update_mask_ != nullptr) {
    delete update_mask_;
  }
  update_mask_ = nullptr;
}
UpdateNetInterfaceRequest::UpdateNetInterfaceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.network.v1alpha1.UpdateNetInterfaceRequest)
}
UpdateNetInterfaceRequest::UpdateNetInterfaceRequest(const UpdateNetInterfaceRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_net_interface()) {
    net_interface_ = new ::opi_api::network::v1alpha1::NetInterface(*from.net_interface_);
  } else {
    net_interface_ = nullptr;
  }
  if (from._internal_has_update_mask()) {
    update_mask_ = new ::PROTOBUF_NAMESPACE_ID::FieldMask(*from.update_mask_);
  } else {
    update_mask_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:opi_api.network.v1alpha1.UpdateNetInterfaceRequest)
}

inline void UpdateNetInterfaceRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&net_interface_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&update_mask_) -
    reinterpret_cast<char*>(&net_interface_)) + sizeof(update_mask_));
}

UpdateNetInterfaceRequest::~UpdateNetInterfaceRequest() {
  // @@protoc_insertion_point(destructor:opi_api.network.v1alpha1.UpdateNetInterfaceRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UpdateNetInterfaceRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete net_interface_;
  if (this != internal_default_instance()) delete update_mask_;
}

void UpdateNetInterfaceRequest::ArenaDtor(void* object) {
  UpdateNetInterfaceRequest* _this = reinterpret_cast< UpdateNetInterfaceRequest* >(object);
  (void)_this;
}
void UpdateNetInterfaceRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateNetInterfaceRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UpdateNetInterfaceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.v1alpha1.UpdateNetInterfaceRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && net_interface_ != nullptr) {
    delete net_interface_;
  }
  net_interface_ = nullptr;
  if (GetArenaForAllocation() == nullptr && update_mask_ != nullptr) {
    delete update_mask_;
  }
  update_mask_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateNetInterfaceRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .opi_api.network.v1alpha1.NetInterface net_interface = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_net_interface(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.FieldMask update_mask = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_update_mask(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UpdateNetInterfaceRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.v1alpha1.UpdateNetInterfaceRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .opi_api.network.v1alpha1.NetInterface net_interface = 1;
  if (this->_internal_has_net_interface()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::net_interface(this), target, stream);
  }

  // .google.protobuf.FieldMask update_mask = 2;
  if (this->_internal_has_update_mask()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::update_mask(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.v1alpha1.UpdateNetInterfaceRequest)
  return target;
}

size_t UpdateNetInterfaceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.v1alpha1.UpdateNetInterfaceRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .opi_api.network.v1alpha1.NetInterface net_interface = 1;
  if (this->_internal_has_net_interface()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *net_interface_);
  }

  // .google.protobuf.FieldMask update_mask = 2;
  if (this->_internal_has_update_mask()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *update_mask_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateNetInterfaceRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UpdateNetInterfaceRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateNetInterfaceRequest::GetClassData() const { return &_class_data_; }

void UpdateNetInterfaceRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UpdateNetInterfaceRequest *>(to)->MergeFrom(
      static_cast<const UpdateNetInterfaceRequest &>(from));
}


void UpdateNetInterfaceRequest::MergeFrom(const UpdateNetInterfaceRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.v1alpha1.UpdateNetInterfaceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_net_interface()) {
    _internal_mutable_net_interface()->::opi_api::network::v1alpha1::NetInterface::MergeFrom(from._internal_net_interface());
  }
  if (from._internal_has_update_mask()) {
    _internal_mutable_update_mask()->::PROTOBUF_NAMESPACE_ID::FieldMask::MergeFrom(from._internal_update_mask());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateNetInterfaceRequest::CopyFrom(const UpdateNetInterfaceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.v1alpha1.UpdateNetInterfaceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateNetInterfaceRequest::IsInitialized() const {
  return true;
}

void UpdateNetInterfaceRequest::InternalSwap(UpdateNetInterfaceRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UpdateNetInterfaceRequest, update_mask_)
      + sizeof(UpdateNetInterfaceRequest::update_mask_)
      - PROTOBUF_FIELD_OFFSET(UpdateNetInterfaceRequest, net_interface_)>(
          reinterpret_cast<char*>(&net_interface_),
          reinterpret_cast<char*>(&other->net_interface_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateNetInterfaceRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_openconfig_5finterfaces_2eproto_getter, &descriptor_table_openconfig_5finterfaces_2eproto_once,
      file_level_metadata_openconfig_5finterfaces_2eproto[13]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1alpha1
}  // namespace network
}  // namespace opi_api
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::opi_api::network::v1alpha1::Config* Arena::CreateMaybeMessage< ::opi_api::network::v1alpha1::Config >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::v1alpha1::Config >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::v1alpha1::Counters* Arena::CreateMaybeMessage< ::opi_api::network::v1alpha1::Counters >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::v1alpha1::Counters >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::v1alpha1::State* Arena::CreateMaybeMessage< ::opi_api::network::v1alpha1::State >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::v1alpha1::State >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::v1alpha1::NetInterface_HoldTime_HoldConfig* Arena::CreateMaybeMessage< ::opi_api::network::v1alpha1::NetInterface_HoldTime_HoldConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::v1alpha1::NetInterface_HoldTime_HoldConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::v1alpha1::NetInterface_HoldTime_HoldState* Arena::CreateMaybeMessage< ::opi_api::network::v1alpha1::NetInterface_HoldTime_HoldState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::v1alpha1::NetInterface_HoldTime_HoldState >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::v1alpha1::NetInterface_HoldTime* Arena::CreateMaybeMessage< ::opi_api::network::v1alpha1::NetInterface_HoldTime >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::v1alpha1::NetInterface_HoldTime >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::v1alpha1::NetInterface_Subinterfaces_Subinterface_SubifConfig* Arena::CreateMaybeMessage< ::opi_api::network::v1alpha1::NetInterface_Subinterfaces_Subinterface_SubifConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::v1alpha1::NetInterface_Subinterfaces_Subinterface_SubifConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::v1alpha1::NetInterface_Subinterfaces_Subinterface* Arena::CreateMaybeMessage< ::opi_api::network::v1alpha1::NetInterface_Subinterfaces_Subinterface >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::v1alpha1::NetInterface_Subinterfaces_Subinterface >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::v1alpha1::NetInterface_Subinterfaces* Arena::CreateMaybeMessage< ::opi_api::network::v1alpha1::NetInterface_Subinterfaces >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::v1alpha1::NetInterface_Subinterfaces >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::v1alpha1::NetInterface* Arena::CreateMaybeMessage< ::opi_api::network::v1alpha1::NetInterface >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::v1alpha1::NetInterface >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::v1alpha1::GetNetInterfaceRequest* Arena::CreateMaybeMessage< ::opi_api::network::v1alpha1::GetNetInterfaceRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::v1alpha1::GetNetInterfaceRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::v1alpha1::ListNetInterfacesRequest* Arena::CreateMaybeMessage< ::opi_api::network::v1alpha1::ListNetInterfacesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::v1alpha1::ListNetInterfacesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::v1alpha1::ListNetInterfacesResponse* Arena::CreateMaybeMessage< ::opi_api::network::v1alpha1::ListNetInterfacesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::v1alpha1::ListNetInterfacesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::v1alpha1::UpdateNetInterfaceRequest* Arena::CreateMaybeMessage< ::opi_api::network::v1alpha1::UpdateNetInterfaceRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::v1alpha1::UpdateNetInterfaceRequest >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
