// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: openconfig_ethernet.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_openconfig_5fethernet_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_openconfig_5fethernet_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "openconfig_vlan.pb.h"
#include "google/api/field_behavior.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_openconfig_5fethernet_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_openconfig_5fethernet_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_openconfig_5fethernet_2eproto;
namespace opi_api {
namespace network {
namespace v1alpha1 {
class EthernetConfig;
struct EthernetConfigDefaultTypeInternal;
extern EthernetConfigDefaultTypeInternal _EthernetConfig_default_instance_;
class EthernetCounters;
struct EthernetCountersDefaultTypeInternal;
extern EthernetCountersDefaultTypeInternal _EthernetCounters_default_instance_;
class EthernetIf;
struct EthernetIfDefaultTypeInternal;
extern EthernetIfDefaultTypeInternal _EthernetIf_default_instance_;
class EthernetInDistribution;
struct EthernetInDistributionDefaultTypeInternal;
extern EthernetInDistributionDefaultTypeInternal _EthernetInDistribution_default_instance_;
class EthernetState;
struct EthernetStateDefaultTypeInternal;
extern EthernetStateDefaultTypeInternal _EthernetState_default_instance_;
}  // namespace v1alpha1
}  // namespace network
}  // namespace opi_api
PROTOBUF_NAMESPACE_OPEN
template<> ::opi_api::network::v1alpha1::EthernetConfig* Arena::CreateMaybeMessage<::opi_api::network::v1alpha1::EthernetConfig>(Arena*);
template<> ::opi_api::network::v1alpha1::EthernetCounters* Arena::CreateMaybeMessage<::opi_api::network::v1alpha1::EthernetCounters>(Arena*);
template<> ::opi_api::network::v1alpha1::EthernetIf* Arena::CreateMaybeMessage<::opi_api::network::v1alpha1::EthernetIf>(Arena*);
template<> ::opi_api::network::v1alpha1::EthernetInDistribution* Arena::CreateMaybeMessage<::opi_api::network::v1alpha1::EthernetInDistribution>(Arena*);
template<> ::opi_api::network::v1alpha1::EthernetState* Arena::CreateMaybeMessage<::opi_api::network::v1alpha1::EthernetState>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace opi_api {
namespace network {
namespace v1alpha1 {

enum EthDuplexMode : int {
  ETH_DUPLEX_MODE_UNSPECIFIED = 0,
  ETH_DUPLEX_MODE_FULL = 1,
  ETH_DUPLEX_MODE_HALF = 2,
  EthDuplexMode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  EthDuplexMode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool EthDuplexMode_IsValid(int value);
constexpr EthDuplexMode EthDuplexMode_MIN = ETH_DUPLEX_MODE_UNSPECIFIED;
constexpr EthDuplexMode EthDuplexMode_MAX = ETH_DUPLEX_MODE_HALF;
constexpr int EthDuplexMode_ARRAYSIZE = EthDuplexMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EthDuplexMode_descriptor();
template<typename T>
inline const std::string& EthDuplexMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EthDuplexMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EthDuplexMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EthDuplexMode_descriptor(), enum_t_value);
}
inline bool EthDuplexMode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EthDuplexMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EthDuplexMode>(
    EthDuplexMode_descriptor(), name, value);
}
enum EthPortSpeed : int {
  ETH_PORT_SPEED_UNSPECIFIED = 0,
  ETH_PORT_SPEED_10M = 1,
  ETH_PORT_SPEED_100M = 2,
  ETH_PORT_SPEED_1G = 3,
  ETH_PORT_SPEED_2500M = 4,
  ETH_PORT_SPEED_5G = 5,
  ETH_PORT_SPEED_10G = 6,
  ETH_PORT_SPEED_25G = 7,
  ETH_PORT_SPEED_40G = 8,
  ETH_PORT_SPEED_50G = 9,
  ETH_PORT_SPEED_100G = 10,
  ETH_PORT_SPEED_200G = 11,
  ETH_PORT_SPEED_400G = 12,
  ETH_PORT_SPEED_600G = 13,
  ETH_PORT_SPEED_800G = 14,
  ETH_PORT_SPEED_UNKNOWN = 15,
  EthPortSpeed_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  EthPortSpeed_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool EthPortSpeed_IsValid(int value);
constexpr EthPortSpeed EthPortSpeed_MIN = ETH_PORT_SPEED_UNSPECIFIED;
constexpr EthPortSpeed EthPortSpeed_MAX = ETH_PORT_SPEED_UNKNOWN;
constexpr int EthPortSpeed_ARRAYSIZE = EthPortSpeed_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EthPortSpeed_descriptor();
template<typename T>
inline const std::string& EthPortSpeed_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EthPortSpeed>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EthPortSpeed_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EthPortSpeed_descriptor(), enum_t_value);
}
inline bool EthPortSpeed_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EthPortSpeed* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EthPortSpeed>(
    EthPortSpeed_descriptor(), name, value);
}
enum EthFecMode : int {
  ETH_FEC_MODE_UNSPECIFIED = 0,
  ETH_FEC_MODE_FC = 1,
  ETH_FEC_MODE_RS528 = 2,
  ETH_FEC_MODE_RS544 = 3,
  ETH_FEC_MODE_RS544_2X_INTERLEAVE = 4,
  ETH_FEC_MODE_DISABLED = 5,
  EthFecMode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  EthFecMode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool EthFecMode_IsValid(int value);
constexpr EthFecMode EthFecMode_MIN = ETH_FEC_MODE_UNSPECIFIED;
constexpr EthFecMode EthFecMode_MAX = ETH_FEC_MODE_DISABLED;
constexpr int EthFecMode_ARRAYSIZE = EthFecMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EthFecMode_descriptor();
template<typename T>
inline const std::string& EthFecMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EthFecMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EthFecMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EthFecMode_descriptor(), enum_t_value);
}
inline bool EthFecMode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EthFecMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EthFecMode>(
    EthFecMode_descriptor(), name, value);
}
// ===================================================================

class EthernetConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.v1alpha1.EthernetConfig) */ {
 public:
  inline EthernetConfig() : EthernetConfig(nullptr) {}
  ~EthernetConfig() override;
  explicit constexpr EthernetConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EthernetConfig(const EthernetConfig& from);
  EthernetConfig(EthernetConfig&& from) noexcept
    : EthernetConfig() {
    *this = ::std::move(from);
  }

  inline EthernetConfig& operator=(const EthernetConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline EthernetConfig& operator=(EthernetConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EthernetConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const EthernetConfig* internal_default_instance() {
    return reinterpret_cast<const EthernetConfig*>(
               &_EthernetConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(EthernetConfig& a, EthernetConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(EthernetConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EthernetConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EthernetConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EthernetConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EthernetConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const EthernetConfig& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EthernetConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.v1alpha1.EthernetConfig";
  }
  protected:
  explicit EthernetConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMacAddressFieldNumber = 1,
    kAutoNegotiateFieldNumber = 2,
    kStandaloneLinkTrainingFieldNumber = 3,
    kEnableFlowControlFieldNumber = 6,
    kDuplexModeFieldNumber = 4,
    kPortSpeedFieldNumber = 5,
    kFecModeFieldNumber = 7,
  };
  // string mac_address = 1 [(.google.api.field_behavior) = OPTIONAL];
  void clear_mac_address();
  const std::string& mac_address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mac_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mac_address();
  PROTOBUF_NODISCARD std::string* release_mac_address();
  void set_allocated_mac_address(std::string* mac_address);
  private:
  const std::string& _internal_mac_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mac_address(const std::string& value);
  std::string* _internal_mutable_mac_address();
  public:

  // bool auto_negotiate = 2 [(.google.api.field_behavior) = OPTIONAL];
  void clear_auto_negotiate();
  bool auto_negotiate() const;
  void set_auto_negotiate(bool value);
  private:
  bool _internal_auto_negotiate() const;
  void _internal_set_auto_negotiate(bool value);
  public:

  // bool standalone_link_training = 3 [(.google.api.field_behavior) = OPTIONAL];
  void clear_standalone_link_training();
  bool standalone_link_training() const;
  void set_standalone_link_training(bool value);
  private:
  bool _internal_standalone_link_training() const;
  void _internal_set_standalone_link_training(bool value);
  public:

  // bool enable_flow_control = 6 [(.google.api.field_behavior) = OPTIONAL];
  void clear_enable_flow_control();
  bool enable_flow_control() const;
  void set_enable_flow_control(bool value);
  private:
  bool _internal_enable_flow_control() const;
  void _internal_set_enable_flow_control(bool value);
  public:

  // .opi_api.network.v1alpha1.EthDuplexMode duplex_mode = 4 [(.google.api.field_behavior) = OPTIONAL];
  void clear_duplex_mode();
  ::opi_api::network::v1alpha1::EthDuplexMode duplex_mode() const;
  void set_duplex_mode(::opi_api::network::v1alpha1::EthDuplexMode value);
  private:
  ::opi_api::network::v1alpha1::EthDuplexMode _internal_duplex_mode() const;
  void _internal_set_duplex_mode(::opi_api::network::v1alpha1::EthDuplexMode value);
  public:

  // .opi_api.network.v1alpha1.EthPortSpeed port_speed = 5 [(.google.api.field_behavior) = OPTIONAL];
  void clear_port_speed();
  ::opi_api::network::v1alpha1::EthPortSpeed port_speed() const;
  void set_port_speed(::opi_api::network::v1alpha1::EthPortSpeed value);
  private:
  ::opi_api::network::v1alpha1::EthPortSpeed _internal_port_speed() const;
  void _internal_set_port_speed(::opi_api::network::v1alpha1::EthPortSpeed value);
  public:

  // .opi_api.network.v1alpha1.EthFecMode fec_mode = 7 [(.google.api.field_behavior) = OPTIONAL];
  void clear_fec_mode();
  ::opi_api::network::v1alpha1::EthFecMode fec_mode() const;
  void set_fec_mode(::opi_api::network::v1alpha1::EthFecMode value);
  private:
  ::opi_api::network::v1alpha1::EthFecMode _internal_fec_mode() const;
  void _internal_set_fec_mode(::opi_api::network::v1alpha1::EthFecMode value);
  public:

  // @@protoc_insertion_point(class_scope:opi_api.network.v1alpha1.EthernetConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mac_address_;
  bool auto_negotiate_;
  bool standalone_link_training_;
  bool enable_flow_control_;
  int duplex_mode_;
  int port_speed_;
  int fec_mode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_openconfig_5fethernet_2eproto;
};
// -------------------------------------------------------------------

class EthernetInDistribution final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.v1alpha1.EthernetInDistribution) */ {
 public:
  inline EthernetInDistribution() : EthernetInDistribution(nullptr) {}
  ~EthernetInDistribution() override;
  explicit constexpr EthernetInDistribution(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EthernetInDistribution(const EthernetInDistribution& from);
  EthernetInDistribution(EthernetInDistribution&& from) noexcept
    : EthernetInDistribution() {
    *this = ::std::move(from);
  }

  inline EthernetInDistribution& operator=(const EthernetInDistribution& from) {
    CopyFrom(from);
    return *this;
  }
  inline EthernetInDistribution& operator=(EthernetInDistribution&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EthernetInDistribution& default_instance() {
    return *internal_default_instance();
  }
  static inline const EthernetInDistribution* internal_default_instance() {
    return reinterpret_cast<const EthernetInDistribution*>(
               &_EthernetInDistribution_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(EthernetInDistribution& a, EthernetInDistribution& b) {
    a.Swap(&b);
  }
  inline void Swap(EthernetInDistribution* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EthernetInDistribution* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EthernetInDistribution* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EthernetInDistribution>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EthernetInDistribution& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const EthernetInDistribution& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EthernetInDistribution* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.v1alpha1.EthernetInDistribution";
  }
  protected:
  explicit EthernetInDistribution(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRxFramesOctets64FieldNumber = 1,
    kRxFramesOctets65To127FieldNumber = 2,
    kRxFramesOctets128To255FieldNumber = 3,
    kRxFramesOctets256To511FieldNumber = 4,
    kRxFramesOctets512To1023FieldNumber = 5,
    kRxFramesOctets1024To1518FieldNumber = 6,
  };
  // uint64 rx_frames_octets64 = 1;
  void clear_rx_frames_octets64();
  uint64_t rx_frames_octets64() const;
  void set_rx_frames_octets64(uint64_t value);
  private:
  uint64_t _internal_rx_frames_octets64() const;
  void _internal_set_rx_frames_octets64(uint64_t value);
  public:

  // uint64 rx_frames_octets65_to127 = 2;
  void clear_rx_frames_octets65_to127();
  uint64_t rx_frames_octets65_to127() const;
  void set_rx_frames_octets65_to127(uint64_t value);
  private:
  uint64_t _internal_rx_frames_octets65_to127() const;
  void _internal_set_rx_frames_octets65_to127(uint64_t value);
  public:

  // uint64 rx_frames_octets128_to255 = 3;
  void clear_rx_frames_octets128_to255();
  uint64_t rx_frames_octets128_to255() const;
  void set_rx_frames_octets128_to255(uint64_t value);
  private:
  uint64_t _internal_rx_frames_octets128_to255() const;
  void _internal_set_rx_frames_octets128_to255(uint64_t value);
  public:

  // uint64 rx_frames_octets256_to511 = 4;
  void clear_rx_frames_octets256_to511();
  uint64_t rx_frames_octets256_to511() const;
  void set_rx_frames_octets256_to511(uint64_t value);
  private:
  uint64_t _internal_rx_frames_octets256_to511() const;
  void _internal_set_rx_frames_octets256_to511(uint64_t value);
  public:

  // uint64 rx_frames_octets512_to1023 = 5;
  void clear_rx_frames_octets512_to1023();
  uint64_t rx_frames_octets512_to1023() const;
  void set_rx_frames_octets512_to1023(uint64_t value);
  private:
  uint64_t _internal_rx_frames_octets512_to1023() const;
  void _internal_set_rx_frames_octets512_to1023(uint64_t value);
  public:

  // uint64 rx_frames_octets1024_to1518 = 6;
  void clear_rx_frames_octets1024_to1518();
  uint64_t rx_frames_octets1024_to1518() const;
  void set_rx_frames_octets1024_to1518(uint64_t value);
  private:
  uint64_t _internal_rx_frames_octets1024_to1518() const;
  void _internal_set_rx_frames_octets1024_to1518(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:opi_api.network.v1alpha1.EthernetInDistribution)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint64_t rx_frames_octets64_;
  uint64_t rx_frames_octets65_to127_;
  uint64_t rx_frames_octets128_to255_;
  uint64_t rx_frames_octets256_to511_;
  uint64_t rx_frames_octets512_to1023_;
  uint64_t rx_frames_octets1024_to1518_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_openconfig_5fethernet_2eproto;
};
// -------------------------------------------------------------------

class EthernetCounters final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.v1alpha1.EthernetCounters) */ {
 public:
  inline EthernetCounters() : EthernetCounters(nullptr) {}
  ~EthernetCounters() override;
  explicit constexpr EthernetCounters(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EthernetCounters(const EthernetCounters& from);
  EthernetCounters(EthernetCounters&& from) noexcept
    : EthernetCounters() {
    *this = ::std::move(from);
  }

  inline EthernetCounters& operator=(const EthernetCounters& from) {
    CopyFrom(from);
    return *this;
  }
  inline EthernetCounters& operator=(EthernetCounters&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EthernetCounters& default_instance() {
    return *internal_default_instance();
  }
  static inline const EthernetCounters* internal_default_instance() {
    return reinterpret_cast<const EthernetCounters*>(
               &_EthernetCounters_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(EthernetCounters& a, EthernetCounters& b) {
    a.Swap(&b);
  }
  inline void Swap(EthernetCounters* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EthernetCounters* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EthernetCounters* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EthernetCounters>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EthernetCounters& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const EthernetCounters& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EthernetCounters* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.v1alpha1.EthernetCounters";
  }
  protected:
  explicit EthernetCounters(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEthRxDistributionFieldNumber = 21,
    kRxMacControlFramesFieldNumber = 1,
    kRxMacPauseFramesFieldNumber = 2,
    kRxOversizeFramesFieldNumber = 3,
    kRxUndersizeFramesFieldNumber = 4,
    kRxJabberFramesFieldNumber = 5,
    kRxFragmentFramesFieldNumber = 6,
    kRxIeee8021QFramesFieldNumber = 7,
    kRxCrcErrorsFieldNumber = 8,
    kRxBlockErrorsFieldNumber = 9,
    kRxCarrierErrorsFieldNumber = 10,
    kRxInterruptedTxFieldNumber = 11,
    kRxLateCollisionFieldNumber = 12,
    kRxMacErrorsRxFieldNumber = 13,
    kRxSingleCollisionFieldNumber = 14,
    kRxSymbolErrorFieldNumber = 15,
    kRxMaxsizeExceededFieldNumber = 16,
    kOutMacControlFramesFieldNumber = 17,
    kOutMacPauseFramesFieldNumber = 18,
    kOutIeee8021QFramesFieldNumber = 19,
    kOutMacErrorsTxFieldNumber = 20,
  };
  // .opi_api.network.v1alpha1.EthernetInDistribution eth_rx_distribution = 21;
  bool has_eth_rx_distribution() const;
  private:
  bool _internal_has_eth_rx_distribution() const;
  public:
  void clear_eth_rx_distribution();
  const ::opi_api::network::v1alpha1::EthernetInDistribution& eth_rx_distribution() const;
  PROTOBUF_NODISCARD ::opi_api::network::v1alpha1::EthernetInDistribution* release_eth_rx_distribution();
  ::opi_api::network::v1alpha1::EthernetInDistribution* mutable_eth_rx_distribution();
  void set_allocated_eth_rx_distribution(::opi_api::network::v1alpha1::EthernetInDistribution* eth_rx_distribution);
  private:
  const ::opi_api::network::v1alpha1::EthernetInDistribution& _internal_eth_rx_distribution() const;
  ::opi_api::network::v1alpha1::EthernetInDistribution* _internal_mutable_eth_rx_distribution();
  public:
  void unsafe_arena_set_allocated_eth_rx_distribution(
      ::opi_api::network::v1alpha1::EthernetInDistribution* eth_rx_distribution);
  ::opi_api::network::v1alpha1::EthernetInDistribution* unsafe_arena_release_eth_rx_distribution();

  // uint64 rx_mac_control_frames = 1;
  void clear_rx_mac_control_frames();
  uint64_t rx_mac_control_frames() const;
  void set_rx_mac_control_frames(uint64_t value);
  private:
  uint64_t _internal_rx_mac_control_frames() const;
  void _internal_set_rx_mac_control_frames(uint64_t value);
  public:

  // uint64 rx_mac_pause_frames = 2;
  void clear_rx_mac_pause_frames();
  uint64_t rx_mac_pause_frames() const;
  void set_rx_mac_pause_frames(uint64_t value);
  private:
  uint64_t _internal_rx_mac_pause_frames() const;
  void _internal_set_rx_mac_pause_frames(uint64_t value);
  public:

  // uint64 rx_oversize_frames = 3;
  void clear_rx_oversize_frames();
  uint64_t rx_oversize_frames() const;
  void set_rx_oversize_frames(uint64_t value);
  private:
  uint64_t _internal_rx_oversize_frames() const;
  void _internal_set_rx_oversize_frames(uint64_t value);
  public:

  // uint64 rx_undersize_frames = 4;
  void clear_rx_undersize_frames();
  uint64_t rx_undersize_frames() const;
  void set_rx_undersize_frames(uint64_t value);
  private:
  uint64_t _internal_rx_undersize_frames() const;
  void _internal_set_rx_undersize_frames(uint64_t value);
  public:

  // uint64 rx_jabber_frames = 5;
  void clear_rx_jabber_frames();
  uint64_t rx_jabber_frames() const;
  void set_rx_jabber_frames(uint64_t value);
  private:
  uint64_t _internal_rx_jabber_frames() const;
  void _internal_set_rx_jabber_frames(uint64_t value);
  public:

  // uint64 rx_fragment_frames = 6;
  void clear_rx_fragment_frames();
  uint64_t rx_fragment_frames() const;
  void set_rx_fragment_frames(uint64_t value);
  private:
  uint64_t _internal_rx_fragment_frames() const;
  void _internal_set_rx_fragment_frames(uint64_t value);
  public:

  // uint64 rx_ieee8021q_frames = 7;
  void clear_rx_ieee8021q_frames();
  uint64_t rx_ieee8021q_frames() const;
  void set_rx_ieee8021q_frames(uint64_t value);
  private:
  uint64_t _internal_rx_ieee8021q_frames() const;
  void _internal_set_rx_ieee8021q_frames(uint64_t value);
  public:

  // uint64 rx_crc_errors = 8;
  void clear_rx_crc_errors();
  uint64_t rx_crc_errors() const;
  void set_rx_crc_errors(uint64_t value);
  private:
  uint64_t _internal_rx_crc_errors() const;
  void _internal_set_rx_crc_errors(uint64_t value);
  public:

  // uint64 rx_block_errors = 9;
  void clear_rx_block_errors();
  uint64_t rx_block_errors() const;
  void set_rx_block_errors(uint64_t value);
  private:
  uint64_t _internal_rx_block_errors() const;
  void _internal_set_rx_block_errors(uint64_t value);
  public:

  // uint64 rx_carrier_errors = 10;
  void clear_rx_carrier_errors();
  uint64_t rx_carrier_errors() const;
  void set_rx_carrier_errors(uint64_t value);
  private:
  uint64_t _internal_rx_carrier_errors() const;
  void _internal_set_rx_carrier_errors(uint64_t value);
  public:

  // uint64 rx_interrupted_tx = 11;
  void clear_rx_interrupted_tx();
  uint64_t rx_interrupted_tx() const;
  void set_rx_interrupted_tx(uint64_t value);
  private:
  uint64_t _internal_rx_interrupted_tx() const;
  void _internal_set_rx_interrupted_tx(uint64_t value);
  public:

  // uint64 rx_late_collision = 12;
  void clear_rx_late_collision();
  uint64_t rx_late_collision() const;
  void set_rx_late_collision(uint64_t value);
  private:
  uint64_t _internal_rx_late_collision() const;
  void _internal_set_rx_late_collision(uint64_t value);
  public:

  // uint64 rx_mac_errors_rx = 13;
  void clear_rx_mac_errors_rx();
  uint64_t rx_mac_errors_rx() const;
  void set_rx_mac_errors_rx(uint64_t value);
  private:
  uint64_t _internal_rx_mac_errors_rx() const;
  void _internal_set_rx_mac_errors_rx(uint64_t value);
  public:

  // uint64 rx_single_collision = 14;
  void clear_rx_single_collision();
  uint64_t rx_single_collision() const;
  void set_rx_single_collision(uint64_t value);
  private:
  uint64_t _internal_rx_single_collision() const;
  void _internal_set_rx_single_collision(uint64_t value);
  public:

  // uint64 rx_symbol_error = 15;
  void clear_rx_symbol_error();
  uint64_t rx_symbol_error() const;
  void set_rx_symbol_error(uint64_t value);
  private:
  uint64_t _internal_rx_symbol_error() const;
  void _internal_set_rx_symbol_error(uint64_t value);
  public:

  // uint64 rx_maxsize_exceeded = 16;
  void clear_rx_maxsize_exceeded();
  uint64_t rx_maxsize_exceeded() const;
  void set_rx_maxsize_exceeded(uint64_t value);
  private:
  uint64_t _internal_rx_maxsize_exceeded() const;
  void _internal_set_rx_maxsize_exceeded(uint64_t value);
  public:

  // uint64 out_mac_control_frames = 17;
  void clear_out_mac_control_frames();
  uint64_t out_mac_control_frames() const;
  void set_out_mac_control_frames(uint64_t value);
  private:
  uint64_t _internal_out_mac_control_frames() const;
  void _internal_set_out_mac_control_frames(uint64_t value);
  public:

  // uint64 out_mac_pause_frames = 18;
  void clear_out_mac_pause_frames();
  uint64_t out_mac_pause_frames() const;
  void set_out_mac_pause_frames(uint64_t value);
  private:
  uint64_t _internal_out_mac_pause_frames() const;
  void _internal_set_out_mac_pause_frames(uint64_t value);
  public:

  // uint64 out_ieee8021q_frames = 19;
  void clear_out_ieee8021q_frames();
  uint64_t out_ieee8021q_frames() const;
  void set_out_ieee8021q_frames(uint64_t value);
  private:
  uint64_t _internal_out_ieee8021q_frames() const;
  void _internal_set_out_ieee8021q_frames(uint64_t value);
  public:

  // uint64 out_mac_errors_tx = 20;
  void clear_out_mac_errors_tx();
  uint64_t out_mac_errors_tx() const;
  void set_out_mac_errors_tx(uint64_t value);
  private:
  uint64_t _internal_out_mac_errors_tx() const;
  void _internal_set_out_mac_errors_tx(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:opi_api.network.v1alpha1.EthernetCounters)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::opi_api::network::v1alpha1::EthernetInDistribution* eth_rx_distribution_;
  uint64_t rx_mac_control_frames_;
  uint64_t rx_mac_pause_frames_;
  uint64_t rx_oversize_frames_;
  uint64_t rx_undersize_frames_;
  uint64_t rx_jabber_frames_;
  uint64_t rx_fragment_frames_;
  uint64_t rx_ieee8021q_frames_;
  uint64_t rx_crc_errors_;
  uint64_t rx_block_errors_;
  uint64_t rx_carrier_errors_;
  uint64_t rx_interrupted_tx_;
  uint64_t rx_late_collision_;
  uint64_t rx_mac_errors_rx_;
  uint64_t rx_single_collision_;
  uint64_t rx_symbol_error_;
  uint64_t rx_maxsize_exceeded_;
  uint64_t out_mac_control_frames_;
  uint64_t out_mac_pause_frames_;
  uint64_t out_ieee8021q_frames_;
  uint64_t out_mac_errors_tx_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_openconfig_5fethernet_2eproto;
};
// -------------------------------------------------------------------

class EthernetState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.v1alpha1.EthernetState) */ {
 public:
  inline EthernetState() : EthernetState(nullptr) {}
  ~EthernetState() override;
  explicit constexpr EthernetState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EthernetState(const EthernetState& from);
  EthernetState(EthernetState&& from) noexcept
    : EthernetState() {
    *this = ::std::move(from);
  }

  inline EthernetState& operator=(const EthernetState& from) {
    CopyFrom(from);
    return *this;
  }
  inline EthernetState& operator=(EthernetState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EthernetState& default_instance() {
    return *internal_default_instance();
  }
  static inline const EthernetState* internal_default_instance() {
    return reinterpret_cast<const EthernetState*>(
               &_EthernetState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(EthernetState& a, EthernetState& b) {
    a.Swap(&b);
  }
  inline void Swap(EthernetState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EthernetState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EthernetState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EthernetState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EthernetState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const EthernetState& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EthernetState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.v1alpha1.EthernetState";
  }
  protected:
  explicit EthernetState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMacAddressFieldNumber = 1,
    kHwMacAddressFieldNumber = 8,
    kCountersFieldNumber = 11,
    kAutoNegotiateFieldNumber = 2,
    kStandaloneLinkTrainingFieldNumber = 3,
    kEnableFlowControlFieldNumber = 6,
    kDuplexModeFieldNumber = 4,
    kPortSpeedFieldNumber = 5,
    kFecModeFieldNumber = 7,
    kNegotiatedDuplexModeFieldNumber = 9,
    kNegotiatedPortSpeedFieldNumber = 10,
  };
  // string mac_address = 1;
  void clear_mac_address();
  const std::string& mac_address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mac_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mac_address();
  PROTOBUF_NODISCARD std::string* release_mac_address();
  void set_allocated_mac_address(std::string* mac_address);
  private:
  const std::string& _internal_mac_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mac_address(const std::string& value);
  std::string* _internal_mutable_mac_address();
  public:

  // string hw_mac_address = 8;
  void clear_hw_mac_address();
  const std::string& hw_mac_address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_hw_mac_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_hw_mac_address();
  PROTOBUF_NODISCARD std::string* release_hw_mac_address();
  void set_allocated_hw_mac_address(std::string* hw_mac_address);
  private:
  const std::string& _internal_hw_mac_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_hw_mac_address(const std::string& value);
  std::string* _internal_mutable_hw_mac_address();
  public:

  // .opi_api.network.v1alpha1.EthernetCounters counters = 11;
  bool has_counters() const;
  private:
  bool _internal_has_counters() const;
  public:
  void clear_counters();
  const ::opi_api::network::v1alpha1::EthernetCounters& counters() const;
  PROTOBUF_NODISCARD ::opi_api::network::v1alpha1::EthernetCounters* release_counters();
  ::opi_api::network::v1alpha1::EthernetCounters* mutable_counters();
  void set_allocated_counters(::opi_api::network::v1alpha1::EthernetCounters* counters);
  private:
  const ::opi_api::network::v1alpha1::EthernetCounters& _internal_counters() const;
  ::opi_api::network::v1alpha1::EthernetCounters* _internal_mutable_counters();
  public:
  void unsafe_arena_set_allocated_counters(
      ::opi_api::network::v1alpha1::EthernetCounters* counters);
  ::opi_api::network::v1alpha1::EthernetCounters* unsafe_arena_release_counters();

  // bool auto_negotiate = 2;
  void clear_auto_negotiate();
  bool auto_negotiate() const;
  void set_auto_negotiate(bool value);
  private:
  bool _internal_auto_negotiate() const;
  void _internal_set_auto_negotiate(bool value);
  public:

  // bool standalone_link_training = 3;
  void clear_standalone_link_training();
  bool standalone_link_training() const;
  void set_standalone_link_training(bool value);
  private:
  bool _internal_standalone_link_training() const;
  void _internal_set_standalone_link_training(bool value);
  public:

  // bool enable_flow_control = 6;
  void clear_enable_flow_control();
  bool enable_flow_control() const;
  void set_enable_flow_control(bool value);
  private:
  bool _internal_enable_flow_control() const;
  void _internal_set_enable_flow_control(bool value);
  public:

  // .opi_api.network.v1alpha1.EthDuplexMode duplex_mode = 4;
  void clear_duplex_mode();
  ::opi_api::network::v1alpha1::EthDuplexMode duplex_mode() const;
  void set_duplex_mode(::opi_api::network::v1alpha1::EthDuplexMode value);
  private:
  ::opi_api::network::v1alpha1::EthDuplexMode _internal_duplex_mode() const;
  void _internal_set_duplex_mode(::opi_api::network::v1alpha1::EthDuplexMode value);
  public:

  // .opi_api.network.v1alpha1.EthPortSpeed port_speed = 5;
  void clear_port_speed();
  ::opi_api::network::v1alpha1::EthPortSpeed port_speed() const;
  void set_port_speed(::opi_api::network::v1alpha1::EthPortSpeed value);
  private:
  ::opi_api::network::v1alpha1::EthPortSpeed _internal_port_speed() const;
  void _internal_set_port_speed(::opi_api::network::v1alpha1::EthPortSpeed value);
  public:

  // .opi_api.network.v1alpha1.EthFecMode fec_mode = 7;
  void clear_fec_mode();
  ::opi_api::network::v1alpha1::EthFecMode fec_mode() const;
  void set_fec_mode(::opi_api::network::v1alpha1::EthFecMode value);
  private:
  ::opi_api::network::v1alpha1::EthFecMode _internal_fec_mode() const;
  void _internal_set_fec_mode(::opi_api::network::v1alpha1::EthFecMode value);
  public:

  // .opi_api.network.v1alpha1.EthDuplexMode negotiated_duplex_mode = 9;
  void clear_negotiated_duplex_mode();
  ::opi_api::network::v1alpha1::EthDuplexMode negotiated_duplex_mode() const;
  void set_negotiated_duplex_mode(::opi_api::network::v1alpha1::EthDuplexMode value);
  private:
  ::opi_api::network::v1alpha1::EthDuplexMode _internal_negotiated_duplex_mode() const;
  void _internal_set_negotiated_duplex_mode(::opi_api::network::v1alpha1::EthDuplexMode value);
  public:

  // .opi_api.network.v1alpha1.EthPortSpeed negotiated_port_speed = 10;
  void clear_negotiated_port_speed();
  ::opi_api::network::v1alpha1::EthPortSpeed negotiated_port_speed() const;
  void set_negotiated_port_speed(::opi_api::network::v1alpha1::EthPortSpeed value);
  private:
  ::opi_api::network::v1alpha1::EthPortSpeed _internal_negotiated_port_speed() const;
  void _internal_set_negotiated_port_speed(::opi_api::network::v1alpha1::EthPortSpeed value);
  public:

  // @@protoc_insertion_point(class_scope:opi_api.network.v1alpha1.EthernetState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mac_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hw_mac_address_;
  ::opi_api::network::v1alpha1::EthernetCounters* counters_;
  bool auto_negotiate_;
  bool standalone_link_training_;
  bool enable_flow_control_;
  int duplex_mode_;
  int port_speed_;
  int fec_mode_;
  int negotiated_duplex_mode_;
  int negotiated_port_speed_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_openconfig_5fethernet_2eproto;
};
// -------------------------------------------------------------------

class EthernetIf final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.v1alpha1.EthernetIf) */ {
 public:
  inline EthernetIf() : EthernetIf(nullptr) {}
  ~EthernetIf() override;
  explicit constexpr EthernetIf(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EthernetIf(const EthernetIf& from);
  EthernetIf(EthernetIf&& from) noexcept
    : EthernetIf() {
    *this = ::std::move(from);
  }

  inline EthernetIf& operator=(const EthernetIf& from) {
    CopyFrom(from);
    return *this;
  }
  inline EthernetIf& operator=(EthernetIf&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EthernetIf& default_instance() {
    return *internal_default_instance();
  }
  static inline const EthernetIf* internal_default_instance() {
    return reinterpret_cast<const EthernetIf*>(
               &_EthernetIf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(EthernetIf& a, EthernetIf& b) {
    a.Swap(&b);
  }
  inline void Swap(EthernetIf* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EthernetIf* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EthernetIf* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EthernetIf>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EthernetIf& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const EthernetIf& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EthernetIf* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.v1alpha1.EthernetIf";
  }
  protected:
  explicit EthernetIf(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConfigFieldNumber = 1,
    kStateFieldNumber = 2,
    kSwitchedVlanFieldNumber = 3,
  };
  // .opi_api.network.v1alpha1.EthernetConfig config = 1;
  bool has_config() const;
  private:
  bool _internal_has_config() const;
  public:
  void clear_config();
  const ::opi_api::network::v1alpha1::EthernetConfig& config() const;
  PROTOBUF_NODISCARD ::opi_api::network::v1alpha1::EthernetConfig* release_config();
  ::opi_api::network::v1alpha1::EthernetConfig* mutable_config();
  void set_allocated_config(::opi_api::network::v1alpha1::EthernetConfig* config);
  private:
  const ::opi_api::network::v1alpha1::EthernetConfig& _internal_config() const;
  ::opi_api::network::v1alpha1::EthernetConfig* _internal_mutable_config();
  public:
  void unsafe_arena_set_allocated_config(
      ::opi_api::network::v1alpha1::EthernetConfig* config);
  ::opi_api::network::v1alpha1::EthernetConfig* unsafe_arena_release_config();

  // .opi_api.network.v1alpha1.EthernetState state = 2;
  bool has_state() const;
  private:
  bool _internal_has_state() const;
  public:
  void clear_state();
  const ::opi_api::network::v1alpha1::EthernetState& state() const;
  PROTOBUF_NODISCARD ::opi_api::network::v1alpha1::EthernetState* release_state();
  ::opi_api::network::v1alpha1::EthernetState* mutable_state();
  void set_allocated_state(::opi_api::network::v1alpha1::EthernetState* state);
  private:
  const ::opi_api::network::v1alpha1::EthernetState& _internal_state() const;
  ::opi_api::network::v1alpha1::EthernetState* _internal_mutable_state();
  public:
  void unsafe_arena_set_allocated_state(
      ::opi_api::network::v1alpha1::EthernetState* state);
  ::opi_api::network::v1alpha1::EthernetState* unsafe_arena_release_state();

  // .opi_api.network.v1alpha1.VlanSwitchedIf switched_vlan = 3;
  bool has_switched_vlan() const;
  private:
  bool _internal_has_switched_vlan() const;
  public:
  void clear_switched_vlan();
  const ::opi_api::network::v1alpha1::VlanSwitchedIf& switched_vlan() const;
  PROTOBUF_NODISCARD ::opi_api::network::v1alpha1::VlanSwitchedIf* release_switched_vlan();
  ::opi_api::network::v1alpha1::VlanSwitchedIf* mutable_switched_vlan();
  void set_allocated_switched_vlan(::opi_api::network::v1alpha1::VlanSwitchedIf* switched_vlan);
  private:
  const ::opi_api::network::v1alpha1::VlanSwitchedIf& _internal_switched_vlan() const;
  ::opi_api::network::v1alpha1::VlanSwitchedIf* _internal_mutable_switched_vlan();
  public:
  void unsafe_arena_set_allocated_switched_vlan(
      ::opi_api::network::v1alpha1::VlanSwitchedIf* switched_vlan);
  ::opi_api::network::v1alpha1::VlanSwitchedIf* unsafe_arena_release_switched_vlan();

  // @@protoc_insertion_point(class_scope:opi_api.network.v1alpha1.EthernetIf)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::opi_api::network::v1alpha1::EthernetConfig* config_;
  ::opi_api::network::v1alpha1::EthernetState* state_;
  ::opi_api::network::v1alpha1::VlanSwitchedIf* switched_vlan_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_openconfig_5fethernet_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// EthernetConfig

// string mac_address = 1 [(.google.api.field_behavior) = OPTIONAL];
inline void EthernetConfig::clear_mac_address() {
  mac_address_.ClearToEmpty();
}
inline const std::string& EthernetConfig::mac_address() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1alpha1.EthernetConfig.mac_address)
  return _internal_mac_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EthernetConfig::set_mac_address(ArgT0&& arg0, ArgT... args) {
 
 mac_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.v1alpha1.EthernetConfig.mac_address)
}
inline std::string* EthernetConfig::mutable_mac_address() {
  std::string* _s = _internal_mutable_mac_address();
  // @@protoc_insertion_point(field_mutable:opi_api.network.v1alpha1.EthernetConfig.mac_address)
  return _s;
}
inline const std::string& EthernetConfig::_internal_mac_address() const {
  return mac_address_.Get();
}
inline void EthernetConfig::_internal_set_mac_address(const std::string& value) {
  
  mac_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* EthernetConfig::_internal_mutable_mac_address() {
  
  return mac_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* EthernetConfig::release_mac_address() {
  // @@protoc_insertion_point(field_release:opi_api.network.v1alpha1.EthernetConfig.mac_address)
  return mac_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void EthernetConfig::set_allocated_mac_address(std::string* mac_address) {
  if (mac_address != nullptr) {
    
  } else {
    
  }
  mac_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mac_address,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (mac_address_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    mac_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.v1alpha1.EthernetConfig.mac_address)
}

// bool auto_negotiate = 2 [(.google.api.field_behavior) = OPTIONAL];
inline void EthernetConfig::clear_auto_negotiate() {
  auto_negotiate_ = false;
}
inline bool EthernetConfig::_internal_auto_negotiate() const {
  return auto_negotiate_;
}
inline bool EthernetConfig::auto_negotiate() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1alpha1.EthernetConfig.auto_negotiate)
  return _internal_auto_negotiate();
}
inline void EthernetConfig::_internal_set_auto_negotiate(bool value) {
  
  auto_negotiate_ = value;
}
inline void EthernetConfig::set_auto_negotiate(bool value) {
  _internal_set_auto_negotiate(value);
  // @@protoc_insertion_point(field_set:opi_api.network.v1alpha1.EthernetConfig.auto_negotiate)
}

// bool standalone_link_training = 3 [(.google.api.field_behavior) = OPTIONAL];
inline void EthernetConfig::clear_standalone_link_training() {
  standalone_link_training_ = false;
}
inline bool EthernetConfig::_internal_standalone_link_training() const {
  return standalone_link_training_;
}
inline bool EthernetConfig::standalone_link_training() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1alpha1.EthernetConfig.standalone_link_training)
  return _internal_standalone_link_training();
}
inline void EthernetConfig::_internal_set_standalone_link_training(bool value) {
  
  standalone_link_training_ = value;
}
inline void EthernetConfig::set_standalone_link_training(bool value) {
  _internal_set_standalone_link_training(value);
  // @@protoc_insertion_point(field_set:opi_api.network.v1alpha1.EthernetConfig.standalone_link_training)
}

// .opi_api.network.v1alpha1.EthDuplexMode duplex_mode = 4 [(.google.api.field_behavior) = OPTIONAL];
inline void EthernetConfig::clear_duplex_mode() {
  duplex_mode_ = 0;
}
inline ::opi_api::network::v1alpha1::EthDuplexMode EthernetConfig::_internal_duplex_mode() const {
  return static_cast< ::opi_api::network::v1alpha1::EthDuplexMode >(duplex_mode_);
}
inline ::opi_api::network::v1alpha1::EthDuplexMode EthernetConfig::duplex_mode() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1alpha1.EthernetConfig.duplex_mode)
  return _internal_duplex_mode();
}
inline void EthernetConfig::_internal_set_duplex_mode(::opi_api::network::v1alpha1::EthDuplexMode value) {
  
  duplex_mode_ = value;
}
inline void EthernetConfig::set_duplex_mode(::opi_api::network::v1alpha1::EthDuplexMode value) {
  _internal_set_duplex_mode(value);
  // @@protoc_insertion_point(field_set:opi_api.network.v1alpha1.EthernetConfig.duplex_mode)
}

// .opi_api.network.v1alpha1.EthPortSpeed port_speed = 5 [(.google.api.field_behavior) = OPTIONAL];
inline void EthernetConfig::clear_port_speed() {
  port_speed_ = 0;
}
inline ::opi_api::network::v1alpha1::EthPortSpeed EthernetConfig::_internal_port_speed() const {
  return static_cast< ::opi_api::network::v1alpha1::EthPortSpeed >(port_speed_);
}
inline ::opi_api::network::v1alpha1::EthPortSpeed EthernetConfig::port_speed() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1alpha1.EthernetConfig.port_speed)
  return _internal_port_speed();
}
inline void EthernetConfig::_internal_set_port_speed(::opi_api::network::v1alpha1::EthPortSpeed value) {
  
  port_speed_ = value;
}
inline void EthernetConfig::set_port_speed(::opi_api::network::v1alpha1::EthPortSpeed value) {
  _internal_set_port_speed(value);
  // @@protoc_insertion_point(field_set:opi_api.network.v1alpha1.EthernetConfig.port_speed)
}

// bool enable_flow_control = 6 [(.google.api.field_behavior) = OPTIONAL];
inline void EthernetConfig::clear_enable_flow_control() {
  enable_flow_control_ = false;
}
inline bool EthernetConfig::_internal_enable_flow_control() const {
  return enable_flow_control_;
}
inline bool EthernetConfig::enable_flow_control() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1alpha1.EthernetConfig.enable_flow_control)
  return _internal_enable_flow_control();
}
inline void EthernetConfig::_internal_set_enable_flow_control(bool value) {
  
  enable_flow_control_ = value;
}
inline void EthernetConfig::set_enable_flow_control(bool value) {
  _internal_set_enable_flow_control(value);
  // @@protoc_insertion_point(field_set:opi_api.network.v1alpha1.EthernetConfig.enable_flow_control)
}

// .opi_api.network.v1alpha1.EthFecMode fec_mode = 7 [(.google.api.field_behavior) = OPTIONAL];
inline void EthernetConfig::clear_fec_mode() {
  fec_mode_ = 0;
}
inline ::opi_api::network::v1alpha1::EthFecMode EthernetConfig::_internal_fec_mode() const {
  return static_cast< ::opi_api::network::v1alpha1::EthFecMode >(fec_mode_);
}
inline ::opi_api::network::v1alpha1::EthFecMode EthernetConfig::fec_mode() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1alpha1.EthernetConfig.fec_mode)
  return _internal_fec_mode();
}
inline void EthernetConfig::_internal_set_fec_mode(::opi_api::network::v1alpha1::EthFecMode value) {
  
  fec_mode_ = value;
}
inline void EthernetConfig::set_fec_mode(::opi_api::network::v1alpha1::EthFecMode value) {
  _internal_set_fec_mode(value);
  // @@protoc_insertion_point(field_set:opi_api.network.v1alpha1.EthernetConfig.fec_mode)
}

// -------------------------------------------------------------------

// EthernetInDistribution

// uint64 rx_frames_octets64 = 1;
inline void EthernetInDistribution::clear_rx_frames_octets64() {
  rx_frames_octets64_ = uint64_t{0u};
}
inline uint64_t EthernetInDistribution::_internal_rx_frames_octets64() const {
  return rx_frames_octets64_;
}
inline uint64_t EthernetInDistribution::rx_frames_octets64() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1alpha1.EthernetInDistribution.rx_frames_octets64)
  return _internal_rx_frames_octets64();
}
inline void EthernetInDistribution::_internal_set_rx_frames_octets64(uint64_t value) {
  
  rx_frames_octets64_ = value;
}
inline void EthernetInDistribution::set_rx_frames_octets64(uint64_t value) {
  _internal_set_rx_frames_octets64(value);
  // @@protoc_insertion_point(field_set:opi_api.network.v1alpha1.EthernetInDistribution.rx_frames_octets64)
}

// uint64 rx_frames_octets65_to127 = 2;
inline void EthernetInDistribution::clear_rx_frames_octets65_to127() {
  rx_frames_octets65_to127_ = uint64_t{0u};
}
inline uint64_t EthernetInDistribution::_internal_rx_frames_octets65_to127() const {
  return rx_frames_octets65_to127_;
}
inline uint64_t EthernetInDistribution::rx_frames_octets65_to127() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1alpha1.EthernetInDistribution.rx_frames_octets65_to127)
  return _internal_rx_frames_octets65_to127();
}
inline void EthernetInDistribution::_internal_set_rx_frames_octets65_to127(uint64_t value) {
  
  rx_frames_octets65_to127_ = value;
}
inline void EthernetInDistribution::set_rx_frames_octets65_to127(uint64_t value) {
  _internal_set_rx_frames_octets65_to127(value);
  // @@protoc_insertion_point(field_set:opi_api.network.v1alpha1.EthernetInDistribution.rx_frames_octets65_to127)
}

// uint64 rx_frames_octets128_to255 = 3;
inline void EthernetInDistribution::clear_rx_frames_octets128_to255() {
  rx_frames_octets128_to255_ = uint64_t{0u};
}
inline uint64_t EthernetInDistribution::_internal_rx_frames_octets128_to255() const {
  return rx_frames_octets128_to255_;
}
inline uint64_t EthernetInDistribution::rx_frames_octets128_to255() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1alpha1.EthernetInDistribution.rx_frames_octets128_to255)
  return _internal_rx_frames_octets128_to255();
}
inline void EthernetInDistribution::_internal_set_rx_frames_octets128_to255(uint64_t value) {
  
  rx_frames_octets128_to255_ = value;
}
inline void EthernetInDistribution::set_rx_frames_octets128_to255(uint64_t value) {
  _internal_set_rx_frames_octets128_to255(value);
  // @@protoc_insertion_point(field_set:opi_api.network.v1alpha1.EthernetInDistribution.rx_frames_octets128_to255)
}

// uint64 rx_frames_octets256_to511 = 4;
inline void EthernetInDistribution::clear_rx_frames_octets256_to511() {
  rx_frames_octets256_to511_ = uint64_t{0u};
}
inline uint64_t EthernetInDistribution::_internal_rx_frames_octets256_to511() const {
  return rx_frames_octets256_to511_;
}
inline uint64_t EthernetInDistribution::rx_frames_octets256_to511() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1alpha1.EthernetInDistribution.rx_frames_octets256_to511)
  return _internal_rx_frames_octets256_to511();
}
inline void EthernetInDistribution::_internal_set_rx_frames_octets256_to511(uint64_t value) {
  
  rx_frames_octets256_to511_ = value;
}
inline void EthernetInDistribution::set_rx_frames_octets256_to511(uint64_t value) {
  _internal_set_rx_frames_octets256_to511(value);
  // @@protoc_insertion_point(field_set:opi_api.network.v1alpha1.EthernetInDistribution.rx_frames_octets256_to511)
}

// uint64 rx_frames_octets512_to1023 = 5;
inline void EthernetInDistribution::clear_rx_frames_octets512_to1023() {
  rx_frames_octets512_to1023_ = uint64_t{0u};
}
inline uint64_t EthernetInDistribution::_internal_rx_frames_octets512_to1023() const {
  return rx_frames_octets512_to1023_;
}
inline uint64_t EthernetInDistribution::rx_frames_octets512_to1023() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1alpha1.EthernetInDistribution.rx_frames_octets512_to1023)
  return _internal_rx_frames_octets512_to1023();
}
inline void EthernetInDistribution::_internal_set_rx_frames_octets512_to1023(uint64_t value) {
  
  rx_frames_octets512_to1023_ = value;
}
inline void EthernetInDistribution::set_rx_frames_octets512_to1023(uint64_t value) {
  _internal_set_rx_frames_octets512_to1023(value);
  // @@protoc_insertion_point(field_set:opi_api.network.v1alpha1.EthernetInDistribution.rx_frames_octets512_to1023)
}

// uint64 rx_frames_octets1024_to1518 = 6;
inline void EthernetInDistribution::clear_rx_frames_octets1024_to1518() {
  rx_frames_octets1024_to1518_ = uint64_t{0u};
}
inline uint64_t EthernetInDistribution::_internal_rx_frames_octets1024_to1518() const {
  return rx_frames_octets1024_to1518_;
}
inline uint64_t EthernetInDistribution::rx_frames_octets1024_to1518() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1alpha1.EthernetInDistribution.rx_frames_octets1024_to1518)
  return _internal_rx_frames_octets1024_to1518();
}
inline void EthernetInDistribution::_internal_set_rx_frames_octets1024_to1518(uint64_t value) {
  
  rx_frames_octets1024_to1518_ = value;
}
inline void EthernetInDistribution::set_rx_frames_octets1024_to1518(uint64_t value) {
  _internal_set_rx_frames_octets1024_to1518(value);
  // @@protoc_insertion_point(field_set:opi_api.network.v1alpha1.EthernetInDistribution.rx_frames_octets1024_to1518)
}

// -------------------------------------------------------------------

// EthernetCounters

// uint64 rx_mac_control_frames = 1;
inline void EthernetCounters::clear_rx_mac_control_frames() {
  rx_mac_control_frames_ = uint64_t{0u};
}
inline uint64_t EthernetCounters::_internal_rx_mac_control_frames() const {
  return rx_mac_control_frames_;
}
inline uint64_t EthernetCounters::rx_mac_control_frames() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1alpha1.EthernetCounters.rx_mac_control_frames)
  return _internal_rx_mac_control_frames();
}
inline void EthernetCounters::_internal_set_rx_mac_control_frames(uint64_t value) {
  
  rx_mac_control_frames_ = value;
}
inline void EthernetCounters::set_rx_mac_control_frames(uint64_t value) {
  _internal_set_rx_mac_control_frames(value);
  // @@protoc_insertion_point(field_set:opi_api.network.v1alpha1.EthernetCounters.rx_mac_control_frames)
}

// uint64 rx_mac_pause_frames = 2;
inline void EthernetCounters::clear_rx_mac_pause_frames() {
  rx_mac_pause_frames_ = uint64_t{0u};
}
inline uint64_t EthernetCounters::_internal_rx_mac_pause_frames() const {
  return rx_mac_pause_frames_;
}
inline uint64_t EthernetCounters::rx_mac_pause_frames() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1alpha1.EthernetCounters.rx_mac_pause_frames)
  return _internal_rx_mac_pause_frames();
}
inline void EthernetCounters::_internal_set_rx_mac_pause_frames(uint64_t value) {
  
  rx_mac_pause_frames_ = value;
}
inline void EthernetCounters::set_rx_mac_pause_frames(uint64_t value) {
  _internal_set_rx_mac_pause_frames(value);
  // @@protoc_insertion_point(field_set:opi_api.network.v1alpha1.EthernetCounters.rx_mac_pause_frames)
}

// uint64 rx_oversize_frames = 3;
inline void EthernetCounters::clear_rx_oversize_frames() {
  rx_oversize_frames_ = uint64_t{0u};
}
inline uint64_t EthernetCounters::_internal_rx_oversize_frames() const {
  return rx_oversize_frames_;
}
inline uint64_t EthernetCounters::rx_oversize_frames() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1alpha1.EthernetCounters.rx_oversize_frames)
  return _internal_rx_oversize_frames();
}
inline void EthernetCounters::_internal_set_rx_oversize_frames(uint64_t value) {
  
  rx_oversize_frames_ = value;
}
inline void EthernetCounters::set_rx_oversize_frames(uint64_t value) {
  _internal_set_rx_oversize_frames(value);
  // @@protoc_insertion_point(field_set:opi_api.network.v1alpha1.EthernetCounters.rx_oversize_frames)
}

// uint64 rx_undersize_frames = 4;
inline void EthernetCounters::clear_rx_undersize_frames() {
  rx_undersize_frames_ = uint64_t{0u};
}
inline uint64_t EthernetCounters::_internal_rx_undersize_frames() const {
  return rx_undersize_frames_;
}
inline uint64_t EthernetCounters::rx_undersize_frames() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1alpha1.EthernetCounters.rx_undersize_frames)
  return _internal_rx_undersize_frames();
}
inline void EthernetCounters::_internal_set_rx_undersize_frames(uint64_t value) {
  
  rx_undersize_frames_ = value;
}
inline void EthernetCounters::set_rx_undersize_frames(uint64_t value) {
  _internal_set_rx_undersize_frames(value);
  // @@protoc_insertion_point(field_set:opi_api.network.v1alpha1.EthernetCounters.rx_undersize_frames)
}

// uint64 rx_jabber_frames = 5;
inline void EthernetCounters::clear_rx_jabber_frames() {
  rx_jabber_frames_ = uint64_t{0u};
}
inline uint64_t EthernetCounters::_internal_rx_jabber_frames() const {
  return rx_jabber_frames_;
}
inline uint64_t EthernetCounters::rx_jabber_frames() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1alpha1.EthernetCounters.rx_jabber_frames)
  return _internal_rx_jabber_frames();
}
inline void EthernetCounters::_internal_set_rx_jabber_frames(uint64_t value) {
  
  rx_jabber_frames_ = value;
}
inline void EthernetCounters::set_rx_jabber_frames(uint64_t value) {
  _internal_set_rx_jabber_frames(value);
  // @@protoc_insertion_point(field_set:opi_api.network.v1alpha1.EthernetCounters.rx_jabber_frames)
}

// uint64 rx_fragment_frames = 6;
inline void EthernetCounters::clear_rx_fragment_frames() {
  rx_fragment_frames_ = uint64_t{0u};
}
inline uint64_t EthernetCounters::_internal_rx_fragment_frames() const {
  return rx_fragment_frames_;
}
inline uint64_t EthernetCounters::rx_fragment_frames() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1alpha1.EthernetCounters.rx_fragment_frames)
  return _internal_rx_fragment_frames();
}
inline void EthernetCounters::_internal_set_rx_fragment_frames(uint64_t value) {
  
  rx_fragment_frames_ = value;
}
inline void EthernetCounters::set_rx_fragment_frames(uint64_t value) {
  _internal_set_rx_fragment_frames(value);
  // @@protoc_insertion_point(field_set:opi_api.network.v1alpha1.EthernetCounters.rx_fragment_frames)
}

// uint64 rx_ieee8021q_frames = 7;
inline void EthernetCounters::clear_rx_ieee8021q_frames() {
  rx_ieee8021q_frames_ = uint64_t{0u};
}
inline uint64_t EthernetCounters::_internal_rx_ieee8021q_frames() const {
  return rx_ieee8021q_frames_;
}
inline uint64_t EthernetCounters::rx_ieee8021q_frames() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1alpha1.EthernetCounters.rx_ieee8021q_frames)
  return _internal_rx_ieee8021q_frames();
}
inline void EthernetCounters::_internal_set_rx_ieee8021q_frames(uint64_t value) {
  
  rx_ieee8021q_frames_ = value;
}
inline void EthernetCounters::set_rx_ieee8021q_frames(uint64_t value) {
  _internal_set_rx_ieee8021q_frames(value);
  // @@protoc_insertion_point(field_set:opi_api.network.v1alpha1.EthernetCounters.rx_ieee8021q_frames)
}

// uint64 rx_crc_errors = 8;
inline void EthernetCounters::clear_rx_crc_errors() {
  rx_crc_errors_ = uint64_t{0u};
}
inline uint64_t EthernetCounters::_internal_rx_crc_errors() const {
  return rx_crc_errors_;
}
inline uint64_t EthernetCounters::rx_crc_errors() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1alpha1.EthernetCounters.rx_crc_errors)
  return _internal_rx_crc_errors();
}
inline void EthernetCounters::_internal_set_rx_crc_errors(uint64_t value) {
  
  rx_crc_errors_ = value;
}
inline void EthernetCounters::set_rx_crc_errors(uint64_t value) {
  _internal_set_rx_crc_errors(value);
  // @@protoc_insertion_point(field_set:opi_api.network.v1alpha1.EthernetCounters.rx_crc_errors)
}

// uint64 rx_block_errors = 9;
inline void EthernetCounters::clear_rx_block_errors() {
  rx_block_errors_ = uint64_t{0u};
}
inline uint64_t EthernetCounters::_internal_rx_block_errors() const {
  return rx_block_errors_;
}
inline uint64_t EthernetCounters::rx_block_errors() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1alpha1.EthernetCounters.rx_block_errors)
  return _internal_rx_block_errors();
}
inline void EthernetCounters::_internal_set_rx_block_errors(uint64_t value) {
  
  rx_block_errors_ = value;
}
inline void EthernetCounters::set_rx_block_errors(uint64_t value) {
  _internal_set_rx_block_errors(value);
  // @@protoc_insertion_point(field_set:opi_api.network.v1alpha1.EthernetCounters.rx_block_errors)
}

// uint64 rx_carrier_errors = 10;
inline void EthernetCounters::clear_rx_carrier_errors() {
  rx_carrier_errors_ = uint64_t{0u};
}
inline uint64_t EthernetCounters::_internal_rx_carrier_errors() const {
  return rx_carrier_errors_;
}
inline uint64_t EthernetCounters::rx_carrier_errors() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1alpha1.EthernetCounters.rx_carrier_errors)
  return _internal_rx_carrier_errors();
}
inline void EthernetCounters::_internal_set_rx_carrier_errors(uint64_t value) {
  
  rx_carrier_errors_ = value;
}
inline void EthernetCounters::set_rx_carrier_errors(uint64_t value) {
  _internal_set_rx_carrier_errors(value);
  // @@protoc_insertion_point(field_set:opi_api.network.v1alpha1.EthernetCounters.rx_carrier_errors)
}

// uint64 rx_interrupted_tx = 11;
inline void EthernetCounters::clear_rx_interrupted_tx() {
  rx_interrupted_tx_ = uint64_t{0u};
}
inline uint64_t EthernetCounters::_internal_rx_interrupted_tx() const {
  return rx_interrupted_tx_;
}
inline uint64_t EthernetCounters::rx_interrupted_tx() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1alpha1.EthernetCounters.rx_interrupted_tx)
  return _internal_rx_interrupted_tx();
}
inline void EthernetCounters::_internal_set_rx_interrupted_tx(uint64_t value) {
  
  rx_interrupted_tx_ = value;
}
inline void EthernetCounters::set_rx_interrupted_tx(uint64_t value) {
  _internal_set_rx_interrupted_tx(value);
  // @@protoc_insertion_point(field_set:opi_api.network.v1alpha1.EthernetCounters.rx_interrupted_tx)
}

// uint64 rx_late_collision = 12;
inline void EthernetCounters::clear_rx_late_collision() {
  rx_late_collision_ = uint64_t{0u};
}
inline uint64_t EthernetCounters::_internal_rx_late_collision() const {
  return rx_late_collision_;
}
inline uint64_t EthernetCounters::rx_late_collision() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1alpha1.EthernetCounters.rx_late_collision)
  return _internal_rx_late_collision();
}
inline void EthernetCounters::_internal_set_rx_late_collision(uint64_t value) {
  
  rx_late_collision_ = value;
}
inline void EthernetCounters::set_rx_late_collision(uint64_t value) {
  _internal_set_rx_late_collision(value);
  // @@protoc_insertion_point(field_set:opi_api.network.v1alpha1.EthernetCounters.rx_late_collision)
}

// uint64 rx_mac_errors_rx = 13;
inline void EthernetCounters::clear_rx_mac_errors_rx() {
  rx_mac_errors_rx_ = uint64_t{0u};
}
inline uint64_t EthernetCounters::_internal_rx_mac_errors_rx() const {
  return rx_mac_errors_rx_;
}
inline uint64_t EthernetCounters::rx_mac_errors_rx() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1alpha1.EthernetCounters.rx_mac_errors_rx)
  return _internal_rx_mac_errors_rx();
}
inline void EthernetCounters::_internal_set_rx_mac_errors_rx(uint64_t value) {
  
  rx_mac_errors_rx_ = value;
}
inline void EthernetCounters::set_rx_mac_errors_rx(uint64_t value) {
  _internal_set_rx_mac_errors_rx(value);
  // @@protoc_insertion_point(field_set:opi_api.network.v1alpha1.EthernetCounters.rx_mac_errors_rx)
}

// uint64 rx_single_collision = 14;
inline void EthernetCounters::clear_rx_single_collision() {
  rx_single_collision_ = uint64_t{0u};
}
inline uint64_t EthernetCounters::_internal_rx_single_collision() const {
  return rx_single_collision_;
}
inline uint64_t EthernetCounters::rx_single_collision() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1alpha1.EthernetCounters.rx_single_collision)
  return _internal_rx_single_collision();
}
inline void EthernetCounters::_internal_set_rx_single_collision(uint64_t value) {
  
  rx_single_collision_ = value;
}
inline void EthernetCounters::set_rx_single_collision(uint64_t value) {
  _internal_set_rx_single_collision(value);
  // @@protoc_insertion_point(field_set:opi_api.network.v1alpha1.EthernetCounters.rx_single_collision)
}

// uint64 rx_symbol_error = 15;
inline void EthernetCounters::clear_rx_symbol_error() {
  rx_symbol_error_ = uint64_t{0u};
}
inline uint64_t EthernetCounters::_internal_rx_symbol_error() const {
  return rx_symbol_error_;
}
inline uint64_t EthernetCounters::rx_symbol_error() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1alpha1.EthernetCounters.rx_symbol_error)
  return _internal_rx_symbol_error();
}
inline void EthernetCounters::_internal_set_rx_symbol_error(uint64_t value) {
  
  rx_symbol_error_ = value;
}
inline void EthernetCounters::set_rx_symbol_error(uint64_t value) {
  _internal_set_rx_symbol_error(value);
  // @@protoc_insertion_point(field_set:opi_api.network.v1alpha1.EthernetCounters.rx_symbol_error)
}

// uint64 rx_maxsize_exceeded = 16;
inline void EthernetCounters::clear_rx_maxsize_exceeded() {
  rx_maxsize_exceeded_ = uint64_t{0u};
}
inline uint64_t EthernetCounters::_internal_rx_maxsize_exceeded() const {
  return rx_maxsize_exceeded_;
}
inline uint64_t EthernetCounters::rx_maxsize_exceeded() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1alpha1.EthernetCounters.rx_maxsize_exceeded)
  return _internal_rx_maxsize_exceeded();
}
inline void EthernetCounters::_internal_set_rx_maxsize_exceeded(uint64_t value) {
  
  rx_maxsize_exceeded_ = value;
}
inline void EthernetCounters::set_rx_maxsize_exceeded(uint64_t value) {
  _internal_set_rx_maxsize_exceeded(value);
  // @@protoc_insertion_point(field_set:opi_api.network.v1alpha1.EthernetCounters.rx_maxsize_exceeded)
}

// uint64 out_mac_control_frames = 17;
inline void EthernetCounters::clear_out_mac_control_frames() {
  out_mac_control_frames_ = uint64_t{0u};
}
inline uint64_t EthernetCounters::_internal_out_mac_control_frames() const {
  return out_mac_control_frames_;
}
inline uint64_t EthernetCounters::out_mac_control_frames() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1alpha1.EthernetCounters.out_mac_control_frames)
  return _internal_out_mac_control_frames();
}
inline void EthernetCounters::_internal_set_out_mac_control_frames(uint64_t value) {
  
  out_mac_control_frames_ = value;
}
inline void EthernetCounters::set_out_mac_control_frames(uint64_t value) {
  _internal_set_out_mac_control_frames(value);
  // @@protoc_insertion_point(field_set:opi_api.network.v1alpha1.EthernetCounters.out_mac_control_frames)
}

// uint64 out_mac_pause_frames = 18;
inline void EthernetCounters::clear_out_mac_pause_frames() {
  out_mac_pause_frames_ = uint64_t{0u};
}
inline uint64_t EthernetCounters::_internal_out_mac_pause_frames() const {
  return out_mac_pause_frames_;
}
inline uint64_t EthernetCounters::out_mac_pause_frames() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1alpha1.EthernetCounters.out_mac_pause_frames)
  return _internal_out_mac_pause_frames();
}
inline void EthernetCounters::_internal_set_out_mac_pause_frames(uint64_t value) {
  
  out_mac_pause_frames_ = value;
}
inline void EthernetCounters::set_out_mac_pause_frames(uint64_t value) {
  _internal_set_out_mac_pause_frames(value);
  // @@protoc_insertion_point(field_set:opi_api.network.v1alpha1.EthernetCounters.out_mac_pause_frames)
}

// uint64 out_ieee8021q_frames = 19;
inline void EthernetCounters::clear_out_ieee8021q_frames() {
  out_ieee8021q_frames_ = uint64_t{0u};
}
inline uint64_t EthernetCounters::_internal_out_ieee8021q_frames() const {
  return out_ieee8021q_frames_;
}
inline uint64_t EthernetCounters::out_ieee8021q_frames() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1alpha1.EthernetCounters.out_ieee8021q_frames)
  return _internal_out_ieee8021q_frames();
}
inline void EthernetCounters::_internal_set_out_ieee8021q_frames(uint64_t value) {
  
  out_ieee8021q_frames_ = value;
}
inline void EthernetCounters::set_out_ieee8021q_frames(uint64_t value) {
  _internal_set_out_ieee8021q_frames(value);
  // @@protoc_insertion_point(field_set:opi_api.network.v1alpha1.EthernetCounters.out_ieee8021q_frames)
}

// uint64 out_mac_errors_tx = 20;
inline void EthernetCounters::clear_out_mac_errors_tx() {
  out_mac_errors_tx_ = uint64_t{0u};
}
inline uint64_t EthernetCounters::_internal_out_mac_errors_tx() const {
  return out_mac_errors_tx_;
}
inline uint64_t EthernetCounters::out_mac_errors_tx() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1alpha1.EthernetCounters.out_mac_errors_tx)
  return _internal_out_mac_errors_tx();
}
inline void EthernetCounters::_internal_set_out_mac_errors_tx(uint64_t value) {
  
  out_mac_errors_tx_ = value;
}
inline void EthernetCounters::set_out_mac_errors_tx(uint64_t value) {
  _internal_set_out_mac_errors_tx(value);
  // @@protoc_insertion_point(field_set:opi_api.network.v1alpha1.EthernetCounters.out_mac_errors_tx)
}

// .opi_api.network.v1alpha1.EthernetInDistribution eth_rx_distribution = 21;
inline bool EthernetCounters::_internal_has_eth_rx_distribution() const {
  return this != internal_default_instance() && eth_rx_distribution_ != nullptr;
}
inline bool EthernetCounters::has_eth_rx_distribution() const {
  return _internal_has_eth_rx_distribution();
}
inline void EthernetCounters::clear_eth_rx_distribution() {
  if (GetArenaForAllocation() == nullptr && eth_rx_distribution_ != nullptr) {
    delete eth_rx_distribution_;
  }
  eth_rx_distribution_ = nullptr;
}
inline const ::opi_api::network::v1alpha1::EthernetInDistribution& EthernetCounters::_internal_eth_rx_distribution() const {
  const ::opi_api::network::v1alpha1::EthernetInDistribution* p = eth_rx_distribution_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::network::v1alpha1::EthernetInDistribution&>(
      ::opi_api::network::v1alpha1::_EthernetInDistribution_default_instance_);
}
inline const ::opi_api::network::v1alpha1::EthernetInDistribution& EthernetCounters::eth_rx_distribution() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1alpha1.EthernetCounters.eth_rx_distribution)
  return _internal_eth_rx_distribution();
}
inline void EthernetCounters::unsafe_arena_set_allocated_eth_rx_distribution(
    ::opi_api::network::v1alpha1::EthernetInDistribution* eth_rx_distribution) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(eth_rx_distribution_);
  }
  eth_rx_distribution_ = eth_rx_distribution;
  if (eth_rx_distribution) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.v1alpha1.EthernetCounters.eth_rx_distribution)
}
inline ::opi_api::network::v1alpha1::EthernetInDistribution* EthernetCounters::release_eth_rx_distribution() {
  
  ::opi_api::network::v1alpha1::EthernetInDistribution* temp = eth_rx_distribution_;
  eth_rx_distribution_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::network::v1alpha1::EthernetInDistribution* EthernetCounters::unsafe_arena_release_eth_rx_distribution() {
  // @@protoc_insertion_point(field_release:opi_api.network.v1alpha1.EthernetCounters.eth_rx_distribution)
  
  ::opi_api::network::v1alpha1::EthernetInDistribution* temp = eth_rx_distribution_;
  eth_rx_distribution_ = nullptr;
  return temp;
}
inline ::opi_api::network::v1alpha1::EthernetInDistribution* EthernetCounters::_internal_mutable_eth_rx_distribution() {
  
  if (eth_rx_distribution_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::network::v1alpha1::EthernetInDistribution>(GetArenaForAllocation());
    eth_rx_distribution_ = p;
  }
  return eth_rx_distribution_;
}
inline ::opi_api::network::v1alpha1::EthernetInDistribution* EthernetCounters::mutable_eth_rx_distribution() {
  ::opi_api::network::v1alpha1::EthernetInDistribution* _msg = _internal_mutable_eth_rx_distribution();
  // @@protoc_insertion_point(field_mutable:opi_api.network.v1alpha1.EthernetCounters.eth_rx_distribution)
  return _msg;
}
inline void EthernetCounters::set_allocated_eth_rx_distribution(::opi_api::network::v1alpha1::EthernetInDistribution* eth_rx_distribution) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete eth_rx_distribution_;
  }
  if (eth_rx_distribution) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::opi_api::network::v1alpha1::EthernetInDistribution>::GetOwningArena(eth_rx_distribution);
    if (message_arena != submessage_arena) {
      eth_rx_distribution = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, eth_rx_distribution, submessage_arena);
    }
    
  } else {
    
  }
  eth_rx_distribution_ = eth_rx_distribution;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.v1alpha1.EthernetCounters.eth_rx_distribution)
}

// -------------------------------------------------------------------

// EthernetState

// string mac_address = 1;
inline void EthernetState::clear_mac_address() {
  mac_address_.ClearToEmpty();
}
inline const std::string& EthernetState::mac_address() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1alpha1.EthernetState.mac_address)
  return _internal_mac_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EthernetState::set_mac_address(ArgT0&& arg0, ArgT... args) {
 
 mac_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.v1alpha1.EthernetState.mac_address)
}
inline std::string* EthernetState::mutable_mac_address() {
  std::string* _s = _internal_mutable_mac_address();
  // @@protoc_insertion_point(field_mutable:opi_api.network.v1alpha1.EthernetState.mac_address)
  return _s;
}
inline const std::string& EthernetState::_internal_mac_address() const {
  return mac_address_.Get();
}
inline void EthernetState::_internal_set_mac_address(const std::string& value) {
  
  mac_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* EthernetState::_internal_mutable_mac_address() {
  
  return mac_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* EthernetState::release_mac_address() {
  // @@protoc_insertion_point(field_release:opi_api.network.v1alpha1.EthernetState.mac_address)
  return mac_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void EthernetState::set_allocated_mac_address(std::string* mac_address) {
  if (mac_address != nullptr) {
    
  } else {
    
  }
  mac_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mac_address,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (mac_address_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    mac_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.v1alpha1.EthernetState.mac_address)
}

// bool auto_negotiate = 2;
inline void EthernetState::clear_auto_negotiate() {
  auto_negotiate_ = false;
}
inline bool EthernetState::_internal_auto_negotiate() const {
  return auto_negotiate_;
}
inline bool EthernetState::auto_negotiate() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1alpha1.EthernetState.auto_negotiate)
  return _internal_auto_negotiate();
}
inline void EthernetState::_internal_set_auto_negotiate(bool value) {
  
  auto_negotiate_ = value;
}
inline void EthernetState::set_auto_negotiate(bool value) {
  _internal_set_auto_negotiate(value);
  // @@protoc_insertion_point(field_set:opi_api.network.v1alpha1.EthernetState.auto_negotiate)
}

// bool standalone_link_training = 3;
inline void EthernetState::clear_standalone_link_training() {
  standalone_link_training_ = false;
}
inline bool EthernetState::_internal_standalone_link_training() const {
  return standalone_link_training_;
}
inline bool EthernetState::standalone_link_training() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1alpha1.EthernetState.standalone_link_training)
  return _internal_standalone_link_training();
}
inline void EthernetState::_internal_set_standalone_link_training(bool value) {
  
  standalone_link_training_ = value;
}
inline void EthernetState::set_standalone_link_training(bool value) {
  _internal_set_standalone_link_training(value);
  // @@protoc_insertion_point(field_set:opi_api.network.v1alpha1.EthernetState.standalone_link_training)
}

// .opi_api.network.v1alpha1.EthDuplexMode duplex_mode = 4;
inline void EthernetState::clear_duplex_mode() {
  duplex_mode_ = 0;
}
inline ::opi_api::network::v1alpha1::EthDuplexMode EthernetState::_internal_duplex_mode() const {
  return static_cast< ::opi_api::network::v1alpha1::EthDuplexMode >(duplex_mode_);
}
inline ::opi_api::network::v1alpha1::EthDuplexMode EthernetState::duplex_mode() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1alpha1.EthernetState.duplex_mode)
  return _internal_duplex_mode();
}
inline void EthernetState::_internal_set_duplex_mode(::opi_api::network::v1alpha1::EthDuplexMode value) {
  
  duplex_mode_ = value;
}
inline void EthernetState::set_duplex_mode(::opi_api::network::v1alpha1::EthDuplexMode value) {
  _internal_set_duplex_mode(value);
  // @@protoc_insertion_point(field_set:opi_api.network.v1alpha1.EthernetState.duplex_mode)
}

// .opi_api.network.v1alpha1.EthPortSpeed port_speed = 5;
inline void EthernetState::clear_port_speed() {
  port_speed_ = 0;
}
inline ::opi_api::network::v1alpha1::EthPortSpeed EthernetState::_internal_port_speed() const {
  return static_cast< ::opi_api::network::v1alpha1::EthPortSpeed >(port_speed_);
}
inline ::opi_api::network::v1alpha1::EthPortSpeed EthernetState::port_speed() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1alpha1.EthernetState.port_speed)
  return _internal_port_speed();
}
inline void EthernetState::_internal_set_port_speed(::opi_api::network::v1alpha1::EthPortSpeed value) {
  
  port_speed_ = value;
}
inline void EthernetState::set_port_speed(::opi_api::network::v1alpha1::EthPortSpeed value) {
  _internal_set_port_speed(value);
  // @@protoc_insertion_point(field_set:opi_api.network.v1alpha1.EthernetState.port_speed)
}

// bool enable_flow_control = 6;
inline void EthernetState::clear_enable_flow_control() {
  enable_flow_control_ = false;
}
inline bool EthernetState::_internal_enable_flow_control() const {
  return enable_flow_control_;
}
inline bool EthernetState::enable_flow_control() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1alpha1.EthernetState.enable_flow_control)
  return _internal_enable_flow_control();
}
inline void EthernetState::_internal_set_enable_flow_control(bool value) {
  
  enable_flow_control_ = value;
}
inline void EthernetState::set_enable_flow_control(bool value) {
  _internal_set_enable_flow_control(value);
  // @@protoc_insertion_point(field_set:opi_api.network.v1alpha1.EthernetState.enable_flow_control)
}

// .opi_api.network.v1alpha1.EthFecMode fec_mode = 7;
inline void EthernetState::clear_fec_mode() {
  fec_mode_ = 0;
}
inline ::opi_api::network::v1alpha1::EthFecMode EthernetState::_internal_fec_mode() const {
  return static_cast< ::opi_api::network::v1alpha1::EthFecMode >(fec_mode_);
}
inline ::opi_api::network::v1alpha1::EthFecMode EthernetState::fec_mode() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1alpha1.EthernetState.fec_mode)
  return _internal_fec_mode();
}
inline void EthernetState::_internal_set_fec_mode(::opi_api::network::v1alpha1::EthFecMode value) {
  
  fec_mode_ = value;
}
inline void EthernetState::set_fec_mode(::opi_api::network::v1alpha1::EthFecMode value) {
  _internal_set_fec_mode(value);
  // @@protoc_insertion_point(field_set:opi_api.network.v1alpha1.EthernetState.fec_mode)
}

// string hw_mac_address = 8;
inline void EthernetState::clear_hw_mac_address() {
  hw_mac_address_.ClearToEmpty();
}
inline const std::string& EthernetState::hw_mac_address() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1alpha1.EthernetState.hw_mac_address)
  return _internal_hw_mac_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EthernetState::set_hw_mac_address(ArgT0&& arg0, ArgT... args) {
 
 hw_mac_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.v1alpha1.EthernetState.hw_mac_address)
}
inline std::string* EthernetState::mutable_hw_mac_address() {
  std::string* _s = _internal_mutable_hw_mac_address();
  // @@protoc_insertion_point(field_mutable:opi_api.network.v1alpha1.EthernetState.hw_mac_address)
  return _s;
}
inline const std::string& EthernetState::_internal_hw_mac_address() const {
  return hw_mac_address_.Get();
}
inline void EthernetState::_internal_set_hw_mac_address(const std::string& value) {
  
  hw_mac_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* EthernetState::_internal_mutable_hw_mac_address() {
  
  return hw_mac_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* EthernetState::release_hw_mac_address() {
  // @@protoc_insertion_point(field_release:opi_api.network.v1alpha1.EthernetState.hw_mac_address)
  return hw_mac_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void EthernetState::set_allocated_hw_mac_address(std::string* hw_mac_address) {
  if (hw_mac_address != nullptr) {
    
  } else {
    
  }
  hw_mac_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hw_mac_address,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (hw_mac_address_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    hw_mac_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.v1alpha1.EthernetState.hw_mac_address)
}

// .opi_api.network.v1alpha1.EthDuplexMode negotiated_duplex_mode = 9;
inline void EthernetState::clear_negotiated_duplex_mode() {
  negotiated_duplex_mode_ = 0;
}
inline ::opi_api::network::v1alpha1::EthDuplexMode EthernetState::_internal_negotiated_duplex_mode() const {
  return static_cast< ::opi_api::network::v1alpha1::EthDuplexMode >(negotiated_duplex_mode_);
}
inline ::opi_api::network::v1alpha1::EthDuplexMode EthernetState::negotiated_duplex_mode() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1alpha1.EthernetState.negotiated_duplex_mode)
  return _internal_negotiated_duplex_mode();
}
inline void EthernetState::_internal_set_negotiated_duplex_mode(::opi_api::network::v1alpha1::EthDuplexMode value) {
  
  negotiated_duplex_mode_ = value;
}
inline void EthernetState::set_negotiated_duplex_mode(::opi_api::network::v1alpha1::EthDuplexMode value) {
  _internal_set_negotiated_duplex_mode(value);
  // @@protoc_insertion_point(field_set:opi_api.network.v1alpha1.EthernetState.negotiated_duplex_mode)
}

// .opi_api.network.v1alpha1.EthPortSpeed negotiated_port_speed = 10;
inline void EthernetState::clear_negotiated_port_speed() {
  negotiated_port_speed_ = 0;
}
inline ::opi_api::network::v1alpha1::EthPortSpeed EthernetState::_internal_negotiated_port_speed() const {
  return static_cast< ::opi_api::network::v1alpha1::EthPortSpeed >(negotiated_port_speed_);
}
inline ::opi_api::network::v1alpha1::EthPortSpeed EthernetState::negotiated_port_speed() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1alpha1.EthernetState.negotiated_port_speed)
  return _internal_negotiated_port_speed();
}
inline void EthernetState::_internal_set_negotiated_port_speed(::opi_api::network::v1alpha1::EthPortSpeed value) {
  
  negotiated_port_speed_ = value;
}
inline void EthernetState::set_negotiated_port_speed(::opi_api::network::v1alpha1::EthPortSpeed value) {
  _internal_set_negotiated_port_speed(value);
  // @@protoc_insertion_point(field_set:opi_api.network.v1alpha1.EthernetState.negotiated_port_speed)
}

// .opi_api.network.v1alpha1.EthernetCounters counters = 11;
inline bool EthernetState::_internal_has_counters() const {
  return this != internal_default_instance() && counters_ != nullptr;
}
inline bool EthernetState::has_counters() const {
  return _internal_has_counters();
}
inline void EthernetState::clear_counters() {
  if (GetArenaForAllocation() == nullptr && counters_ != nullptr) {
    delete counters_;
  }
  counters_ = nullptr;
}
inline const ::opi_api::network::v1alpha1::EthernetCounters& EthernetState::_internal_counters() const {
  const ::opi_api::network::v1alpha1::EthernetCounters* p = counters_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::network::v1alpha1::EthernetCounters&>(
      ::opi_api::network::v1alpha1::_EthernetCounters_default_instance_);
}
inline const ::opi_api::network::v1alpha1::EthernetCounters& EthernetState::counters() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1alpha1.EthernetState.counters)
  return _internal_counters();
}
inline void EthernetState::unsafe_arena_set_allocated_counters(
    ::opi_api::network::v1alpha1::EthernetCounters* counters) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(counters_);
  }
  counters_ = counters;
  if (counters) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.v1alpha1.EthernetState.counters)
}
inline ::opi_api::network::v1alpha1::EthernetCounters* EthernetState::release_counters() {
  
  ::opi_api::network::v1alpha1::EthernetCounters* temp = counters_;
  counters_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::network::v1alpha1::EthernetCounters* EthernetState::unsafe_arena_release_counters() {
  // @@protoc_insertion_point(field_release:opi_api.network.v1alpha1.EthernetState.counters)
  
  ::opi_api::network::v1alpha1::EthernetCounters* temp = counters_;
  counters_ = nullptr;
  return temp;
}
inline ::opi_api::network::v1alpha1::EthernetCounters* EthernetState::_internal_mutable_counters() {
  
  if (counters_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::network::v1alpha1::EthernetCounters>(GetArenaForAllocation());
    counters_ = p;
  }
  return counters_;
}
inline ::opi_api::network::v1alpha1::EthernetCounters* EthernetState::mutable_counters() {
  ::opi_api::network::v1alpha1::EthernetCounters* _msg = _internal_mutable_counters();
  // @@protoc_insertion_point(field_mutable:opi_api.network.v1alpha1.EthernetState.counters)
  return _msg;
}
inline void EthernetState::set_allocated_counters(::opi_api::network::v1alpha1::EthernetCounters* counters) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete counters_;
  }
  if (counters) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::opi_api::network::v1alpha1::EthernetCounters>::GetOwningArena(counters);
    if (message_arena != submessage_arena) {
      counters = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, counters, submessage_arena);
    }
    
  } else {
    
  }
  counters_ = counters;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.v1alpha1.EthernetState.counters)
}

// -------------------------------------------------------------------

// EthernetIf

// .opi_api.network.v1alpha1.EthernetConfig config = 1;
inline bool EthernetIf::_internal_has_config() const {
  return this != internal_default_instance() && config_ != nullptr;
}
inline bool EthernetIf::has_config() const {
  return _internal_has_config();
}
inline void EthernetIf::clear_config() {
  if (GetArenaForAllocation() == nullptr && config_ != nullptr) {
    delete config_;
  }
  config_ = nullptr;
}
inline const ::opi_api::network::v1alpha1::EthernetConfig& EthernetIf::_internal_config() const {
  const ::opi_api::network::v1alpha1::EthernetConfig* p = config_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::network::v1alpha1::EthernetConfig&>(
      ::opi_api::network::v1alpha1::_EthernetConfig_default_instance_);
}
inline const ::opi_api::network::v1alpha1::EthernetConfig& EthernetIf::config() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1alpha1.EthernetIf.config)
  return _internal_config();
}
inline void EthernetIf::unsafe_arena_set_allocated_config(
    ::opi_api::network::v1alpha1::EthernetConfig* config) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(config_);
  }
  config_ = config;
  if (config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.v1alpha1.EthernetIf.config)
}
inline ::opi_api::network::v1alpha1::EthernetConfig* EthernetIf::release_config() {
  
  ::opi_api::network::v1alpha1::EthernetConfig* temp = config_;
  config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::network::v1alpha1::EthernetConfig* EthernetIf::unsafe_arena_release_config() {
  // @@protoc_insertion_point(field_release:opi_api.network.v1alpha1.EthernetIf.config)
  
  ::opi_api::network::v1alpha1::EthernetConfig* temp = config_;
  config_ = nullptr;
  return temp;
}
inline ::opi_api::network::v1alpha1::EthernetConfig* EthernetIf::_internal_mutable_config() {
  
  if (config_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::network::v1alpha1::EthernetConfig>(GetArenaForAllocation());
    config_ = p;
  }
  return config_;
}
inline ::opi_api::network::v1alpha1::EthernetConfig* EthernetIf::mutable_config() {
  ::opi_api::network::v1alpha1::EthernetConfig* _msg = _internal_mutable_config();
  // @@protoc_insertion_point(field_mutable:opi_api.network.v1alpha1.EthernetIf.config)
  return _msg;
}
inline void EthernetIf::set_allocated_config(::opi_api::network::v1alpha1::EthernetConfig* config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete config_;
  }
  if (config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::opi_api::network::v1alpha1::EthernetConfig>::GetOwningArena(config);
    if (message_arena != submessage_arena) {
      config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    
  } else {
    
  }
  config_ = config;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.v1alpha1.EthernetIf.config)
}

// .opi_api.network.v1alpha1.EthernetState state = 2;
inline bool EthernetIf::_internal_has_state() const {
  return this != internal_default_instance() && state_ != nullptr;
}
inline bool EthernetIf::has_state() const {
  return _internal_has_state();
}
inline void EthernetIf::clear_state() {
  if (GetArenaForAllocation() == nullptr && state_ != nullptr) {
    delete state_;
  }
  state_ = nullptr;
}
inline const ::opi_api::network::v1alpha1::EthernetState& EthernetIf::_internal_state() const {
  const ::opi_api::network::v1alpha1::EthernetState* p = state_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::network::v1alpha1::EthernetState&>(
      ::opi_api::network::v1alpha1::_EthernetState_default_instance_);
}
inline const ::opi_api::network::v1alpha1::EthernetState& EthernetIf::state() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1alpha1.EthernetIf.state)
  return _internal_state();
}
inline void EthernetIf::unsafe_arena_set_allocated_state(
    ::opi_api::network::v1alpha1::EthernetState* state) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(state_);
  }
  state_ = state;
  if (state) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.v1alpha1.EthernetIf.state)
}
inline ::opi_api::network::v1alpha1::EthernetState* EthernetIf::release_state() {
  
  ::opi_api::network::v1alpha1::EthernetState* temp = state_;
  state_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::network::v1alpha1::EthernetState* EthernetIf::unsafe_arena_release_state() {
  // @@protoc_insertion_point(field_release:opi_api.network.v1alpha1.EthernetIf.state)
  
  ::opi_api::network::v1alpha1::EthernetState* temp = state_;
  state_ = nullptr;
  return temp;
}
inline ::opi_api::network::v1alpha1::EthernetState* EthernetIf::_internal_mutable_state() {
  
  if (state_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::network::v1alpha1::EthernetState>(GetArenaForAllocation());
    state_ = p;
  }
  return state_;
}
inline ::opi_api::network::v1alpha1::EthernetState* EthernetIf::mutable_state() {
  ::opi_api::network::v1alpha1::EthernetState* _msg = _internal_mutable_state();
  // @@protoc_insertion_point(field_mutable:opi_api.network.v1alpha1.EthernetIf.state)
  return _msg;
}
inline void EthernetIf::set_allocated_state(::opi_api::network::v1alpha1::EthernetState* state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete state_;
  }
  if (state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::opi_api::network::v1alpha1::EthernetState>::GetOwningArena(state);
    if (message_arena != submessage_arena) {
      state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    
  } else {
    
  }
  state_ = state;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.v1alpha1.EthernetIf.state)
}

// .opi_api.network.v1alpha1.VlanSwitchedIf switched_vlan = 3;
inline bool EthernetIf::_internal_has_switched_vlan() const {
  return this != internal_default_instance() && switched_vlan_ != nullptr;
}
inline bool EthernetIf::has_switched_vlan() const {
  return _internal_has_switched_vlan();
}
inline const ::opi_api::network::v1alpha1::VlanSwitchedIf& EthernetIf::_internal_switched_vlan() const {
  const ::opi_api::network::v1alpha1::VlanSwitchedIf* p = switched_vlan_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::network::v1alpha1::VlanSwitchedIf&>(
      ::opi_api::network::v1alpha1::_VlanSwitchedIf_default_instance_);
}
inline const ::opi_api::network::v1alpha1::VlanSwitchedIf& EthernetIf::switched_vlan() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1alpha1.EthernetIf.switched_vlan)
  return _internal_switched_vlan();
}
inline void EthernetIf::unsafe_arena_set_allocated_switched_vlan(
    ::opi_api::network::v1alpha1::VlanSwitchedIf* switched_vlan) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(switched_vlan_);
  }
  switched_vlan_ = switched_vlan;
  if (switched_vlan) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.v1alpha1.EthernetIf.switched_vlan)
}
inline ::opi_api::network::v1alpha1::VlanSwitchedIf* EthernetIf::release_switched_vlan() {
  
  ::opi_api::network::v1alpha1::VlanSwitchedIf* temp = switched_vlan_;
  switched_vlan_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::network::v1alpha1::VlanSwitchedIf* EthernetIf::unsafe_arena_release_switched_vlan() {
  // @@protoc_insertion_point(field_release:opi_api.network.v1alpha1.EthernetIf.switched_vlan)
  
  ::opi_api::network::v1alpha1::VlanSwitchedIf* temp = switched_vlan_;
  switched_vlan_ = nullptr;
  return temp;
}
inline ::opi_api::network::v1alpha1::VlanSwitchedIf* EthernetIf::_internal_mutable_switched_vlan() {
  
  if (switched_vlan_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::network::v1alpha1::VlanSwitchedIf>(GetArenaForAllocation());
    switched_vlan_ = p;
  }
  return switched_vlan_;
}
inline ::opi_api::network::v1alpha1::VlanSwitchedIf* EthernetIf::mutable_switched_vlan() {
  ::opi_api::network::v1alpha1::VlanSwitchedIf* _msg = _internal_mutable_switched_vlan();
  // @@protoc_insertion_point(field_mutable:opi_api.network.v1alpha1.EthernetIf.switched_vlan)
  return _msg;
}
inline void EthernetIf::set_allocated_switched_vlan(::opi_api::network::v1alpha1::VlanSwitchedIf* switched_vlan) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(switched_vlan_);
  }
  if (switched_vlan) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(switched_vlan));
    if (message_arena != submessage_arena) {
      switched_vlan = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, switched_vlan, submessage_arena);
    }
    
  } else {
    
  }
  switched_vlan_ = switched_vlan;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.v1alpha1.EthernetIf.switched_vlan)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1alpha1
}  // namespace network
}  // namespace opi_api

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::opi_api::network::v1alpha1::EthDuplexMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::opi_api::network::v1alpha1::EthDuplexMode>() {
  return ::opi_api::network::v1alpha1::EthDuplexMode_descriptor();
}
template <> struct is_proto_enum< ::opi_api::network::v1alpha1::EthPortSpeed> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::opi_api::network::v1alpha1::EthPortSpeed>() {
  return ::opi_api::network::v1alpha1::EthPortSpeed_descriptor();
}
template <> struct is_proto_enum< ::opi_api::network::v1alpha1::EthFecMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::opi_api::network::v1alpha1::EthFecMode>() {
  return ::opi_api::network::v1alpha1::EthFecMode_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_openconfig_5fethernet_2eproto
