// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: openconfig_interfaces.proto

#include "openconfig_interfaces.pb.h"
#include "openconfig_interfaces.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace opi_api {
namespace network {
namespace v1alpha1 {

static const char* NetInterfaceService_method_names[] = {
  "/opi_api.network.v1alpha1.NetInterfaceService/GetNetInterface",
  "/opi_api.network.v1alpha1.NetInterfaceService/ListNetInterfaces",
  "/opi_api.network.v1alpha1.NetInterfaceService/UpdateNetInterface",
};

std::unique_ptr< NetInterfaceService::Stub> NetInterfaceService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< NetInterfaceService::Stub> stub(new NetInterfaceService::Stub(channel, options));
  return stub;
}

NetInterfaceService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_GetNetInterface_(NetInterfaceService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListNetInterfaces_(NetInterfaceService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateNetInterface_(NetInterfaceService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status NetInterfaceService::Stub::GetNetInterface(::grpc::ClientContext* context, const ::opi_api::network::v1alpha1::GetNetInterfaceRequest& request, ::opi_api::network::v1alpha1::NetInterface* response) {
  return ::grpc::internal::BlockingUnaryCall< ::opi_api::network::v1alpha1::GetNetInterfaceRequest, ::opi_api::network::v1alpha1::NetInterface, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetNetInterface_, context, request, response);
}

void NetInterfaceService::Stub::async::GetNetInterface(::grpc::ClientContext* context, const ::opi_api::network::v1alpha1::GetNetInterfaceRequest* request, ::opi_api::network::v1alpha1::NetInterface* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::opi_api::network::v1alpha1::GetNetInterfaceRequest, ::opi_api::network::v1alpha1::NetInterface, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetNetInterface_, context, request, response, std::move(f));
}

void NetInterfaceService::Stub::async::GetNetInterface(::grpc::ClientContext* context, const ::opi_api::network::v1alpha1::GetNetInterfaceRequest* request, ::opi_api::network::v1alpha1::NetInterface* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetNetInterface_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::opi_api::network::v1alpha1::NetInterface>* NetInterfaceService::Stub::PrepareAsyncGetNetInterfaceRaw(::grpc::ClientContext* context, const ::opi_api::network::v1alpha1::GetNetInterfaceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::opi_api::network::v1alpha1::NetInterface, ::opi_api::network::v1alpha1::GetNetInterfaceRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetNetInterface_, context, request);
}

::grpc::ClientAsyncResponseReader< ::opi_api::network::v1alpha1::NetInterface>* NetInterfaceService::Stub::AsyncGetNetInterfaceRaw(::grpc::ClientContext* context, const ::opi_api::network::v1alpha1::GetNetInterfaceRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetNetInterfaceRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status NetInterfaceService::Stub::ListNetInterfaces(::grpc::ClientContext* context, const ::opi_api::network::v1alpha1::ListNetInterfacesRequest& request, ::opi_api::network::v1alpha1::ListNetInterfacesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::opi_api::network::v1alpha1::ListNetInterfacesRequest, ::opi_api::network::v1alpha1::ListNetInterfacesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ListNetInterfaces_, context, request, response);
}

void NetInterfaceService::Stub::async::ListNetInterfaces(::grpc::ClientContext* context, const ::opi_api::network::v1alpha1::ListNetInterfacesRequest* request, ::opi_api::network::v1alpha1::ListNetInterfacesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::opi_api::network::v1alpha1::ListNetInterfacesRequest, ::opi_api::network::v1alpha1::ListNetInterfacesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListNetInterfaces_, context, request, response, std::move(f));
}

void NetInterfaceService::Stub::async::ListNetInterfaces(::grpc::ClientContext* context, const ::opi_api::network::v1alpha1::ListNetInterfacesRequest* request, ::opi_api::network::v1alpha1::ListNetInterfacesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListNetInterfaces_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::opi_api::network::v1alpha1::ListNetInterfacesResponse>* NetInterfaceService::Stub::PrepareAsyncListNetInterfacesRaw(::grpc::ClientContext* context, const ::opi_api::network::v1alpha1::ListNetInterfacesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::opi_api::network::v1alpha1::ListNetInterfacesResponse, ::opi_api::network::v1alpha1::ListNetInterfacesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ListNetInterfaces_, context, request);
}

::grpc::ClientAsyncResponseReader< ::opi_api::network::v1alpha1::ListNetInterfacesResponse>* NetInterfaceService::Stub::AsyncListNetInterfacesRaw(::grpc::ClientContext* context, const ::opi_api::network::v1alpha1::ListNetInterfacesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListNetInterfacesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status NetInterfaceService::Stub::UpdateNetInterface(::grpc::ClientContext* context, const ::opi_api::network::v1alpha1::UpdateNetInterfaceRequest& request, ::opi_api::network::v1alpha1::NetInterface* response) {
  return ::grpc::internal::BlockingUnaryCall< ::opi_api::network::v1alpha1::UpdateNetInterfaceRequest, ::opi_api::network::v1alpha1::NetInterface, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateNetInterface_, context, request, response);
}

void NetInterfaceService::Stub::async::UpdateNetInterface(::grpc::ClientContext* context, const ::opi_api::network::v1alpha1::UpdateNetInterfaceRequest* request, ::opi_api::network::v1alpha1::NetInterface* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::opi_api::network::v1alpha1::UpdateNetInterfaceRequest, ::opi_api::network::v1alpha1::NetInterface, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateNetInterface_, context, request, response, std::move(f));
}

void NetInterfaceService::Stub::async::UpdateNetInterface(::grpc::ClientContext* context, const ::opi_api::network::v1alpha1::UpdateNetInterfaceRequest* request, ::opi_api::network::v1alpha1::NetInterface* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateNetInterface_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::opi_api::network::v1alpha1::NetInterface>* NetInterfaceService::Stub::PrepareAsyncUpdateNetInterfaceRaw(::grpc::ClientContext* context, const ::opi_api::network::v1alpha1::UpdateNetInterfaceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::opi_api::network::v1alpha1::NetInterface, ::opi_api::network::v1alpha1::UpdateNetInterfaceRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateNetInterface_, context, request);
}

::grpc::ClientAsyncResponseReader< ::opi_api::network::v1alpha1::NetInterface>* NetInterfaceService::Stub::AsyncUpdateNetInterfaceRaw(::grpc::ClientContext* context, const ::opi_api::network::v1alpha1::UpdateNetInterfaceRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateNetInterfaceRaw(context, request, cq);
  result->StartCall();
  return result;
}

NetInterfaceService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NetInterfaceService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NetInterfaceService::Service, ::opi_api::network::v1alpha1::GetNetInterfaceRequest, ::opi_api::network::v1alpha1::NetInterface, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](NetInterfaceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::opi_api::network::v1alpha1::GetNetInterfaceRequest* req,
             ::opi_api::network::v1alpha1::NetInterface* resp) {
               return service->GetNetInterface(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NetInterfaceService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NetInterfaceService::Service, ::opi_api::network::v1alpha1::ListNetInterfacesRequest, ::opi_api::network::v1alpha1::ListNetInterfacesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](NetInterfaceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::opi_api::network::v1alpha1::ListNetInterfacesRequest* req,
             ::opi_api::network::v1alpha1::ListNetInterfacesResponse* resp) {
               return service->ListNetInterfaces(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NetInterfaceService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NetInterfaceService::Service, ::opi_api::network::v1alpha1::UpdateNetInterfaceRequest, ::opi_api::network::v1alpha1::NetInterface, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](NetInterfaceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::opi_api::network::v1alpha1::UpdateNetInterfaceRequest* req,
             ::opi_api::network::v1alpha1::NetInterface* resp) {
               return service->UpdateNetInterface(ctx, req, resp);
             }, this)));
}

NetInterfaceService::Service::~Service() {
}

::grpc::Status NetInterfaceService::Service::GetNetInterface(::grpc::ServerContext* context, const ::opi_api::network::v1alpha1::GetNetInterfaceRequest* request, ::opi_api::network::v1alpha1::NetInterface* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NetInterfaceService::Service::ListNetInterfaces(::grpc::ServerContext* context, const ::opi_api::network::v1alpha1::ListNetInterfacesRequest* request, ::opi_api::network::v1alpha1::ListNetInterfacesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NetInterfaceService::Service::UpdateNetInterface(::grpc::ServerContext* context, const ::opi_api::network::v1alpha1::UpdateNetInterfaceRequest* request, ::opi_api::network::v1alpha1::NetInterface* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace opi_api
}  // namespace network
}  // namespace v1alpha1

