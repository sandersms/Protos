# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: openconfig_vlan.proto
"""Generated protocol buffer code."""
from google.protobuf.internal import enum_type_wrapper
from google.protobuf import descriptor as _descriptor
from google.protobuf import descriptor_pool as _descriptor_pool
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(b'\n\x15openconfig_vlan.proto\x12\x18opi_api.network.v1alpha1\"\x97\x01\n\x13SwitchedVlanSetting\x12\x41\n\x13vlan_interface_mode\x18\x01 \x01(\x0e\x32$.opi_api.network.v1alpha1.VlanIfMode\x12\x13\n\x0bnative_vlan\x18\x02 \x01(\r\x12\x13\n\x0b\x61\x63\x63\x65ss_vlan\x18\x03 \x01(\r\x12\x13\n\x0btrunk_vlans\x18\x04 \x01(\t\"\x8d\x01\n\x0eVlanSwitchedIf\x12=\n\x06\x63onfig\x18\x01 \x01(\x0b\x32-.opi_api.network.v1alpha1.SwitchedVlanSetting\x12<\n\x05state\x18\x02 \x01(\x0b\x32-.opi_api.network.v1alpha1.SwitchedVlanSetting\"\xa2\x01\n\x18VlanIngressEgressSetting\x12\x42\n\x0fvlanstackaction\x18\x01 \x01(\x0e\x32).opi_api.network.v1alpha1.VlanStackAction\x12\x0f\n\x07vlan_id\x18\x02 \x01(\r\x12\x31\n\x04tpid\x18\x03 \x01(\x0e\x32#.opi_api.network.v1alpha1.TpidTypes\"\xe0\t\n\x06VlanIf\x12\x39\n\x05match\x18\x01 \x01(\x0b\x32*.opi_api.network.v1alpha1.VlanIf.VlanMatch\x12K\n\x0eingressmapping\x18\x02 \x01(\x0b\x32\x33.opi_api.network.v1alpha1.VlanIf.VlanIngressMapping\x12I\n\regressmapping\x18\x03 \x01(\x0b\x32\x32.opi_api.network.v1alpha1.VlanIf.VlanEgressMapping\x1a\xc7\x05\n\tVlanMatch\x12M\n\x0csingletagged\x18\x01 \x01(\x0b\x32\x37.opi_api.network.v1alpha1.VlanIf.VlanMatch.SingleTagged\x12U\n\x10singletaggedlist\x18\x02 \x01(\x0b\x32;.opi_api.network.v1alpha1.VlanIf.VlanMatch.SingleTaggedList\x1a\x85\x02\n\x0cSingleTagged\x12W\n\x06\x63onfig\x18\x01 \x01(\x0b\x32G.opi_api.network.v1alpha1.VlanIf.VlanMatch.SingleTagged.SingleTagConfig\x12U\n\x05state\x18\x02 \x01(\x0b\x32\x46.opi_api.network.v1alpha1.VlanIf.VlanMatch.SingleTagged.SingleTagState\x1a\"\n\x0fSingleTagConfig\x12\x0f\n\x07vlan_id\x18\x01 \x01(\r\x1a!\n\x0eSingleTagState\x12\x0f\n\x07vlan_id\x18\x01 \x01(\r\x1a\x8b\x02\n\x10SingleTaggedList\x12Y\n\x06\x63onfig\x18\x01 \x01(\x0b\x32I.opi_api.network.v1alpha1.VlanIf.VlanMatch.SingleTaggedList.TagListConfig\x12Y\n\x06status\x18\x02 \x01(\x0b\x32I.opi_api.network.v1alpha1.VlanIf.VlanMatch.SingleTaggedList.TagListStatus\x1a \n\rTagListConfig\x12\x0f\n\x07vlan_id\x18\x01 \x03(\r\x1a\x1f\n\rTagListStatus\x12\x0e\n\x06vlanid\x18\x01 \x03(\r\x1a\x9b\x01\n\x12VlanIngressMapping\x12\x42\n\x06\x63onfig\x18\x01 \x01(\x0b\x32\x32.opi_api.network.v1alpha1.VlanIngressEgressSetting\x12\x41\n\x05state\x18\x02 \x01(\x0b\x32\x32.opi_api.network.v1alpha1.VlanIngressEgressSetting\x1a\x9a\x01\n\x11VlanEgressMapping\x12\x42\n\x06\x63onfig\x18\x01 \x01(\x0b\x32\x32.opi_api.network.v1alpha1.VlanIngressEgressSetting\x12\x41\n\x05state\x18\x02 \x01(\x0b\x32\x32.opi_api.network.v1alpha1.VlanIngressEgressSetting*\x97\x01\n\tTpidTypes\x12\x1a\n\x16TPID_TYPES_UNSPECIFIED\x10\x00\x12\x15\n\x11TPID_TYPES_0X8100\x10\x01\x12\x15\n\x11TPID_TYPES_0X88A8\x10\x02\x12\x15\n\x11TPID_TYPES_0X9100\x10\x03\x12\x15\n\x11TPID_TYPES_0X9200\x10\x04\x12\x12\n\x0eTPID_TYPES_ANY\x10\x05*\x87\x01\n\x0fVlanStackAction\x12!\n\x1dVLAN_STACK_ACTION_UNSPECIFIED\x10\x00\x12\x1a\n\x16VLAN_STACK_ACTION_PUSH\x10\x01\x12\x19\n\x15VLAN_STACK_ACTION_POP\x10\x02\x12\x1a\n\x16VLAN_STACK_ACTION_SWAP\x10\x03*[\n\nVlanIfMode\x12\x1c\n\x18VLAN_IF_MODE_UNSPECIFIED\x10\x00\x12\x17\n\x13VLAN_IF_MODE_ACCESS\x10\x01\x12\x16\n\x12VLAN_IF_MODE_TRUNK\x10\x02\x42u\n\x18opi_api.network.v1alpha1B\x13OpenconfigVlanProtoP\x01ZBgithub.com/opiproject/opi-api/network/opinetcommon/v1alpha1/gen/gob\x06proto3')

_TPIDTYPES = DESCRIPTOR.enum_types_by_name['TpidTypes']
TpidTypes = enum_type_wrapper.EnumTypeWrapper(_TPIDTYPES)
_VLANSTACKACTION = DESCRIPTOR.enum_types_by_name['VlanStackAction']
VlanStackAction = enum_type_wrapper.EnumTypeWrapper(_VLANSTACKACTION)
_VLANIFMODE = DESCRIPTOR.enum_types_by_name['VlanIfMode']
VlanIfMode = enum_type_wrapper.EnumTypeWrapper(_VLANIFMODE)
TPID_TYPES_UNSPECIFIED = 0
TPID_TYPES_0X8100 = 1
TPID_TYPES_0X88A8 = 2
TPID_TYPES_0X9100 = 3
TPID_TYPES_0X9200 = 4
TPID_TYPES_ANY = 5
VLAN_STACK_ACTION_UNSPECIFIED = 0
VLAN_STACK_ACTION_PUSH = 1
VLAN_STACK_ACTION_POP = 2
VLAN_STACK_ACTION_SWAP = 3
VLAN_IF_MODE_UNSPECIFIED = 0
VLAN_IF_MODE_ACCESS = 1
VLAN_IF_MODE_TRUNK = 2


_SWITCHEDVLANSETTING = DESCRIPTOR.message_types_by_name['SwitchedVlanSetting']
_VLANSWITCHEDIF = DESCRIPTOR.message_types_by_name['VlanSwitchedIf']
_VLANINGRESSEGRESSSETTING = DESCRIPTOR.message_types_by_name['VlanIngressEgressSetting']
_VLANIF = DESCRIPTOR.message_types_by_name['VlanIf']
_VLANIF_VLANMATCH = _VLANIF.nested_types_by_name['VlanMatch']
_VLANIF_VLANMATCH_SINGLETAGGED = _VLANIF_VLANMATCH.nested_types_by_name['SingleTagged']
_VLANIF_VLANMATCH_SINGLETAGGED_SINGLETAGCONFIG = _VLANIF_VLANMATCH_SINGLETAGGED.nested_types_by_name['SingleTagConfig']
_VLANIF_VLANMATCH_SINGLETAGGED_SINGLETAGSTATE = _VLANIF_VLANMATCH_SINGLETAGGED.nested_types_by_name['SingleTagState']
_VLANIF_VLANMATCH_SINGLETAGGEDLIST = _VLANIF_VLANMATCH.nested_types_by_name['SingleTaggedList']
_VLANIF_VLANMATCH_SINGLETAGGEDLIST_TAGLISTCONFIG = _VLANIF_VLANMATCH_SINGLETAGGEDLIST.nested_types_by_name['TagListConfig']
_VLANIF_VLANMATCH_SINGLETAGGEDLIST_TAGLISTSTATUS = _VLANIF_VLANMATCH_SINGLETAGGEDLIST.nested_types_by_name['TagListStatus']
_VLANIF_VLANINGRESSMAPPING = _VLANIF.nested_types_by_name['VlanIngressMapping']
_VLANIF_VLANEGRESSMAPPING = _VLANIF.nested_types_by_name['VlanEgressMapping']
SwitchedVlanSetting = _reflection.GeneratedProtocolMessageType('SwitchedVlanSetting', (_message.Message,), {
  'DESCRIPTOR' : _SWITCHEDVLANSETTING,
  '__module__' : 'openconfig_vlan_pb2'
  # @@protoc_insertion_point(class_scope:opi_api.network.v1alpha1.SwitchedVlanSetting)
  })
_sym_db.RegisterMessage(SwitchedVlanSetting)

VlanSwitchedIf = _reflection.GeneratedProtocolMessageType('VlanSwitchedIf', (_message.Message,), {
  'DESCRIPTOR' : _VLANSWITCHEDIF,
  '__module__' : 'openconfig_vlan_pb2'
  # @@protoc_insertion_point(class_scope:opi_api.network.v1alpha1.VlanSwitchedIf)
  })
_sym_db.RegisterMessage(VlanSwitchedIf)

VlanIngressEgressSetting = _reflection.GeneratedProtocolMessageType('VlanIngressEgressSetting', (_message.Message,), {
  'DESCRIPTOR' : _VLANINGRESSEGRESSSETTING,
  '__module__' : 'openconfig_vlan_pb2'
  # @@protoc_insertion_point(class_scope:opi_api.network.v1alpha1.VlanIngressEgressSetting)
  })
_sym_db.RegisterMessage(VlanIngressEgressSetting)

VlanIf = _reflection.GeneratedProtocolMessageType('VlanIf', (_message.Message,), {

  'VlanMatch' : _reflection.GeneratedProtocolMessageType('VlanMatch', (_message.Message,), {

    'SingleTagged' : _reflection.GeneratedProtocolMessageType('SingleTagged', (_message.Message,), {

      'SingleTagConfig' : _reflection.GeneratedProtocolMessageType('SingleTagConfig', (_message.Message,), {
        'DESCRIPTOR' : _VLANIF_VLANMATCH_SINGLETAGGED_SINGLETAGCONFIG,
        '__module__' : 'openconfig_vlan_pb2'
        # @@protoc_insertion_point(class_scope:opi_api.network.v1alpha1.VlanIf.VlanMatch.SingleTagged.SingleTagConfig)
        })
      ,

      'SingleTagState' : _reflection.GeneratedProtocolMessageType('SingleTagState', (_message.Message,), {
        'DESCRIPTOR' : _VLANIF_VLANMATCH_SINGLETAGGED_SINGLETAGSTATE,
        '__module__' : 'openconfig_vlan_pb2'
        # @@protoc_insertion_point(class_scope:opi_api.network.v1alpha1.VlanIf.VlanMatch.SingleTagged.SingleTagState)
        })
      ,
      'DESCRIPTOR' : _VLANIF_VLANMATCH_SINGLETAGGED,
      '__module__' : 'openconfig_vlan_pb2'
      # @@protoc_insertion_point(class_scope:opi_api.network.v1alpha1.VlanIf.VlanMatch.SingleTagged)
      })
    ,

    'SingleTaggedList' : _reflection.GeneratedProtocolMessageType('SingleTaggedList', (_message.Message,), {

      'TagListConfig' : _reflection.GeneratedProtocolMessageType('TagListConfig', (_message.Message,), {
        'DESCRIPTOR' : _VLANIF_VLANMATCH_SINGLETAGGEDLIST_TAGLISTCONFIG,
        '__module__' : 'openconfig_vlan_pb2'
        # @@protoc_insertion_point(class_scope:opi_api.network.v1alpha1.VlanIf.VlanMatch.SingleTaggedList.TagListConfig)
        })
      ,

      'TagListStatus' : _reflection.GeneratedProtocolMessageType('TagListStatus', (_message.Message,), {
        'DESCRIPTOR' : _VLANIF_VLANMATCH_SINGLETAGGEDLIST_TAGLISTSTATUS,
        '__module__' : 'openconfig_vlan_pb2'
        # @@protoc_insertion_point(class_scope:opi_api.network.v1alpha1.VlanIf.VlanMatch.SingleTaggedList.TagListStatus)
        })
      ,
      'DESCRIPTOR' : _VLANIF_VLANMATCH_SINGLETAGGEDLIST,
      '__module__' : 'openconfig_vlan_pb2'
      # @@protoc_insertion_point(class_scope:opi_api.network.v1alpha1.VlanIf.VlanMatch.SingleTaggedList)
      })
    ,
    'DESCRIPTOR' : _VLANIF_VLANMATCH,
    '__module__' : 'openconfig_vlan_pb2'
    # @@protoc_insertion_point(class_scope:opi_api.network.v1alpha1.VlanIf.VlanMatch)
    })
  ,

  'VlanIngressMapping' : _reflection.GeneratedProtocolMessageType('VlanIngressMapping', (_message.Message,), {
    'DESCRIPTOR' : _VLANIF_VLANINGRESSMAPPING,
    '__module__' : 'openconfig_vlan_pb2'
    # @@protoc_insertion_point(class_scope:opi_api.network.v1alpha1.VlanIf.VlanIngressMapping)
    })
  ,

  'VlanEgressMapping' : _reflection.GeneratedProtocolMessageType('VlanEgressMapping', (_message.Message,), {
    'DESCRIPTOR' : _VLANIF_VLANEGRESSMAPPING,
    '__module__' : 'openconfig_vlan_pb2'
    # @@protoc_insertion_point(class_scope:opi_api.network.v1alpha1.VlanIf.VlanEgressMapping)
    })
  ,
  'DESCRIPTOR' : _VLANIF,
  '__module__' : 'openconfig_vlan_pb2'
  # @@protoc_insertion_point(class_scope:opi_api.network.v1alpha1.VlanIf)
  })
_sym_db.RegisterMessage(VlanIf)
_sym_db.RegisterMessage(VlanIf.VlanMatch)
_sym_db.RegisterMessage(VlanIf.VlanMatch.SingleTagged)
_sym_db.RegisterMessage(VlanIf.VlanMatch.SingleTagged.SingleTagConfig)
_sym_db.RegisterMessage(VlanIf.VlanMatch.SingleTagged.SingleTagState)
_sym_db.RegisterMessage(VlanIf.VlanMatch.SingleTaggedList)
_sym_db.RegisterMessage(VlanIf.VlanMatch.SingleTaggedList.TagListConfig)
_sym_db.RegisterMessage(VlanIf.VlanMatch.SingleTaggedList.TagListStatus)
_sym_db.RegisterMessage(VlanIf.VlanIngressMapping)
_sym_db.RegisterMessage(VlanIf.VlanEgressMapping)

if _descriptor._USE_C_DESCRIPTORS == False:

  DESCRIPTOR._options = None
  DESCRIPTOR._serialized_options = b'\n\030opi_api.network.v1alpha1B\023OpenconfigVlanProtoP\001ZBgithub.com/opiproject/opi-api/network/opinetcommon/v1alpha1/gen/go'
  _TPIDTYPES._serialized_start=1766
  _TPIDTYPES._serialized_end=1917
  _VLANSTACKACTION._serialized_start=1920
  _VLANSTACKACTION._serialized_end=2055
  _VLANIFMODE._serialized_start=2057
  _VLANIFMODE._serialized_end=2148
  _SWITCHEDVLANSETTING._serialized_start=52
  _SWITCHEDVLANSETTING._serialized_end=203
  _VLANSWITCHEDIF._serialized_start=206
  _VLANSWITCHEDIF._serialized_end=347
  _VLANINGRESSEGRESSSETTING._serialized_start=350
  _VLANINGRESSEGRESSSETTING._serialized_end=512
  _VLANIF._serialized_start=515
  _VLANIF._serialized_end=1763
  _VLANIF_VLANMATCH._serialized_start=737
  _VLANIF_VLANMATCH._serialized_end=1448
  _VLANIF_VLANMATCH_SINGLETAGGED._serialized_start=917
  _VLANIF_VLANMATCH_SINGLETAGGED._serialized_end=1178
  _VLANIF_VLANMATCH_SINGLETAGGED_SINGLETAGCONFIG._serialized_start=1109
  _VLANIF_VLANMATCH_SINGLETAGGED_SINGLETAGCONFIG._serialized_end=1143
  _VLANIF_VLANMATCH_SINGLETAGGED_SINGLETAGSTATE._serialized_start=1145
  _VLANIF_VLANMATCH_SINGLETAGGED_SINGLETAGSTATE._serialized_end=1178
  _VLANIF_VLANMATCH_SINGLETAGGEDLIST._serialized_start=1181
  _VLANIF_VLANMATCH_SINGLETAGGEDLIST._serialized_end=1448
  _VLANIF_VLANMATCH_SINGLETAGGEDLIST_TAGLISTCONFIG._serialized_start=1383
  _VLANIF_VLANMATCH_SINGLETAGGEDLIST_TAGLISTCONFIG._serialized_end=1415
  _VLANIF_VLANMATCH_SINGLETAGGEDLIST_TAGLISTSTATUS._serialized_start=1417
  _VLANIF_VLANMATCH_SINGLETAGGEDLIST_TAGLISTSTATUS._serialized_end=1448
  _VLANIF_VLANINGRESSMAPPING._serialized_start=1451
  _VLANIF_VLANINGRESSMAPPING._serialized_end=1606
  _VLANIF_VLANEGRESSMAPPING._serialized_start=1609
  _VLANIF_VLANEGRESSMAPPING._serialized_end=1763
# @@protoc_insertion_point(module_scope)
