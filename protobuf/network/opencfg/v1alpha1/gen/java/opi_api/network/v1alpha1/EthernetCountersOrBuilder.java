// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: openconfig_ethernet.proto

package opi_api.network.v1alpha1;

public interface EthernetCountersOrBuilder extends
    // @@protoc_insertion_point(interface_extends:opi_api.network.v1alpha1.EthernetCounters)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * received mac control frame counter
   * </pre>
   *
   * <code>uint64 rx_mac_control_frames = 1;</code>
   * @return The rxMacControlFrames.
   */
  long getRxMacControlFrames();

  /**
   * <pre>
   * received mac pause frame counter
   * </pre>
   *
   * <code>uint64 rx_mac_pause_frames = 2;</code>
   * @return The rxMacPauseFrames.
   */
  long getRxMacPauseFrames();

  /**
   * <pre>
   * frames received that were oversized on the interface
   * (larger then 1518 octets)
   * </pre>
   *
   * <code>uint64 rx_oversize_frames = 3;</code>
   * @return The rxOversizeFrames.
   */
  long getRxOversizeFrames();

  /**
   * <pre>
   * frames received that were undersized on the interface
   * (smaller then 64 octets)
   * </pre>
   *
   * <code>uint64 rx_undersize_frames = 4;</code>
   * @return The rxUndersizeFrames.
   */
  long getRxUndersizeFrames();

  /**
   * <pre>
   * Number of jabber frames received on the interface.
   * Jabber frames are typically defined as oversize frames which also
   * have a bad CRC
   * </pre>
   *
   * <code>uint64 rx_jabber_frames = 5;</code>
   * @return The rxJabberFrames.
   */
  long getRxJabberFrames();

  /**
   * <pre>
   * The total number of frames received that were less than 64 octets
   * in length (excluding framing bits but including FCS octets)
   * and had either a bad Frame Check Sequence (FCS) with an integral
   * number of octets (FCS Error) or a bad FCS with a non-integral number
   * of octets (Alignment Error)
   * </pre>
   *
   * <code>uint64 rx_fragment_frames = 6;</code>
   * @return The rxFragmentFrames.
   */
  long getRxFragmentFrames();

  /**
   * <pre>
   * Number of 802.1q tagged frames received on the interface
   * </pre>
   *
   * <code>uint64 rx_ieee8021q_frames = 7;</code>
   * @return The rxIeee8021qFrames.
   */
  long getRxIeee8021QFrames();

  /**
   * <pre>
   * The total number of frames received that had FCS errors
   * </pre>
   *
   * <code>uint64 rx_crc_errors = 8;</code>
   * @return The rxCrcErrors.
   */
  long getRxCrcErrors();

  /**
   * <pre>
   * The number of received errored blocks
   * </pre>
   *
   * <code>uint64 rx_block_errors = 9;</code>
   * @return The rxBlockErrors.
   */
  long getRxBlockErrors();

  /**
   * <pre>
   * The number of received errored frames due to a carrier issue
   * </pre>
   *
   * <code>uint64 rx_carrier_errors = 10;</code>
   * @return The rxCarrierErrors.
   */
  long getRxCarrierErrors();

  /**
   * <pre>
   * The number of received errored frames due to interrupted transmission
   * issue
   * </pre>
   *
   * <code>uint64 rx_interrupted_tx = 11;</code>
   * @return The rxInterruptedTx.
   */
  long getRxInterruptedTx();

  /**
   * <pre>
   * The number of received errored frames due to late collision issue
   * </pre>
   *
   * <code>uint64 rx_late_collision = 12;</code>
   * @return The rxLateCollision.
   */
  long getRxLateCollision();

  /**
   * <pre>
   * The number of received errored frames due to MAC errors received
   * </pre>
   *
   * <code>uint64 rx_mac_errors_rx = 13;</code>
   * @return The rxMacErrorsRx.
   */
  long getRxMacErrorsRx();

  /**
   * <pre>
   * The number of received errored frames due to single collision issue
   * </pre>
   *
   * <code>uint64 rx_single_collision = 14;</code>
   * @return The rxSingleCollision.
   */
  long getRxSingleCollision();

  /**
   * <pre>
   * The number of received errored frames due to symbol error
   * </pre>
   *
   * <code>uint64 rx_symbol_error = 15;</code>
   * @return The rxSymbolError.
   */
  long getRxSymbolError();

  /**
   * <pre>
   * The total number frames received that are well-formed but dropped due
   * to exceeding the maximum frame size on the interface
   * </pre>
   *
   * <code>uint64 rx_maxsize_exceeded = 16;</code>
   * @return The rxMaxsizeExceeded.
   */
  long getRxMaxsizeExceeded();

  /**
   * <pre>
   * MAC layer control frames sent on the interface
   * </pre>
   *
   * <code>uint64 out_mac_control_frames = 17;</code>
   * @return The outMacControlFrames.
   */
  long getOutMacControlFrames();

  /**
   * <pre>
   * MAC layer PAUSE frames sent on the interface
   * </pre>
   *
   * <code>uint64 out_mac_pause_frames = 18;</code>
   * @return The outMacPauseFrames.
   */
  long getOutMacPauseFrames();

  /**
   * <pre>
   * Number of 802.1q tagged frames sent on the interface
   * </pre>
   *
   * <code>uint64 out_ieee8021q_frames = 19;</code>
   * @return The outIeee8021qFrames.
   */
  long getOutIeee8021QFrames();

  /**
   * <pre>
   * The number of sent errored frames due to MAC errors transmitted
   * </pre>
   *
   * <code>uint64 out_mac_errors_tx = 20;</code>
   * @return The outMacErrorsTx.
   */
  long getOutMacErrorsTx();

  /**
   * <pre>
   * Receive Frame Distribution counters
   * </pre>
   *
   * <code>.opi_api.network.v1alpha1.EthernetInDistribution eth_rx_distribution = 21;</code>
   * @return Whether the ethRxDistribution field is set.
   */
  boolean hasEthRxDistribution();
  /**
   * <pre>
   * Receive Frame Distribution counters
   * </pre>
   *
   * <code>.opi_api.network.v1alpha1.EthernetInDistribution eth_rx_distribution = 21;</code>
   * @return The ethRxDistribution.
   */
  opi_api.network.v1alpha1.EthernetInDistribution getEthRxDistribution();
  /**
   * <pre>
   * Receive Frame Distribution counters
   * </pre>
   *
   * <code>.opi_api.network.v1alpha1.EthernetInDistribution eth_rx_distribution = 21;</code>
   */
  opi_api.network.v1alpha1.EthernetInDistributionOrBuilder getEthRxDistributionOrBuilder();
}
