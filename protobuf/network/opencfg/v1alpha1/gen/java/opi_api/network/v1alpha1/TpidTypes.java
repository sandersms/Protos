// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: openconfig_vlan.proto

package opi_api.network.v1alpha1;

/**
 * <pre>
 * Tag Protocol Identifier (TPID) Types Enumeration
 * </pre>
 *
 * Protobuf enum {@code opi_api.network.v1alpha1.TpidTypes}
 */
public enum TpidTypes
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <pre>
   * Unspecified
   * </pre>
   *
   * <code>TPID_TYPES_UNSPECIFIED = 0;</code>
   */
  TPID_TYPES_UNSPECIFIED(0),
  /**
   * <pre>
   * Default value for 802.1q single-tagged VLANs
   * </pre>
   *
   * <code>TPID_TYPES_0X8100 = 1;</code>
   */
  TPID_TYPES_0X8100(1),
  /**
   * <pre>
   * Value for 802.1ad provider bridging, QinQ, or stacked VLANs
   * </pre>
   *
   * <code>TPID_TYPES_0X88A8 = 2;</code>
   */
  TPID_TYPES_0X88A8(2),
  /**
   * <pre>
   * Alternate TPID value
   * </pre>
   *
   * <code>TPID_TYPES_0X9100 = 3;</code>
   */
  TPID_TYPES_0X9100(3),
  /**
   * <pre>
   * Alternate TPID value
   * </pre>
   *
   * <code>TPID_TYPES_0X9200 = 4;</code>
   */
  TPID_TYPES_0X9200(4),
  /**
   * <pre>
   * Any - Wildcard that matches any of the singly or multiply tagged VLANS
   * </pre>
   *
   * <code>TPID_TYPES_ANY = 5;</code>
   */
  TPID_TYPES_ANY(5),
  UNRECOGNIZED(-1),
  ;

  /**
   * <pre>
   * Unspecified
   * </pre>
   *
   * <code>TPID_TYPES_UNSPECIFIED = 0;</code>
   */
  public static final int TPID_TYPES_UNSPECIFIED_VALUE = 0;
  /**
   * <pre>
   * Default value for 802.1q single-tagged VLANs
   * </pre>
   *
   * <code>TPID_TYPES_0X8100 = 1;</code>
   */
  public static final int TPID_TYPES_0X8100_VALUE = 1;
  /**
   * <pre>
   * Value for 802.1ad provider bridging, QinQ, or stacked VLANs
   * </pre>
   *
   * <code>TPID_TYPES_0X88A8 = 2;</code>
   */
  public static final int TPID_TYPES_0X88A8_VALUE = 2;
  /**
   * <pre>
   * Alternate TPID value
   * </pre>
   *
   * <code>TPID_TYPES_0X9100 = 3;</code>
   */
  public static final int TPID_TYPES_0X9100_VALUE = 3;
  /**
   * <pre>
   * Alternate TPID value
   * </pre>
   *
   * <code>TPID_TYPES_0X9200 = 4;</code>
   */
  public static final int TPID_TYPES_0X9200_VALUE = 4;
  /**
   * <pre>
   * Any - Wildcard that matches any of the singly or multiply tagged VLANS
   * </pre>
   *
   * <code>TPID_TYPES_ANY = 5;</code>
   */
  public static final int TPID_TYPES_ANY_VALUE = 5;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static TpidTypes valueOf(int value) {
    return forNumber(value);
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   */
  public static TpidTypes forNumber(int value) {
    switch (value) {
      case 0: return TPID_TYPES_UNSPECIFIED;
      case 1: return TPID_TYPES_0X8100;
      case 2: return TPID_TYPES_0X88A8;
      case 3: return TPID_TYPES_0X9100;
      case 4: return TPID_TYPES_0X9200;
      case 5: return TPID_TYPES_ANY;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<TpidTypes>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      TpidTypes> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<TpidTypes>() {
          public TpidTypes findValueByNumber(int number) {
            return TpidTypes.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalStateException(
          "Can't get the descriptor of an unrecognized enum value.");
    }
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return opi_api.network.v1alpha1.OpenconfigVlanProto.getDescriptor().getEnumTypes().get(0);
  }

  private static final TpidTypes[] VALUES = values();

  public static TpidTypes valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private TpidTypes(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:opi_api.network.v1alpha1.TpidTypes)
}

